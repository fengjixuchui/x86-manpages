.nh
.TH "X86-CLAC" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
CLAC - CLEAR AC FLAG IN EFLAGS REGISTER
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp / En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F 01 CA CLAC	ZO	V/V	SMAP	T{
Clear the AC flag in the EFLAGS register.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Clears the AC flag bit in EFLAGS register. This disables any alignment
checking of user\-mode data accesses. If the SMAP bit is set in the CR4
register, this disallows explicit supervisor\-mode data accesses to
user\-mode pages.

.PP
This instruction's operation is the same in non\-64\-bit modes and 64\-bit
mode. Attempts to execute CLAC when CPL \&gt; 0 cause #UD.

.SH OPERATION
.PP
.RS

.nf
EFLAGS.AC ← 0;

.fi
.RE

.SH FLAGS AFFECTED
.PP
AC cleared. Other flags are unaffected.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	If the CPL 
\&gt;
 0.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.SMAP
T}
[
bit 20
]
 = 0.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.SMAP
T}
[
bit 20
]
 = 0.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The CLAC instruction is not recognized in virtual\-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	If the CPL 
\&gt;
 0.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.SMAP
T}
[
bit 20
]
 = 0.
.TE

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	If the CPL 
\&gt;
 0.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.SMAP
T}
[
bit 20
]
 = 0.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
