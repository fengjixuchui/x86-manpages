.nh
.TH "X86-HLT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
HLT - HALT
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
F4	HLT	ZO	Valid	Valid	Halt
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Stops instruction execution and places the processor in a HALT state. An
enabled interrupt (including NMI and SMI), a debug exception, the
BINIT# signal, the INIT# signal, or the RESET# signal will resume
execution. If an interrupt (including NMI) is used to resume execution
after a HLT instruction, the saved instruction pointer (CS:EIP) points
to the instruction following the HLT instruction.

.PP
When a HLT instruction is executed on an Intel 64 or IA\-32 processor
supporting Intel Hyper\-Threading Technology, only the logical processor
that executes the instruction is halted. The other logical processors in
the physical processor remain active, unless they are each individually
halted by executing a HLT instruction.

.PP
The HLT instruction is a privileged instruction. When the processor is
running in protected or virtual\-8086 mode, the privilege level of a
program or procedure must be 0 to execute the HLT instruction.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
Enter Halt state;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the current privilege level is not 0.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
None.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
