.nh
.TH "X86-GETSEC[SMCTRL]" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
GETSEC[SMCTRL] - SMX MODE CONTROL
.TS
allbox;
l l l 
l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCDescription\fR
NP 0F 37 (EAX = 7)	GETSEC[SMCTRL]	T{
Perform specified SMX mode control as selected with the input EBX.
T}
.TE

.SH DESCRIPTION
.PP
The GETSEC[SMCTRL] instruction is available for performing certain SMX
specific mode control operations. The operation to be performed is
selected through the input register EBX. Currently only an input value
in EBX of 0 is supported. All other EBX settings will result in the
signaling of a general protection violation.

.PP
If EBX is set to 0, then the SMCTRL leaf is used to re\-enable SMI
events. SMI is masked by the ILP executing the GETSEC[SENTER]
instruction (SMI is also masked in the responding logical processors in
response to SENTER rendezvous messages.). The determination of when this
instruction is allowed and the events that are unmasked is dependent on
the processor context (See Table
6\-11). For brevity, the usage of SMCTRL where EBX=0 will be
referred to as GETSEC[SMCTRL(0)]\&.

.PP
As part of support for launching a measured environment, the SMI, NMI
and INIT events are masked after GETSEC[SENTER], and remain masked
after exiting authenticated execution mode. Unmasking these events
should be accompanied by securely enabling these event handlers. These
security concerns can be addressed in VMX operation by a MVMM.

.PP
The VM monitor can choose two approaches:

.RS
.IP \(bu 2
In a dual monitor approach, the executive software will set up an
SMM monitor in parallel to the executive VMM (i.e. the MVMM), see
Chapter 34, “System Management Mode” of Developer’s Manual, Volume
3C. The SMM monitor is dedicated to handling SMI events without
compromising the security of the MVMM. This usage model of handling
SMI while a measured environment is active does not require the use
of GETSEC[SMCTRL(0)] as event re\-enabling after the VMX
environment launch is handled implicitly and through separate VMX
based controls.
.IP \(bu 2
If a dedicated SMM monitor will not be established and SMIs are to
be handled within the measured environment, then GETSEC[SMCTRL(0)]
can be used by the executive software to re\-enable SMI that has been
masked as a result of SENTER.

.RE

.PP
Table 6\-11 defines the processor
context in which GETSEC[SMCTRL(0)] can be used and which events will
be unmasked. Note that the events that are unmasked are dependent upon
the currently operating processor context.

.TS
allbox;
l l 
l l .
\fB\fCILP Mode of Operation\fR	\fB\fCSMCTRL execution action\fR
In VMX non\-root operation	VM exit
SENTERFLAG = 0	
#
GP(0), illegal context
T{
In authenticated code execution mode (ACMODEFLAG = 1)
T}
	
#
GP(0), illegal context
T{
SENTERFLAG = 1, not in VMX operation, not in SMM
T}
	Unmask SMI
T{
SENTERFLAG = 1, in VMX root operation, not in SMM
T}
	T{
Unmask SMI if SMM monitor is not configured, otherwise 
T}
#
GP(0)
T{
SENTERFLAG = 1, In VMX root operation, in SMM
T}
	
#
GP(0), illegal context
.TE

.PP
Table 6\-11\&. Supported Actions for
GETSEC[SMCTRL(0)]

.SH OPERATION
.PP
.RS

.nf
(* The state of the internal flag ACMODEFLAG and SENTERFLAG persist across instruction boundary *)
IF (CR4.SMXE=0)
    THEN #UD;
ELSE IF (in VMX non\-root operation)
    THEN VM Exit (reason=”GETSEC instruction”);
ELSE IF (GETSEC leaf unsupported)
    THEN #UD;
ELSE IF ((CR0.PE=0) or (CPL>0) OR (EFLAGS.VM=1))
    THEN #GP(0);
ELSE IF((EBX=0) and (SENTERFLAG=1) and (ACMODEFLAG=0) and (IN\_SMM=0) and
        (((in VMX root operation) and (SMM monitor not configured)) or (not in VMX operation)) )
    THEN unmask SMI;
ELSE
    #GP(0);
END

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH USE OF PREFIXES
.PP
LOCK Causes #UD.

.PP
REP* Cause #UD (includes REPNE/REPNZ and REP/REPE/REPZ).

.PP
Operand size Causes #UD.

.PP
NP 66/F2/F3 prefixes are not allowed.

.PP
Segmentoverrides Ignored.

.PP
Address size Ignored.

.PP
REX Ignored.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If CR4.SMXE = 0.
	If GETSEC
[
SMCTRL
]
T{
 is not reported as supported by GETSEC
T}
[
CAPABILITIES
]
\&.
#GP(0)	IfCR0.PE=0orCPL
\&gt;
0orEFLAGS.VM=1.
	If in VMX root operation.
	T{
If a protected partition is not already active or the processor is currently in authenticated code mode.
T}
	If the processor is in SMM.
	T{
If the SMM monitor is not configured.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If CR4.SMXE = 0.
	If GETSEC
[
SMCTRL
]
T{
 is not reported as supported by GETSEC
T}
[
CAPABILITIES
]
\&.
#GP(0)	GETSEC
[
SMCTRL
]
T{
 is not recognized in real\-address mode.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If CR4.SMXE = 0.
	If GETSEC
[
SMCTRL
]
T{
 is not reported as supported by GETSEC
T}
[
CAPABILITIES
]
\&.
#GP(0)	GETSEC
[
SMCTRL
]
T{
 is not recognized in virtual\-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
All protected mode exceptions apply.

.SH 64\-BIT MODE EXCEPTIONS
.PP
All protected mode exceptions apply.

.SH VM\-EXIT CONDITION
.PP
Reason (GETSEC) IF in VMX non\-root operation.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
