.nh
.TH "X86-IN" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
IN - INPUT FROM PORT
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
E4 ib	IN AL, imm8	I	Valid	Valid	T{
Input byte from imm8 I/O port address into AL.
T}
E5 ib	IN AX, imm8	I	Valid	Valid	T{
Input word from imm8 I/O port address into AX.
T}
E5 ib	IN EAX, imm8	I	Valid	Valid	T{
Input dword from imm8 I/O port address into EAX.
T}
EC	IN AL,DX	ZO	Valid	Valid	T{
Input byte from I/O port in DX into AL.
T}
ED	IN AX,DX	ZO	Valid	Valid	T{
Input word from I/O port in DX into AX.
T}
ED	IN EAX,DX	ZO	Valid	Valid	T{
Input doubleword from I/O port in DX into EAX.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
I	imm8	NA	NA	NA
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Copies the value from the I/O port specified with the second operand
(source operand) to the destination operand (first operand). The source
operand can be a byte\-immediate or the DX register; the destination
operand can be register AL, AX, or EAX, depending on the size of the
port being accessed (8, 16, or 32 bits, respectively). Using the DX
register as a source operand allows I/O port addresses from 0 to 65,535
to be accessed; using a byte immediate allows I/O port addresses 0 to
255 to be accessed.

.PP
When accessing an 8\-bit I/O port, the opcode determines the port size;
when accessing a 16\- and 32\-bit I/O port, the operand\-size attribute
determines the port size. At the machine code level, I/O instructions
are shorter when accessing 8\-bit I/O ports. Here, the upper eight bits
of the port address will be 0.

.PP
This instruction is only useful for accessing I/O ports located in the
processor’s I/O address space. See Chapter 18, “Input/Output,” in the
Intel® 64 and IA\-32 Architectures Software Developer’s Manual, Volume 1,
for more information on accessing I/O ports in the I/O address space.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
IF ((PE = 1) and ((CPL > IOPL) or (VM = 1)))
    THEN (* Protected mode with CPL > IOPL or virtual\-8086 mode *)
        IF (Any I/O Permission Bit for I/O port being accessed = 1)
            THEN (* I/O operation is not allowed *)
                #GP(0);
            ELSE ( * I/O operation is allowed *)
                DEST ← SRC; (* Read from selected I/O port *)
        FI;
    ELSE (Real Mode or Protected Mode with CPL ≤ IOPL *)
        DEST ← SRC; (* Read from selected I/O port *)
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the CPL is greater than (has less privilege) the I/O privilege level (IOPL) and any of the corresponding I/O permission bits in TSS for the I/O port being accessed is 1.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If any of the I/O permission bits in the TSS for the I/O port being accessed is 1.
T}
#PF(fault\-code)	If a page fault occurs.
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the CPL is greater than (has less privilege) the I/O privilege level (IOPL) and any of the corresponding I/O permission bits in TSS for the I/O port being accessed is 1.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
