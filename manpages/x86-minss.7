.nh
.TH "X86-MINSS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
MINSS - RETURN MINIMUM SCALAR SINGLE-PRECISION FLOATING-POINT VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp / En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
F3 0F 5D /r MINSS xmm1,xmm2/m32
T}
	A	V/V	SSE	T{
Return the minimum scalar single\-precision floating\-point value between xmm2/m32 and xmm1.
T}
T{
VEX.LIG.F3.0F.WIG 5D /r VMINSS xmm1,xmm2, xmm3/m32
T}
	B	V/V	AVX	T{
Return the minimum scalar single\-precision floating\-point value between xmm3/m32 and xmm2.
T}
T{
EVEX.LIG.F3.0F.W0 5D /r VMINSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}
T}
	C	V/V	AVX512F	T{
Return the minimum scalar single\-precision floating\-point value between xmm3/m32 and xmm2.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv	ModRM:r/m (r)	NA
C	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
Compares the low single\-precision floating\-point values in the first
source operand and the second source operand and returns the minimum
value to the low doubleword of the destination operand.

.PP
If the values being compared are both 0.0s (of either sign), the value
in the second source operand is returned. If a value in the second
operand is an SNaN, that SNaN is returned unchanged to the destination
(that is, a QNaN version of the SNaN is not returned).

.PP
If only one value is a NaN (SNaN or QNaN) for this instruction, the
second source operand, either a NaN or a valid floating\-point value, is
written to the result. If instead of this behavior, it is required that
the NaN in either source operand be returned, the action of MINSD can be
emulated using a sequence of instructions, such as, a comparison
followed by AND, ANDN and OR.

.PP
The second source operand can be an XMM register or a 32\-bit memory
location. The first source and destination operands are XMM registers.

.PP
128\-bit Legacy SSE version: The destination and first source operand are
the same. Bits (MAXVL:32) of the corresponding destination register
remain unchanged.

.PP
VEX.128 and EVEX encoded version: The first source operand is an xmm
register encoded by (E)VEX.vvvv. Bits (127:32) of the XMM register
destination are copied from corresponding bits in the first source
operand. Bits (MAXVL\-1:128) of the destination register are zeroed.

.PP
EVEX encoded version: The low doubleword element of the destination
operand is updated according to the writemask.

.PP
Software should ensure VMINSS is encoded with VEX.L=0. Encoding VMINSS
with VEX.L=1 may encounter unpredictable behavior across different
processor generations.

.SS Operation
.PP
.RS

.nf
MIN(SRC1, SRC2)
{
    IF ((SRC1 = 0.0) and (SRC2 = 0.0)) THEN DEST ←SRC2;
        ELSE IF (SRC1 = SNaN) THEN DEST ←SRC2; FI;
        ELSE IF (SRC2 = SNaN) THEN DEST ←SRC2; FI;
        ELSE IF (SRC1 < SRC2) THEN DEST ←SRC1;
        ELSE DEST←SRC2;
    FI;
}

.fi
.RE

.SS MINSS (EVEX encoded version)
.PP
.RS

.nf
IF k1[0] or *no writemask*
    THEN DEST[31:0]←MIN(SRC1[31:0], SRC2[31:0])
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[31:0]←0
        FI;
FI;
DEST[127:32] ← SRC1[127:32]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VMINSS (VEX.128 encoded version)
.PP
.RS

.nf
DEST[31:0]←MIN(SRC1[31:0], SRC2[31:0])
DEST[127:32] ←SRC1[127:32]
DEST[MAXVL\-1:128] ←0

.fi
.RE

.SS MINSS (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[31:0]←MIN(SRC1[31:0], SRC2[31:0])
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VMINSS \_\_m128 \_mm\_min\_round\_ss( \_\_m128 a, \_\_m128 b, int);

VMINSS \_\_m128 \_mm\_mask\_min\_round\_ss(\_\_m128 s, \_\_mmask8 k, \_\_m128 a, \_\_m128 b, int);

VMINSS \_\_m128 \_mm\_maskz\_min\_round\_ss( \_\_mmask8 k, \_\_m128 a, \_\_m128 b, int);

MINSS \_\_m128 \_mm\_min\_ss(\_\_m128 a, \_\_m128 b)

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
Invalid (Including QNaN Source Operand), Denormal

.SS Other Exceptions
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 2.

.PP
EVEX\-encoded instruction, see Exceptions Type E2.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
