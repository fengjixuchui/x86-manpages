.nh
.TH "X86-MOVDQA-VMOVDQA32-VMOVDQA64" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
MOVDQA-VMOVDQA32-VMOVDQA64 - MOVE ALIGNED PACKED INTEGER VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
66 0F 6F /r MOVDQA xmm1, xmm2/m128
T}
	A	V/V	SSE2	T{
Move aligned packed integer values from xmm2/mem to xmm1.
T}
T{
66 0F 7F /r MOVDQA xmm2/m128, xmm1
T}
	B	V/V	SSE2	T{
Move aligned packed integer values from xmm1 to xmm2/mem.
T}
T{
VEX.128.66.0F.WIG 6F /r VMOVDQA xmm1, xmm2/m128
T}
	A	V/V	AVX	T{
Move aligned packed integer values from xmm2/mem to xmm1.
T}
T{
VEX.128.66.0F.WIG 7F /r VMOVDQA xmm2/m128, xmm1
T}
	B	V/V	AVX	T{
Move aligned packed integer values from xmm1 to xmm2/mem.
T}
T{
VEX.256.66.0F.WIG 6F /r VMOVDQA ymm1, ymm2/m256
T}
	A	V/V	AVX	T{
Move aligned packed integer values from ymm2/mem to ymm1.
T}
T{
VEX.256.66.0F.WIG 7F /r VMOVDQA ymm2/m256, ymm1
T}
	B	V/V	AVX	T{
Move aligned packed integer values from ymm1 to ymm2/mem.
T}
T{
EVEX.128.66.0F.W0 6F /r VMOVDQA32 xmm1 {k1}{z}, xmm2/m128
T}
	C	V/V	AVX512VL AVX512F	T{
Move aligned packed doubleword integer values from xmm2/m128 to xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F.W0 6F /r VMOVDQA32 ymm1 {k1}{z}, ymm2/m256
T}
	C	V/V	AVX512VL AVX512F	T{
Move aligned packed doubleword integer values from ymm2/m256 to ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F.W0 6F /r VMOVDQA32 zmm1 {k1}{z}, zmm2/m512
T}
	C	V/V	AVX512F	T{
Move aligned packed doubleword integer values from zmm2/m512 to zmm1 using writemask k1.
T}
T{
EVEX.128.66.0F.W0 7F /r VMOVDQA32 xmm2/m128 {k1}{z}, xmm1
T}
	D	V/V	AVX512VL AVX512F	T{
Move aligned packed doubleword integer values from xmm1 to xmm2/m128 using writemask k1.
T}
T{
EVEX.256.66.0F.W0 7F /r VMOVDQA32 ymm2/m256 {k1}{z}, ymm1
T}
	D	V/V	AVX512VL AVX512F	T{
Move aligned packed doubleword integer values from ymm1 to ymm2/m256 using writemask k1.
T}
T{
EVEX.512.66.0F.W0 7F /r VMOVDQA32 zmm2/m512 {k1}{z}, zmm1
T}
	D	V/V	AVX512F	T{
Move aligned packed doubleword integer values from zmm1 to zmm2/m512 using writemask k1.
T}
T{
EVEX.128.66.0F.W1 6F /r VMOVDQA64 xmm1 {k1}{z}, xmm2/m128
T}
	C	V/V	AVX512VL AVX512F	T{
Move aligned quadword integer values from xmm2/m128 to xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F.W1 6F /r VMOVDQA64 ymm1 {k1}{z}, ymm2/m256
T}
	C	V/V	AVX512VL AVX512F	T{
Move aligned quadword integer values from ymm2/m256 to ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F.W1 6F /r VMOVDQA64 zmm1 {k1}{z}, zmm2/m512
T}
	C	V/V	AVX512F	T{
Move aligned packed quadword integer values from zmm2/m512 to zmm1 using writemask k1.
T}
T{
EVEX.128.66.0F.W1 7F /r VMOVDQA64 xmm2/m128 {k1}{z}, xmm1
T}
	D	V/V	AVX512VL AVX512F	T{
Move aligned packed quadword integer values from xmm1 to xmm2/m128 using writemask k1.
T}
T{
EVEX.256.66.0F.W1 7F /r VMOVDQA64 ymm2/m256 {k1}{z}, ymm1
T}
	D	V/V	AVX512VL AVX512F	T{
Move aligned packed quadword integer values from ymm1 to ymm2/m256 using writemask k1.
T}
T{
EVEX.512.66.0F.W1 7F /r VMOVDQA64 zmm2/m512 {k1}{z}, zmm1
T}
	D	V/V	AVX512F	T{
Move aligned packed quadword integer values from zmm1 to zmm2/m512 using writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:r/m (w)	ModRM:reg (r)	NA	NA
C	Full Mem	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
D	Full Mem	ModRM:r/m (w)	ModRM:reg (r)	NA	NA
.TE

.SS Description
.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.PP
EVEX encoded versions:

.PP
Moves 128, 256 or 512 bits of packed doubleword/quadword integer values
from the source operand (the second operand) to the destination operand
(the first operand). This instruction can be used to load a vector
register from an int32/int64 memory location, to store the contents of a
vector register into an int32/int64 memory location, or to move data
between two ZMM registers. When the source or destination operand is a
memory operand, the operand must be aligned on a 16
(EVEX.128)/32(EVEX.256)/64(EVEX.512)\-byte boundary or a
general\-protection exception (#GP) will be generated. To move integer
data to and from unaligned memory locations, use the VMOVDQU
instruction.

.PP
The destination operand is updated at 32\-bit (VMOVDQA32) or 64\-bit
(VMOVDQA64) granularity according to the writemask.

.PP
VEX.256 encoded version:

.PP
Moves 256 bits of packed integer values from the source operand (second
operand) to the destination operand (first operand). This instruction
can be used to load a YMM register from a 256\-bit memory location, to
store the contents of a YMM register into a 256\-bit memory location, or
to move data between two YMM registers.

.PP
When the source or destination operand is a memory operand, the operand
must be aligned on a 32\-byte boundary or a general\-protection exception
(#GP) will be generated. To move integer data to and from unaligned
memory locations, use the VMOVDQU instruction. Bits (MAXVL\-1:256) of the
destination register are zeroed.

.PP
128\-bit versions:

.PP
Moves 128 bits of packed integer values from the source operand (second
operand) to the destination operand (first operand). This instruction
can be used to load an XMM register from a 128\-bit memory location, to
store the contents of an XMM register into a 128\-bit memory location, or
to move data between two XMM registers.

.PP
When the source or destination operand is a memory operand, the operand
must be aligned on a 16\-byte boundary or a general\-protection exception
(#GP) will be generated. To move integer data to and from unaligned
memory locations, use the VMOVDQU instruction.

.PP
128\-bit Legacy SSE version: Bits (MAXVL\-1:128) of the corresponding ZMM
destination register remain unchanged.

.PP
VEX.128 encoded version: Bits (MAXVL\-1:128) of the destination register
are zeroed.

.SS Operation
.SS VMOVDQA32 (EVEX encoded versions, register\-copy form)
.PP
.RS

.nf
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j←0 TO KL\-1
    i←j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i]←SRC[i+31:i]
        ELSE
            IF *merging\-masking*
                THEN *DEST[i+31:i] remains unchanged*
                ELSE DEST[i+31:i]←0 ; zeroing\-masking
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VMOVDQA32 (EVEX encoded versions, store\-form)
.PP
.RS

.nf
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j←0 TO KL\-1
    i←j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i]←SRC[i+31:i]
        ELSE *DEST[i+31:i] remains unchanged*
            ; merging\-masking
    FI;
ENDFOR;

.fi
.RE

.SS VMOVDQA32 (EVEX encoded versions, load\-form)
.PP
.RS

.nf
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j←0 TO KL\-1
    i←j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i]←SRC[i+31:i]
        ELSE
            IF *merging\-masking*
                    ; merging\-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE DEST[i+31:i]←0
                    ; zeroing\-masking
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VMOVDQA64 (EVEX encoded versions, register\-copy form)
.PP
.RS

.nf
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL\-1
    i←j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i]←SRC[i+63:i]
        ELSE
            IF *merging\-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE DEST[i+63:i]←0 ; zeroing\-masking
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VMOVDQA64 (EVEX encoded versions, store\-form)
.PP
.RS

.nf
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL\-1
    i←j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i]←SRC[i+63:i]
        ELSE *DEST[i+63:i] remains unchanged*
            ; merging\-masking
    FI;
ENDFOR;

.fi
.RE

.SS VMOVDQA64 (EVEX encoded versions, load\-form)
.PP
.RS

.nf
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL\-1
    i←j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i]←SRC[i+63:i]
        ELSE
            IF *merging\-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE DEST[i+63:i]←0 ; zeroing\-masking
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VMOVDQA (VEX.256 encoded version, load \- and register copy)
.PP
.RS

.nf
DEST[255:0] ← SRC[255:0]
DEST[MAXVL\-1:256] ← 0

.fi
.RE

.SS VMOVDQA (VEX.256 encoded version, store\-form)
.PP
.RS

.nf
DEST[255:0] ← SRC[255:0]

.fi
.RE

.SS VMOVDQA (VEX.128 encoded version)
.PP
.RS

.nf
DEST[127:0] ← SRC[127:0]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VMOVDQA (128\-bit load\- and register\-copy\- form Legacy SSE version)
.PP
.RS

.nf
DEST[127:0] ← SRC[127:0]
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS (V)MOVDQA (128\-bit store\-form version)
.PP
.RS

.nf
DEST[127:0] ← SRC[127:0]

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VMOVDQA32 \_\_m512i \_mm512\_load\_epi32( void * sa);

VMOVDQA32 \_\_m512i \_mm512\_mask\_load\_epi32(\_\_m512i s, \_\_mmask16 k, void * sa);

VMOVDQA32 \_\_m512i \_mm512\_maskz\_load\_epi32( \_\_mmask16 k, void * sa);

VMOVDQA32 void \_mm512\_store\_epi32(void * d, \_\_m512i a);

VMOVDQA32 void \_mm512\_mask\_store\_epi32(void * d, \_\_mmask16 k, \_\_m512i a);

VMOVDQA32 \_\_m256i \_mm256\_mask\_load\_epi32(\_\_m256i s, \_\_mmask8 k, void * sa);

VMOVDQA32 \_\_m256i \_mm256\_maskz\_load\_epi32( \_\_mmask8 k, void * sa);

VMOVDQA32 void \_mm256\_store\_epi32(void * d, \_\_m256i a);

VMOVDQA32 void \_mm256\_mask\_store\_epi32(void * d, \_\_mmask8 k, \_\_m256i a);

VMOVDQA32 \_\_m128i \_mm\_mask\_load\_epi32(\_\_m128i s, \_\_mmask8 k, void * sa);

VMOVDQA32 \_\_m128i \_mm\_maskz\_load\_epi32( \_\_mmask8 k, void * sa);

VMOVDQA32 void \_mm\_store\_epi32(void * d, \_\_m128i a);

VMOVDQA32 void \_mm\_mask\_store\_epi32(void * d, \_\_mmask8 k, \_\_m128i a);

VMOVDQA64 \_\_m512i \_mm512\_load\_epi64( void * sa);

VMOVDQA64 \_\_m512i \_mm512\_mask\_load\_epi64(\_\_m512i s, \_\_mmask8 k, void * sa);

VMOVDQA64 \_\_m512i \_mm512\_maskz\_load\_epi64( \_\_mmask8 k, void * sa);

VMOVDQA64 void \_mm512\_store\_epi64(void * d, \_\_m512i a);

VMOVDQA64 void \_mm512\_mask\_store\_epi64(void * d, \_\_mmask8 k, \_\_m512i a);

VMOVDQA64 \_\_m256i \_mm256\_mask\_load\_epi64(\_\_m256i s, \_\_mmask8 k, void * sa);

VMOVDQA64 \_\_m256i \_mm256\_maskz\_load\_epi64( \_\_mmask8 k, void * sa);

VMOVDQA64 void \_mm256\_store\_epi64(void * d, \_\_m256i a);

VMOVDQA64 void \_mm256\_mask\_store\_epi64(void * d, \_\_mmask8 k, \_\_m256i a);

VMOVDQA64 \_\_m128i \_mm\_mask\_load\_epi64(\_\_m128i s, \_\_mmask8 k, void * sa);

VMOVDQA64 \_\_m128i \_mm\_maskz\_load\_epi64( \_\_mmask8 k, void * sa);

VMOVDQA64 void \_mm\_store\_epi64(void * d, \_\_m128i a);

VMOVDQA64 void \_mm\_mask\_store\_epi64(void * d, \_\_mmask8 k, \_\_m128i a);

MOVDQA void \_\_m256i \_mm256\_load\_si256 (\_\_m256i * p);

MOVDQA \_mm256\_store\_si256(\_m256i *p, \_\_m256i a);

MOVDQA \_\_m128i \_mm\_load\_si128 (\_\_m128i * p);

MOVDQA void \_mm\_store\_si128(\_\_m128i *p, \_\_m128i a);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type1.SSE2;

.PP
EVEX\-encoded instruction, see Exceptions Type E1.

.TS
allbox;
l l 
l l .
#UD	T{
If EVEX.vvvv != 1111B or VEX.vvvv != 1111B.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
