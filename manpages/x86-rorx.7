.nh
.TH "X86-RORX" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
RORX - ROTATE RIGHT LOGICAL WITHOUT AFFECTING FLAGS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 \-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.LZ.F2.0F3A.W0 F0 /r ib RORX r32, r/m32, imm8
T}
	RMI	V/V	BMI2	T{
Rotate 32\-bit imm8 times without affecting arithmetic flags.
T}
T{
VEX.LZ.F2.0F3A.W1 F0 /r ib RORX r64, r/m64, imm8
T}
	RMI	V/N.E.	BMI2	T{
Rotate 64\-bit imm8 times without affecting arithmetic flags.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RMI	ModRM:reg (w)	ModRM:r/m (r)	Imm8	NA
.TE

.SH DESCRIPTION
.PP
Rotates the bits of second operand right by the count value specified in
imm8 without affecting arithmetic flags. The RORX instruction does not
read or write the arithmetic flags.

.PP
This instruction is not supported in real mode and virtual\-8086 mode.
The operand size is always 32 bits if not in 64\-bit mode. In 64\-bit mode
operand size 64 requires VEX.W1. VEX.W1 is ignored in non\-64\-bit modes.
An attempt to execute this instruction with VEX.L not equal to 0 will
cause #UD.

.SH OPERATION
.PP
.RS

.nf
IF (OperandSize = 32)
    y ← imm8 AND 1FH;
    DEST ← (SRC >> y) | (SRC << (32\-y));
ELSEIF (OperandSize = 64 )
    y ← imm8 AND 3FH;
    DEST ← (SRC >> y) | (SRC << (64\-y));
ENDIF

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
Auto\-generated from high\-level language.

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 13.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
