.nh
.TH "X86-FCOM-FCOMP-FCOMPP" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FCOM-FCOMP-FCOMPP - COMPARE FLOATING POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
D8 /2	FCOM m32fp	Valid	Valid	Compare ST(0) with m32fp.
DC /2	FCOM m64fp	Valid	Valid	Compare ST(0) with m64fp.
D8 D0+i	FCOM ST(i)	Valid	Valid	Compare ST(0) with ST(i).
D8 D1	FCOM	Valid	Valid	Compare ST(0) with ST(1).
D8 /3	FCOMP m32fp	Valid	Valid	T{
Compare ST(0) with m32fp and pop register stack.
T}
DC /3	FCOMP m64fp	Valid	Valid	T{
Compare ST(0) with m64fp and pop register stack.
T}
D8 D8+i	FCOMP ST(i)	Valid	Valid	T{
Compare ST(0) with ST(i) and pop register stack.
T}
D8 D9	FCOMP	Valid	Valid	T{
Compare ST(0) with ST(1) and pop register stack.
T}
DE D9	FCOMPP	Valid	Valid	T{
Compare ST(0) with ST(1) and pop register stack twice.
T}
.TE

.SH DESCRIPTION
.PP
Compares the contents of register ST(0) and source value and sets
condition code flags C0, C2, and C3 in the FPU status word according to
the results (see the table below). The source operand can be a data
register or a memory location. If no source operand is given, the value
in ST(0) is compared with the value in ST(1). The sign of zero is
ignored, so that –0.0 is equal to +0.0.

.TS
allbox;
l l l l 
l l l l .
\fB\fCCondition\fR	\fB\fCC3\fR	\fB\fCC2\fR	\fB\fCC0\fR
ST(0) \&gt; SRC	0	0	0
ST(0) \&lt; SRC	0	0	1
ST(0) = SRC	1	0	0
Unordered*	1	1	1
.TE

.PP
Table 3\-21. FCOM/FCOMP/FCOMPP Results

.PP
.RS

.PP
*
Flagsnotsetifunmaskedinvalid\-arithmetic\-operand(#IA)exceptionisgenerated.

.RE

.PP
This instruction checks the class of the numbers being compared (see
“FXAM—Examine Floating\-Point” in this chapter). If either operand is a
NaN or is in an unsupported format, an invalid\-arithmetic\-operand
exception (#IA) is raised and, if the exception is masked, the
condition flags are set to “unordered.” If the
invalid\-arithmetic\-operand exception is unmasked, the condition code
flags are not set.

.PP
The FCOMP instruction pops the register stack following the comparison
operation and the FCOMPP instruction pops the register stack twice
following the comparison operation. To pop the register stack, the
processor marks the ST(0) register as empty and increments the stack
pointer (TOP) by 1.

.PP
The FCOM instructions perform the same operation as the FUCOM
instructions. The only difference is how they handle QNaN operands. The
FCOM instructions raise an invalid\-arithmetic\-operand exception (#IA)
when either or both of the operands is a NaN value or is in an
unsupported format. The FUCOM instructions perform the same operation as
the FCOM instructions, except that they do not generate an
invalid\-arithmetic\-operand exception for QNaNs.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
CASE (relation of operands) OF
    ST > SRC:
                    C3, C2, C0 ← 000;
    ST < SRC:
                    C3, C2, C0 ← 001;
    ST = SRC:
                    C3, C2, C0 ← 100;
ESAC;
IF ST(0) or SRC = NaN or unsupported format
    THEN
        #IA
        IF FPUControlWord.IM = 1
            THEN
                C3, C2, C0 ← 111;
        FI;
FI;
IF Instruction = FCOMP
    THEN
        PopRegisterStack;
FI;
IF Instruction = FCOMPP
    THEN
        PopRegisterStack;
        PopRegisterStack;
FI;

.fi
.RE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
C1	Set to 0.
C0, C2, C3	See table on previous page.
.TE

.SH FLOATING\-POINT EXCEPTIONS
.TS
allbox;
l l 
l l .
#IS	Stack underflow occurred.
#IA	T{
One or both operands are NaN values or have unsupported formats.
T}
	Register is marked empty.
#D	T{
One or both operands are denormal values.
T}
.TE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
