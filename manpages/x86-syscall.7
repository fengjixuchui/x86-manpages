.nh
.TH "X86-SYSCALL" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
SYSCALL - FAST SYSTEM CALL
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
0F 05	SYSCALL	ZO	Valid	Invalid	T{
Fast call to privilege level 0 system procedures.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
SYSCALL invokes an OS system\-call handler at privilege level 0. It does
so by loading RIP from the IA32\_LSTAR MSR (after saving the address of
the instruction following SYSCALL into RCX). (The WRMSR instruction
ensures that the IA32\_LSTAR MSR always contain a canonical address.)

.PP
SYSCALL also saves RFLAGS into R11 and then masks RFLAGS using the
IA32\_FMASK MSR (MSR address C0000084H); specifically, the processor
clears in RFLAGS every bit corresponding to a bit that is set in the
IA32\_FMASK MSR.

.PP
SYSCALL loads the CS and SS selectors with values derived from bits
47:32 of the IA32\_STAR MSR. However, the CS and SS descriptor caches
are not loaded from the descriptors (in GDT or LDT) referenced by those
selectors. Instead, the descriptor caches are loaded with fixed values.
See the Operation section for details. It is the responsibility of OS
software to ensure that the descriptors (in GDT or LDT) referenced by
those selector values correspond to the fixed values loaded into the
descriptor caches; the SYSCALL instruction does not ensure this
correspondence.

.PP
The SYSCALL instruction does not save the stack pointer (RSP). If the OS
system\-call handler will change the stack pointer, it is the
responsibility of software to save the previous value of the stack
pointer. This might be done prior to executing SYSCALL, with software
restoring the stack pointer with the instruction following SYSCALL
(which will be executed after SYSRET). Alternatively, the OS system\-call
handler may save the stack pointer and restore it before executing
SYSRET.

.PP
Instruction ordering. Instructions following a SYSCALL may be fetched
from memory before earlier instructions complete execution, but they
will not execute (even speculatively) until all instructions prior to
the SYSCALL have completed execution (the later instructions may execute
before data stored by the earlier instructions have become globally
visible).

.SH OPERATION
.PP
.RS

.nf
IF (CS.L ≠ 1 ) or (IA32\_EFER.LMA ≠ 1) or (IA32\_EFER.SCE ≠ 1)
(* Not in 64\-Bit Mode or SYSCALL/SYSRET not enabled in IA32\_EFER *)
    THEN #UD;
FI;
RCX ← RIP; (* Will contain address of next instruction *)
RIP ← IA32\_LSTAR;
R11 ← RFLAGS;
RFLAGS ← RFLAGS AND NOT(IA32\_FMASK);
CS.Selector ← IA32\_STAR[47:32] AND FFFCH (* Operating system provides CS; RPL forced to 0 *)
(* Set rest of CS to a fixed value *)
CS.Base ← 0;
        (* Flat segment *)
CS.Limit ← FFFFFH;
        (* With 4\-KByte granularity, implies a 4\-GByte limit *)
CS.Type ← 11;
        (* Execute/read code, accessed *)
CS.S ← 1;
CS.DPL ← 0;
CS.P ← 1;
CS.L ← 1;
        (* Entry is to 64\-bit mode *)
CS.D ← 0;
        (* Required if CS.L = 1 *)
CS.G ← 1;
        (* 4\-KByte granularity *)
CPL ← 0;
SS.Selector ← IA32\_STAR[47:32] + 8;
        (* SS just above CS *)
(* Set rest of SS to a fixed value *)
SS.Base ← 0;
        (* Flat segment *)
SS.Limit ← FFFFFH;
        (* With 4\-KByte granularity, implies a 4\-GByte limit *)
SS.Type ← 3;
        (* Read/write data, accessed *)
SS.S ← 1;
SS.DPL ← 0;
SS.P ← 1;
SS.B ← 1;
        (* 32\-bit stack segment *)
SS.G ← 1;
        (* 4\-KByte granularity *)

.fi
.RE

.SH FLAGS AFFECTED
.PP
All.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The SYSCALL instruction is not recognized in protected mode.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The SYSCALL instruction is not recognized in real\-address mode.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The SYSCALL instruction is not recognized in virtual\-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The SYSCALL instruction is not recognized in compatibility mode.
T}
.TE

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If IA32
\_
EFER.SCE = 0.
	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
