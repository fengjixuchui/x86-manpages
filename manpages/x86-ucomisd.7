.nh
.TH "X86-UCOMISD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
UCOMISD - UNORDERED COMPARE SCALAR DOUBLE-PRECISION FLOATING-POINT VALUES AND SET EFLAGS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
66 0F 2E /r UCOMISD xmm1, xmm2/m64
T}
	A	V/V	SSE2	T{
Compare low double\-precision floating\-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly.
T}
T{
VEX.LIG.66.0F.WIG 2E /r VUCOMISD xmm1, xmm2/m64
T}
	A	V/V	AVX	T{
Compare low double\-precision floating\-point values in xmm1 and xmm2/mem64 and set the EFLAGS flags accordingly.
T}
T{
EVEX.LIG.66.0F.W1 2E /r VUCOMISD xmm1, xmm2/m64{sae}
T}
	B	V/V	AVX512F	T{
Compare low double\-precision floating\-point values in xmm1 and xmm2/m64 and set the EFLAGS flags accordingly.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r)	ModRM:r/m (r)	NA	NA
B	Tuple1 Scalar	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SS Description
.PP
Performs an unordered compare of the double\-precision floating\-point
values in the low quadwords of operand 1 (first operand) and operand 2
(second operand), and sets the ZF, PF, and CF flags in the EFLAGS
register according to the result (unordered, greater than, less than, or
equal). The OF, SF and AF flags in the EFLAGS register are set to 0. The
unordered result is returned if either source operand is a NaN (QNaN or
SNaN).

.PP
Operand 1 is an XMM register; operand 2 can be an XMM register or a 64
bit memory

.PP
location.

.PP
The UCOMISD instruction differs from the COMISD instruction in that it
signals a SIMD floating\-point invalid operation exception (#I) only
when a source operand is an SNaN. The COMISD instruction signals an
invalid numeric exception only if a source operand is either an SNaN or
a QNaN.

.PP
The EFLAGS register is not updated if an unmasked SIMD floating\-point
exception is generated.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise
instructions will #UD.

.PP
Software should ensure VCOMISD is encoded with VEX.L=0. Encoding VCOMISD
with VEX.L=1 may encounter unpredictable behavior across different
processor generations.

.SS Operation
.SS (V)UCOMISD (all versions)
.PP
.RS

.nf
RESULT← UnorderedCompare(DEST[63:0] <> SRC[63:0]) {
(* Set EFLAGS *) CASE (RESULT) OF
    UNORDERED: ZF,PF,CF←111;
    GREATER\_THAN: ZF,PF,CF←000;
    LESS\_THAN: ZF,PF,CF←001;
    EQUAL: ZF,PF,CF←100;
ESAC;
OF, AF, SF←0; }

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VUCOMISD int \_mm\_comi\_round\_sd(\_\_m128d a, \_\_m128d b, int imm, int sae);

UCOMISD int \_mm\_ucomieq\_sd(\_\_m128d a, \_\_m128d b)

UCOMISD int \_mm\_ucomilt\_sd(\_\_m128d a, \_\_m128d b)

UCOMISD int \_mm\_ucomile\_sd(\_\_m128d a, \_\_m128d b)

UCOMISD int \_mm\_ucomigt\_sd(\_\_m128d a, \_\_m128d b)

UCOMISD int \_mm\_ucomige\_sd(\_\_m128d a, \_\_m128d b)

UCOMISD int \_mm\_ucomineq\_sd(\_\_m128d a, \_\_m128d b)

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
Invalid (if SNaN operands), Denormal

.SS Other Exceptions
.PP
VEX\-encoded instructions, see Exceptions Type 3; additionally

.TS
allbox;
l l 
l l .
#UD	If VEX.vvvv != 1111B.
.TE

.PP
EVEX\-encoded instructions, see Exceptions Type E3NF.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
