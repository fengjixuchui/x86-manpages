.nh
.TH "X86-VREDUCESD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VREDUCESD - PERFORM A REDUCTION TRANSFORMATION ON A SCALAR FLOAT64 VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp / En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.LIG.66.0F3A.W1 57 VREDUCESD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8/r
T}
	A	V/V	AVX512D Q	T{
Perform a reduction transformation on a scalar double\-precision floating point value in xmm3/m64 by subtracting a number of fraction bits specified by the imm8 field. Also, upper double precision floating\-point value (bits
T}
[
127:64
]
) from xmm2 are copied to xmm1
[
127:64
]
T{
\&. Stores the result in xmm1 register.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
Perform a reduction transformation of the binary encoded
double\-precision FP value in the low qword element of the second source
operand (the third operand) and store the reduced result in binary FP
format to the low qword element of the destination operand (the first
operand) under the writemask k1. Bits 127:64 of the destination operand
are copied from respective qword elements of the first source operand
(the second operand).

.PP
The reduction transformation subtracts the integer part and the leading
M fractional bits from the binary FP source value, where M is a unsigned
integer specified by imm8[7:4], see Figure 5\-28. Specifically, the
reduction transformation can be expressed as:

.PP
dest = src – (ROUND(2\-M;

.PP
where “Round()” treats “src”, “2M”, and their product as binary FP
numbers with normalized significand and biased exponents.

.PP
The magnitude of the reduced result can be expressed by considering src=
2p*man2,

.PP
where ‘man2’ is the normalized significand and ‘p’ is the unbiased
exponent

.PP
Then if RC = RNE: 0\&lt;=|Reduced Result|\&lt;=2p\-M\-1

.PP
Then if RC ≠ RNE: 0\&lt;=|Reduced Result|\&lt;2p\-M

.PP
This instruction might end up with a precision exception set. However,
in case of SPE set (i.e. Suppress Precision Exception, which is
imm8[3]=1), no precision exception is reported.

.PP
The operation is write masked.

.PP
Handling of special case of input values are listed in Table 5\-24.

.SS Operation
.PP
.RS

.nf
ReduceArgumentDP(SRC[63:0], imm8[7:0])
{
    // Check for NaN
    IF (SRC [63:0] = NAN) THEN
        RETURN (Convert SRC[63:0] to QNaN); FI;
    M ← imm8[7:4]; // Number of fraction bits of the normalized significand to be subtracted
    RC←imm8[1:0];// Round Control for ROUND() operation
    RC source←imm[2];
    SPE←0;// Suppress Precision Exception
    TMP[63:0] ← 2M as standard binary FP values
    TMP[63:0]←SRC[63:0] – TMP[63:0]; // subtraction under the same RC,SPE controls
    RETURN TMP[63:0]; // binary encoded FP with biased exponent and normalized significand
}

.fi
.RE

.SS VREDUCESD
.PP
.RS

.nf
IF k1[0] or *no writemask*
    THEN DEST[63:0]←ReduceArgumentDP(SRC2[63:0], imm8[7:0])
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[63:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[63:0] = 0
        FI;
FI;
DEST[127:64] ← SRC1[127:64]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VREDUCESD \_\_m128d \_mm\_mask\_reduce\_sd( \_\_m128d a, \_\_m128d b, int imm, int sae)

VREDUCESD \_\_m128d \_mm\_mask\_reduce\_sd(\_\_m128d s, \_\_mmask16 k, \_\_m128d a, \_\_m128d b, int imm, int sae)

VREDUCESD \_\_m128d \_mm\_maskz\_reduce\_sd(\_\_mmask16 k, \_\_m128d a, \_\_m128d b, int imm, int sae)

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
Invalid, Precision

.PP
If SPE is enabled, precision exception is not reported (regardless of
MXCSR exception mask).

.SS Other Exceptions
.PP
See Exceptions Type E3.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
