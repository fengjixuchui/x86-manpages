.nh
.TH "X86-MUL" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
MUL - UNSIGNED MULTIPLY
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
F6 /4	MUL r/m8	M	Valid	Valid	T{
Unsigned multiply (AX ← AL ∗ r/m8).
T}
REX + F6 /4	MUL r/m8*	M	Valid	N.E.	T{
Unsigned multiply (AX ← AL ∗ r/m8).
T}
F7 /4	MUL r/m16	M	Valid	Valid	T{
Unsigned multiply (DX:AX ← AX ∗ r/m16).
T}
F7 /4	MUL r/m32	M	Valid	Valid	T{
Unsigned multiply (EDX:EAX ← EAX ∗ r/m32).
T}
REX.W + F7 /4	MUL r/m64	M	Valid	N.E.	T{
Unsigned multiply (RDX:RAX ← RAX ∗ r/m64).
T}
.TE

.PP
.RS

.PP
*
In64\-bitmode,r/m8cannotbeencodedtoaccessthefollowingbyteregistersifaREXprefixisused:AH,BH,CH,DH.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
M	ModRM:r/m (r)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Performs an unsigned multiplication of the first operand (destination
operand) and the second operand (source operand) and stores the result
in the destination operand. The destination operand is an implied
operand located in register AL, AX or EAX (depending on the size of the
operand); the source operand is located in a general\-purpose register or
a memory location. The action of this instruction and the location of
the result depends on the opcode and the operand size as shown in Table
4\-9.

.PP
The result is stored in register AX, register pair DX:AX, or register
pair EDX:EAX (depending on the operand size), with the high\-order bits
of the product contained in register AH, DX, or EDX, respectively. If
the high\-order bits of the product are 0, the CF and OF flags are
cleared; otherwise, the flags are set.

.PP
In 64\-bit mode, the instruction’s default operation size is 32 bits. Use
of the REX.R prefix permits access to additional registers (R8\-R15). Use
of the REX.W prefix promotes operation to 64 bits.

.PP
See the summary chart at the beginning of this section for encoding data
and limits.

.TS
allbox;
l l l l 
l l l l .
\fB\fCOperand Size\fR	\fB\fCSource 1\fR	\fB\fCSource 2\fR	\fB\fCDestination\fR
Byte	AL	r/m8	AX
Word	AX	r/m16	DX:AX
Doubleword	EAX	r/m32	EDX:EAX
Quadword	RAX	r/m64	RDX:RAX
.TE

.PP
Table 4\-9. MUL Results

.SH OPERATION
.PP
.RS

.nf
IF (Byte operation)
    THEN
        AX ← AL ∗ SRC;
    ELSE (* Word or doubleword operation *)
        IF OperandSize = 16
            THEN
                DX:AX ← AX ∗ SRC;
            ELSE IF OperandSize = 32
                THEN EDX:EAX ← EAX ∗ SRC; FI;
            ELSE (* OperandSize = 64 *)
                RDX:RAX ← RAX ∗ SRC;
        FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
The OF and CF flags are set to 0 if the upper half of the result is 0;
otherwise, they are set to 1. The SF, ZF, AF, and PF flags are
undefined.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
