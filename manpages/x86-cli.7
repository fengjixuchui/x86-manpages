.nh
.TH "X86-CLI" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
CLI - CLEAR INTERRUPT FLAG
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
FA	CLI	ZO	Valid	Valid	T{
Clear interrupt flag; interrupts disabled when interrupt flag cleared.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
In most cases, CLI clears the IF flag in the EFLAGS register and no
other flags are affected. Clearing the IF flag causes the processor to
ignore maskable external interrupts. The IF flag and the CLI and STI
instruction have no effect on the generation of exceptions and NMI
interrupts.

.PP
Operation is different in two modes defined as follows:

.RS
.IP \(bu 2
PVI mode (protected\-mode virtual interrupts): CR0.PE = 1, EFLAGS.VM
= 0, CPL = 3, and CR4.PVI = 1;
.IP \(bu 2
VME mode (virtual\-8086 mode extensions): CR0.PE = 1, EFLAGS.VM = 1,
and CR4.VME = 1.

.RE

.PP
If IOPL \&lt; 3 and either VME mode or PVI mode is active, CLI clears the
VIF flag in the EFLAGS register, leaving IF unaffected.

.PP
Table 3\-7 indicates the action of the CLI instruction depending on the
processor operating mode, IOPL, and CPL.

.TS
allbox;
l l l 
l l l .
\fB\fCMode\fR	\fB\fCIOPL\fR	\fB\fCCLI Result\fR
Real\-address	X1	IF = 0
2	≥ CPL	IF = 0
	\&lt; CPL	
#
GP fault
3	3	IF = 0
	0–2	VIF = 0
3	3	IF = 0
	0–2	
#
GP fault
3	3	IF = 0
	0–2	VIF = 0
.TE

.PP
Table 3\-7. Decision Table for CLI Results

.PP
.RS

.PP
1\&. X = This setting has no effect on instruction operation.

.PP
2\&. For this table, “protected mode” applies whenever CR0.PE = 1 and
EFLAGS.VM = 0; it includes compatibility mode and 64\-bit mode.

.PP
3\&. PVI mode and virtual\-8086 mode each imply CPL = 3.

.RE

.SH OPERATION
.PP
.RS

.nf
IF CR0.PE = 0
    THEN IF ← 0; (* Reset Interrupt Flag *)
    ELSE
        IF IOPL ≥ CPL (* CPL = 3 if EFLAGS.VM = 1 *)
            THEN IF ← 0; (* Reset Interrupt Flag *)
            ELSE
                IF VME mode OR PVI mode
                    THEN VIF ← 0; (* Reset Virtual Interrupt Flag *)
                    ELSE #GP(0);
                FI;
        FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
Either the IF flag or the VIF flag is cleared to 0. Other flags are
unaffected.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If CPL is greater than IOPL and PVI mode is not active.
T}
	T{
If CPL is greater than IOPL and less than 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If IOPL is less than 3 and VME mode is not active.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
