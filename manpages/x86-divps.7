.nh
.TH "X86-DIVPS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
DIVPS - DIVIDE PACKED SINGLE-PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
NP 0F 5E /r DIVPS xmm1, xmm2/m128
T}
	A	V/V	SSE	T{
Divide packed single\-precision floating\-point values in xmm1 by packed single\-precision floating\-point values in xmm2/mem.
T}
T{
VEX.128.0F.WIG 5E /r VDIVPS xmm1, xmm2, xmm3/m128
T}
	B	V/V	AVX	T{
Divide packed single\-precision floating\-point values in xmm2 by packed single\-precision floating\-point values in xmm3/mem.
T}
T{
VEX.256.0F.WIG 5E /r VDIVPS ymm1, ymm2, ymm3/m256
T}
	B	V/V	AVX	T{
Divide packed single\-precision floating\-point values in ymm2 by packed single\-precision floating\-point values in ymm3/mem.
T}
T{
EVEX.128.0F.W0 5E /r VDIVPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
T}
	C	V/V	AVX512VL AVX512F	T{
Divide packed single\-precision floating\-point values in xmm2 by packed single\-precision floating\-point values in xmm3/m128/m32bcst and write results to xmm1 subject to writemask k1.
T}
T{
EVEX.256.0F.W0 5E /r VDIVPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
T}
	C	V/V	AVX512VL AVX512F	T{
Divide packed single\-precision floating\-point values in ymm2 by packed single\-precision floating\-point values in ymm3/m256/m32bcst and write results to ymm1 subject to writemask k1.
T}
T{
EVEX.512.0F.W0 5E /r VDIVPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}
T}
	C	V/V	AVX512F	T{
Divide packed single\-precision floating\-point values in zmm2 by packed single\-precision floating\-point values in zmm3/m512/m32bcst and write results to zmm1 subject to writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv	ModRM:r/m (r)	NA
C	Full	ModRM:reg (w)	EVEX.vvvv	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Performs a SIMD divide of the four, eight or sixteen packed
single\-precision floating\-point values in the first source operand (the
second operand) by the four, eight or sixteen packed single\-precision
floating\-point values in the second source operand (the third operand).
Results are written to the destination operand (the first operand).

.PP
EVEX encoded versions: The first source operand (the second operand) is
a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM
register, a 512/256/128\-bit memory location or a 512/256/128\-bit vector
broadcasted from a 32\-bit memory location. The destination operand is a
ZMM/YMM/XMM register conditionally updated with writemask k1.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256\-bit memory
location. The destination operand is a YMM register.

.PP
VEX.128 encoded version: The first source operand is a XMM register. The
second source operand can be a XMM register or a 128\-bit memory
location. The destination operand is a XMM register. The upper bits
(MAXVL\-1:128) of the corresponding ZMM register destination are zeroed.

.PP
128\-bit Legacy SSE version: The second source can be an XMM register or
an 128\-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL\-1:128) of the
corresponding ZMM register destination are unmodified.

.SH OPERATION
.SS VDIVPS (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (4, 128), (8, 256), (16, 512)
IF (VL = 512) AND (EVEX.b = 1) AND SRC2 *is a register*
    THEN
        SET\_RM(EVEX.RC);
    ELSE
        SET\_RM(MXCSR.RM);
FI;
FOR j←0 TO KL\-1
    i←j * 32
    IF k1[j] OR *no writemask*
        THEN
            IF (EVEX.b = 1) AND (SRC2 *is memory*)
                THEN
                    DEST[i+31:i]←SRC1[i+31:i] / SRC2[31:0]
                ELSE
                    DEST[i+31:i]←SRC1[i+31:i] / SRC2[i+31:i]
            FI;
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE ; zeroing\-masking
                    DEST[i+31:i] ← 0
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VDIVPS (VEX.256 encoded version)
.PP
.RS

.nf
DEST[31:0]←SRC1[31:0] / SRC2[31:0]
DEST[63:32]←SRC1[63:32] / SRC2[63:32]
DEST[95:64]←SRC1[95:64] / SRC2[95:64]
DEST[127:96]←SRC1[127:96] / SRC2[127:96]
DEST[159:128]←SRC1[159:128] / SRC2[159:128]
DEST[191:160]←SRC1[191:160] / SRC2[191:160]
DEST[223:192]←SRC1[223:192] / SRC2[223:192]
DEST[255:224]←SRC1[255:224] / SRC2[255:224].
DEST[MAXVL\-1:256] ←0;

.fi
.RE

.SS VDIVPS (VEX.128 encoded version)
.PP
.RS

.nf
DEST[31:0]←SRC1[31:0] / SRC2[31:0]
DEST[63:32]←SRC1[63:32] / SRC2[63:32]
DEST[95:64]←SRC1[95:64] / SRC2[95:64]
DEST[127:96]←SRC1[127:96] / SRC2[127:96]
DEST[MAXVL\-1:128] ←0

.fi
.RE

.SS DIVPS (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[31:0]←SRC1[31:0] / SRC2[31:0]
DEST[63:32]←SRC1[63:32] / SRC2[63:32]
DEST[95:64]←SRC1[95:64] / SRC2[95:64]
DEST[127:96]←SRC1[127:96] / SRC2[127:96]
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VDIVPS \_\_m512 \_mm512\_div\_ps( \_\_m512 a, \_\_m512 b);

VDIVPS \_\_m512 \_mm512\_mask\_div\_ps(\_\_m512 s, \_\_mmask16 k, \_\_m512 a, \_\_m512 b);

VDIVPS \_\_m512 \_mm512\_maskz\_div\_ps(\_\_mmask16 k, \_\_m512 a, \_\_m512 b);

VDIVPD \_\_m256d \_mm256\_mask\_div\_pd(\_\_m256d s, \_\_mmask8 k, \_\_m256d a, \_\_m256d b);

VDIVPD \_\_m256d \_mm256\_maskz\_div\_pd( \_\_mmask8 k, \_\_m256d a, \_\_m256d b);

VDIVPD \_\_m128d \_mm\_mask\_div\_pd(\_\_m128d s, \_\_mmask8 k, \_\_m128d a, \_\_m128d b);

VDIVPD \_\_m128d \_mm\_maskz\_div\_pd( \_\_mmask8 k, \_\_m128d a, \_\_m128d b);

VDIVPS \_\_m512 \_mm512\_div\_round\_ps( \_\_m512 a, \_\_m512 b, int);

VDIVPS \_\_m512 \_mm512\_mask\_div\_round\_ps(\_\_m512 s, \_\_mmask16 k, \_\_m512 a, \_\_m512 b, int);

VDIVPS \_\_m512 \_mm512\_maskz\_div\_round\_ps(\_\_mmask16 k, \_\_m512 a, \_\_m512 b, int);

VDIVPS \_\_m256 \_mm256\_div\_ps (\_\_m256 a, \_\_m256 b);

DIVPS \_\_m128 \_mm\_div\_ps (\_\_m128 a, \_\_m128 b);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
Overflow, Underflow, Invalid, Divide\-by\-Zero, Precision, Denormal

.SH OTHER EXCEPTIONS
.PP
VEX\-encoded instructions, see Exceptions Type 2.

.PP
EVEX\-encoded instructions, see Exceptions Type E2.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
