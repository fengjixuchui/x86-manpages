.nh
.TH "X86-CMPXCHG8B-CMPXCHG16B" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
CMPXCHG8B-CMPXCHG16B - COMPARE AND EXCHANGE BYTES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
0F C7 /1 CMPXCHG8B m64	M	Valid	Valid*	T{
Compare EDX:EAX with m64 into EDX:EAX.
T}
T{
REX.W + 0F C7 /1 CMPXCHG16B m128
T}
	M	Valid	N.E.	T{
Compare RDX:RAX with m128 into RDX:RAX.
T}
.TE

.PP
.RS

.PP
*See IA\-32 Architecture Compatibility section below.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
M	ModRM:r/m (r, w)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Compares the 64\-bit value in EDX:EAX (or 128\-bit value in RDX:RAX if
operand size is 128 bits) with the operand (destination operand). If the
values are equal, the 64\-bit value in ECX:EBX (or 128\-bit value in
RCX:RBX) is stored in the destination operand. Otherwise, the value in
the destination operand is loaded into EDX:EAX (or RDX:RAX). The
destination operand is an 8\-byte memory location (or 16\-byte memory
location if operand size is 128 bits). For the EDX:EAX and ECX:EBX
register pairs, EDX and ECX contain the high\-order 32 bits and EAX and
EBX contain the low\-order 32 bits of a 64\-bit value. For the RDX:RAX and
RCX:RBX register pairs, RDX and RCX contain the high\-order 64 bits and
RAX and RBX contain the low\-order 64bits of a 128\-bit value.

.PP
This instruction can be used with a LOCK prefix to allow the instruction
to be executed atomically. To simplify the interface to the processor’s
bus, the destination operand receives a write cycle without regard to
the result of the comparison. The destination operand is written back if
the comparison fails; otherwise, the source operand is written into the
destination. (The processor never produces a locked read without also
producing a locked write.)

.PP
In 64\-bit mode, default operation size is 64 bits. Use of the REX.W
prefix promotes operation to 128 bits. Note that CMPXCHG16B requires
that the destination (memory) operand be 16\-byte aligned. See the
summary chart at the beginning of this section for encoding data and
limits. For information on the CPUID flag that indicates CMPXCHG16B, see
page 3\-213.

.SH IA\-32 ARCHITECTURE COMPATIBILITY
.PP
This instruction encoding is not supported on Intel processors earlier
than the Pentium processors.

.SH OPERATION
.PP
.RS

.nf
IF (64\-Bit Mode and OperandSize = 64)
    THEN
        TEMP128 ← DEST
        IF (RDX:RAX = TEMP128)
            THEN
                ZF ← 1;
                DEST ← RCX:RBX;
            ELSE
                ZF ← 0;
                RDX:RAX ← TEMP128;
                DEST ← TEMP128;
                FI;
        FI
    ELSE
        TEMP64 ← DEST;
        IF (EDX:EAX = TEMP64)
            THEN
                ZF ← 1;
                DEST ← ECX:EBX;
            ELSE
                ZF ← 0;
                EDX:EAX ← TEMP64;
                DEST ← TEMP64;
                FI;
        FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
The ZF flag is set if the destination operand and EDX:EAX are equal;
otherwise it is cleared. The CF, PF, AF, SF, and OF flags are
unaffected.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
If the destination is not a memory operand.
T}
#GP(0)	T{
If the destination is located in a non\-writable segment.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
If the destination operand is not a memory location.
T}
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
If the destination operand is not a memory location.
T}
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
	T{
If memory operand for CMPXCHG16B is not aligned on a 16\-byte boundary.
T}
	If CPUID.01H:ECX.CMPXCHG16B
[
bit 13
]
 = 0.
#UD	T{
If the destination operand is not a memory location.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
