.nh
.TH "X86-VRSQRT14PD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VRSQRT14PD - COMPUTE APPROXIMATE RECIPROCALS OF SQUARE ROOTS OF PACKED FLOAT64 VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.128.66.0F38.W1 4E /r VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst
T}
	A	V/V	AVX512VL AVX512F	T{
Computes the approximate reciprocal square roots of the packed double\-precision floating\-point values in xmm2/m128/m64bcst and stores the results in xmm1. Under writemask.
T}
T{
EVEX.256.66.0F38.W1 4E /r VRSQRT14PD ymm1 {k1}{z}, ymm2/m256/m64bcst
T}
	A	V/V	AVX512VL AVX512F	T{
Computes the approximate reciprocal square roots of the packed double\-precision floating\-point values in ymm2/m256/m64bcst and stores the results in ymm1. Under writemask.
T}
T{
EVEX.512.66.0F38.W1 4E /r VRSQRT14PD zmm1 {k1}{z}, zmm2/m512/m64bcst
T}
	A	V/V	AVX512F	T{
Computes the approximate reciprocal square roots of the packed double\-precision floating\-point values in zmm2/m512/m64bcst and stores the results in zmm1 under writemask.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Full	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SS Description
.PP
This instruction performs a SIMD computation of the approximate
reciprocals of the square roots of the eight packed double\-precision
floating\-point values in the source operand (the second operand) and
stores the packed double\-precision floating\-point results in the
destination operand (the first operand) according to the writemask. The
maximum relative error for this approximation is less than 2\-14.

.PP
EVEX.512 encoded version: The source operand can be a ZMM register, a
512\-bit memory location, or a 512\-bit vector broadcasted from a 64\-bit
memory location. The destination operand is a ZMM register,
conditionally updated using writemask k1.

.PP
EVEX.256 encoded version: The source operand is a YMM register, a
256\-bit memory location, or a 256\-bit vector broadcasted from a 64\-bit
memory location. The destination operand is a YMM register,
conditionally updated using writemask k1.

.PP
EVEX.128 encoded version: The source operand is a XMM register, a
128\-bit memory location, or a 128\-bit vector broadcasted from a 64\-bit
memory location. The destination operand is a XMM register,
conditionally updated using writemask k1.

.PP
The VRSQRT14PD instruction is not affected by the rounding control bits
in the MXCSR register. When a source value is a 0.0, an ∞ with the sign
of the source value is returned. When the source operand is an +∞ then
+ZERO value is returned. A denormal source value is treated as zero only
if DAZ bit is set in MXCSR. Otherwise it is treated correctly and
performs the approximation with the specified masked response. When a
source value is a negative value (other than 0.0) a floating\-point
QNaN\_indefinite is returned. When a source value is an SNaN or QNaN,
the SNaN is converted to a QNaN or the source QNaN is returned.

.PP
MXCSR exception flags are not affected by this instruction and
floating\-point exceptions are not reported.

.PP
Note: EVEX.vvvv is reserved and must be 1111b, otherwise instructions
will #UD.

.SS A numerically exact implementation of VRSQRT14xx can be found at https://software.intel.com/en\-us/arti\-
.SS cles/reference\-implementations\-for\-IA\-approximation\-instructions\-vrcp14\-vrsqrt14\-vrcp28\-vrsqrt28\-vexp2.
.SS Operation
.SS VRSQRT14PD (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL\-1
    i←j * 64
    IF k1[j] OR *no writemask* THEN
            IF (EVEX.b = 1) AND (SRC *is memory*)
                THEN DEST[i+63:i]←APPROXIMATE(1.0/ SQRT(SRC[63:0]));
                ELSE DEST[i+63:i]←APPROXIMATE(1.0/ SQRT(SRC[i+63:i]));
            FI;
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[i+63:i] remains unchanged*
            ELSE
                    ; zeroing\-masking
                DEST[i+63:i] ← 0
        FI;
    FI;
ENDFOR;
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.TS
allbox;
l l l 
l l l .
\fB\fCInput value\fR	\fB\fCResult value\fR	\fB\fCComments\fR
Any denormal	Normal	Cannot generate overflow
X = 2\-2n	2n	X\&lt;0	QNaN\_Indefinite	Including \-INF
X = \-0	\-INF	X = +0	+INF	X = +INF	+0	.TE

.PP
Table 5\-26. VRSQRT14PD Special Cases

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VRSQRT14PD \_\_m512d \_mm512\_rsqrt14\_pd( \_\_m512d a);

VRSQRT14PD \_\_m512d \_mm512\_mask\_rsqrt14\_pd(\_\_m512d s, \_\_mmask8 k, \_\_m512d a);

VRSQRT14PD \_\_m512d \_mm512\_maskz\_rsqrt14\_pd( \_\_mmask8 k, \_\_m512d a);

VRSQRT14PD \_\_m256d \_mm256\_rsqrt14\_pd( \_\_m256d a);

VRSQRT14PD \_\_m256d \_mm512\_mask\_rsqrt14\_pd(\_\_m256d s, \_\_mmask8 k, \_\_m256d a);

VRSQRT14PD \_\_m256d \_mm512\_maskz\_rsqrt14\_pd( \_\_mmask8 k, \_\_m256d a);

VRSQRT14PD \_\_m128d \_mm\_rsqrt14\_pd( \_\_m128d a);

VRSQRT14PD \_\_m128d \_mm\_mask\_rsqrt14\_pd(\_\_m128d s, \_\_mmask8 k, \_\_m128d a);

VRSQRT14PD \_\_m128d \_mm\_maskz\_rsqrt14\_pd( \_\_mmask8 k, \_\_m128d a);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
See Exceptions Type E4.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
