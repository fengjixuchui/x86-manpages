.nh
.TH "X86-ENTER" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ENTER - MAKE STACK FRAME FOR PROCEDURE PARAMETERS
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
C8 iw 00	ENTER imm16, 0	II	Valid	Valid	T{
Create a stack frame for a procedure.
T}
C8 iw 01	ENTER imm16,1	II	Valid	Valid	T{
Create a stack frame with a nested pointer for a procedure.
T}
C8 iw ib	ENTER imm16, imm8	II	Valid	Valid	T{
Create a stack frame with nested pointers for a procedure.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
II	iw	imm8	NA	NA
.TE

.SH DESCRIPTION
.PP
Creates a stack frame (comprising of space for dynamic storage and 1\-32
frame pointer storage) for a procedure. The first operand (imm16)
specifies the size of the dynamic storage in the stack frame (that is,
the number of bytes of dynamically allocated on the stack for the
procedure). The second operand (imm8) gives the lexical nesting level (0
to 31) of the procedure. The nesting level (imm8 mod 32) and the
OperandSize attribute determine the size in bytes of the storage space
for frame pointers.

.PP
The nesting level determines the number of frame pointers that are
copied into the “display area” of the new stack frame from the preceding
frame. The default size of the frame pointer is the StackAddrSize
attribute, but can be overridden using the 66H prefix. Thus, the
OperandSize attribute determines the size of each frame pointer that
will be copied into the stack frame and the data being transferred from
SP/ESP/RSP register into the BP/EBP/RBP register.

.PP
The ENTER and companion LEAVE instructions are provided to support block
structured languages. The ENTER instruction (when used) is typically the
first instruction in a procedure and is used to set up a new stack frame
for a procedure. The LEAVE instruction is then used at the end of the
procedure (just before the RET instruction) to release the stack frame.

.PP
If the nesting level is 0, the processor pushes the frame pointer from
the BP/EBP/RBP register onto the stack, copies the current stack pointer
from the SP/ESP/RSP register into the BP/EBP/RBP register, and loads the
SP/ESP/RSP register with the current stack\-pointer value minus the value
in the size operand. For nesting levels of 1 or greater, the processor
pushes additional frame pointers on the stack before adjusting the stack
pointer. These additional frame pointers provide the called procedure
with access points to other nested frames on the stack. See “Procedure
Calls for Block\-Structured Languages” in Chapter 6 of the Intel® 64 and
IA\-32 Architectures Software Developer’s Manual, Volume 1, for more
information about the actions of the ENTER instruction.

.PP
The ENTER instruction causes a page fault whenever a write using the
final value of the stack pointer (within the current stack segment)
would do so.

.PP
In 64\-bit mode, default operation size is 64 bits; 32\-bit operation size
cannot be encoded. Use of 66H prefix changes frame pointer operand size
to 16 bits.

.PP
When the 66H prefix is used and causing the OperandSize attribute to be
less than the StackAddrSize, software is responsible for the following:

.RS
.IP \(bu 2
The companion LEAVE instruction must also use the 66H prefix,
.IP \(bu 2
The value in the RBP/EBP register prior to executing “66H ENTER”
must be within the same 16KByte region of the current stack pointer
(RSP/ESP), such that the value of RBP/EBP after “66H ENTER” remains
a valid address in the stack. This ensures “66H LEAVE” can restore
16\-bits of data from the stack.

.RE

.SH OPERATION
.PP
.RS

.nf
AllocSize ← imm16;
NestingLevel ← imm8 MOD 32;
IF (OperandSize = 64)
    THEN
        Push(RBP); (* RSP decrements by 8 *)
        FrameTemp ← RSP;
    ELSE IF OperandSize = 32
        THEN
            Push(EBP); (* (E)SP decrements by 4 *)
            FrameTemp ← ESP; FI;
    ELSE (* OperandSize = 16 *)
            Push(BP); (* RSP or (E)SP decrements by 2 *)
            FrameTemp ← SP;
FI;
IF NestingLevel = 0
    THEN GOTO CONTINUE;
FI;
IF (NestingLevel > 1)
    THEN FOR i ← 1 to (NestingLevel \- 1)
        DO
            IF (OperandSize = 64)
                THEN
                    RBP ← RBP \- 8;
                    Push([RBP]); (* Quadword push *)
                ELSE IF OperandSize = 32
                    THEN
                        IF StackSize = 32
                            EBP ← EBP \- 4;
                            Push([EBP]); (* Doubleword push *)
                        ELSE (* StackSize = 16 *)
                            BP ← BP \- 4;
                            Push([BP]); (* Doubleword push *)
                        FI;
                    FI;
                ELSE (* OperandSize = 16 *)
                    IF StackSize = 32
                        THEN
                            EBP ← EBP \- 2;
                            Push([EBP]); (* Word push *)
                        ELSE (* StackSize = 16 *)
                            BP ← BP \- 2;
                            Push([BP]); (* Word push *)
                    FI;
                FI;
    OD;
FI;
IF (OperandSize = 64) (* nestinglevel 1 *)
    THEN
        Push(FrameTemp); (* Quadword push and RSP decrements by 8 *)
    ELSE IF OperandSize = 32
        THEN
            Push(FrameTemp); FI; (* Doubleword push and (E)SP decrements by 4 *)
    ELSE (* OperandSize = 16 *)
            Push(FrameTemp); (* Word push and RSP|ESP|SP decrements by 2 *)
FI;
CONTINUE:
IF 64\-Bit Mode (StackSize = 64)
    THEN
            RBP ← FrameTemp;
            RSP ← RSP − AllocSize;
    ELSE IF OperandSize = 32
        THEN
            EBP ← FrameTemp;
            ESP ← ESP − AllocSize; FI;
    ELSE (* OperandSize = 16 *)
            BP ← FrameTemp[15:1]; (* Bits 16 and above of applicable RBP/EBP are unmodified *)
            SP ← SP − AllocSize;
FI;
END;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If the new value of the SP or ESP register is outside the stack segment limit.
T}
#PF(fault\-code)	T{
If a page fault occurs or if a write using the final value of the stack pointer (within the current stack segment) would cause a page fault.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS	T{
If the new value of the SP or ESP register is outside the stack segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If the new value of the SP or ESP register is outside the stack segment limit.
T}
#PF(fault\-code)	T{
If a page fault occurs or if a write using the final value of the stack pointer (within the current stack segment) would cause a page fault.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If the stack address is in a non\-canonical form.
T}
#PF(fault\-code)	T{
If a page fault occurs or if a write using the final value of the stack pointer (within the current stack segment) would cause a page fault.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
