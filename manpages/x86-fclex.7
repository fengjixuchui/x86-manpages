.nh
.TH "X86-FCLEX-FNCLEX" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FCLEX-FNCLEX - CLEAR EXCEPTIONS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode*\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
9B DB E2	FCLEX	Valid	Valid	T{
Clear floating\-point exception flags after checking for pending unmasked floating\-point exceptions.
T}
DB E2	FNCLEX*	Valid	Valid	T{
Clear floating\-point exception flags without checking for pending unmasked floating\-point exceptions.
T}
.TE

.PP
.RS

.PP
* SeeIA\-32ArchitectureCompatibilitysectionbelow.

.RE

.SH DESCRIPTION
.PP
Clears the floating\-point exception flags (PE, UE, OE, ZE, DE, and IE),
the exception summary status flag (ES), the stack fault flag (SF), and
the busy flag (B) in the FPU status word. The FCLEX instruction checks
for and handles any pending unmasked floating\-point exceptions before
clearing the exception flags; the FNCLEX instruction does not.

.PP
The assembler issues two instructions for the FCLEX instruction (an
FWAIT instruction followed by an FNCLEX instruction), and the processor
executes each of these instructions separately. If an exception is
generated for either of these instructions, the save EIP points to the
instruction that caused the exception.

.SH IA\-32 ARCHITECTURE COMPATIBILITY
.PP
When operating a Pentium or Intel486 processor in MS\-DOS* compatibility
mode, it is possible (under unusual circumstances) for an FNCLEX
instruction to be interrupted prior to being executed to handle a
pending FPU exception. See the section titled “No\-Wait FPU Instructions
Can Get FPU Interrupt in Window” in Appendix D of the Intel® 64 and
IA\-32 Architectures Software Developer’s Manual, Volume 1, for a
description of these circumstances. An FNCLEX instruction cannot be
interrupted in this way on later Intel processors, except for the Intel
QuarkTM X1000 processor.

.PP
This instruction affects only the x87 FPU floating\-point exception
flags. It does not affect the SIMD floating\-point exception flags in the
MXCRS register.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
FPUStatusWord[0:7] ← 0;
FPUStatusWord[15] ← 0;

.fi
.RE

.SH FPU FLAGS AFFECTED
.PP
The PE, UE, OE, ZE, DE, IE, ES, SF, and B flags in the FPU status word
are cleared. The C0, C1, C2, and C3 flags are undefined.

.SH FLOATING\-POINT EXCEPTIONS
.PP
None

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
