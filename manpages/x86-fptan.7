.nh
.TH "X86-FPTAN" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FPTAN - PARTIAL TANGENT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
D9 F2	FPTAN	Valid	Valid	T{
Replace ST(0) with its approximate tangent and push 1 onto the FPU stack.
T}
.TE

.SH DESCRIPTION
.PP
Computes the approximate tangent of the source operand in register
ST(0), stores the result in ST(0), and pushes a 1.0 onto the FPU
register stack. The source operand must be given in radians and must be
less than ±263. The following table shows the unmasked results obtained
when computing the partial tangent of various classes of numbers,
assuming that underflow does not occur.

.TS
allbox;
l l 
l l .
\fB\fCST(0) SRC\fR	\fB\fCST(0) DEST\fR
−∞	
*
−F	− F to + F
−0	\-0
+0	+0
+F	− F to + F
+∞	
*
NaN	NaN
.TE

.PP
Table 3\-33. FPTAN Results

.PP
.RS

.PP
F Means finite floating\-point value.

.PP
* Indicatesfloating\-pointinvalid\-arithmetic\-operand(#IA)exception.

.RE

.PP
If the source operand is outside the acceptable range, the C2 flag in
the FPU status word is set, and the value in register ST(0) remains
unchanged. The instruction does not raise an exception when the source
operand is out of range. It is up to the program to check the C2 flag
for out\-of\-range conditions. Source values outside the range − 263,
inaccurate results can occur because the finite approximation of π used
internally for argument reduction is not sufficient in all cases.
Therefore, for accurate results it is safe to apply FPTAN only to
arguments reduced accurately in software, to a value smaller in absolute
value than 3π/8. See the sections titled “Approximation of Pi” and
“Transcendental Instruction Accuracy” in Chapter 8 of the Intel® 64 and
IA\-32 Architectures Software Developer’s Manual, Volume 1, for a
discussion of the proper value to use for π in performing such
reductions.

.PP
The value 1.0 is pushed onto the register stack after the tangent has
been computed to maintain compatibility with the Intel 8087 and Intel287
math coprocessors. This operation also simplifies the calculation of
other trigonometric functions. For instance, the cotangent (which is the
reciprocal of the tangent) can be computed by executing a FDIVR
instruction after the FPTAN instruction.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
IF ST(0) < 263
    THEN
        C2 ← 0;
        ST(0) ← fptan(ST(0)); // approximation of tan
        TOP ← TOP − 1;
        ST(0) ← 1.0;
    ELSE (* Source operand is out\-of\-range *)
        C2 ← 1;
FI;

.fi
.RE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
C1	T{
Set to 0 if stack underflow occurred; set to 1 if stack overflow occurred.
T}
	T{
Set if result was rounded up; cleared otherwise.
T}
	T{
Set to 1 if outside range (−263 
T}
\&lt;
 source operand 
\&lt;
 +263); otherwise, set to 0.
C2	C0, C3	Undefined.
.TE

.SH FLOATING\-POINT EXCEPTIONS
.TS
allbox;
l l 
l l .
#IS	T{
Stack underflow or overflow occurred.
T}
#IA	T{
Source operand is an SNaN value, ∞, or unsupported format.
T}
#D	T{
Source operand is a denormal value.
T}
#U	T{
Result is too small for destination format.
T}
#P	T{
Value cannot be represented exactly in destination format.
T}
.TE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
