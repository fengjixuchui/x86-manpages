.nh
.TH "X86-BLENDPD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
BLENDPD - BLEND PACKED DOUBLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32\-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
66 0F 3A 0D /r ib BLENDPD xmm2/m128, imm8
T}
	RMI	V/V	SSE4\_1	T{
Select packed DP\-FP values from xmm1.
T}
T{
VEX.128.66.0F3A.WIG 0D /r ib VBLENDPD xmm1, xmm2, xmm3/m128, imm8
T}
	RVMI	V/V	AVX	T{
Select packed double\-precision floating\-point Values from xmm2 and xmm3/m128 from mask in imm8 and store the values in xmm1.
T}
T{
VEX.256.66.0F3A.WIG 0D /r ib VBLENDPD ymm1, ymm2, ymm3/m256, imm8
T}
	RVMI	V/V	AVX	T{
Select packed double\-precision floating\-point Values from ymm2 and ymm3/m256 from mask in imm8 and store the values in ymm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RMI	ModRM:reg (r, w)	ModRM:r/m (r)	imm8	NA
RVMI	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	imm8
[
3:0
]
.TE

.SH DESCRIPTION
.PP
Double\-precision floating\-point values from the second source operand
(third operand) are conditionally merged with values from the first
source operand (second operand) and written to the destination operand
(first operand). The immediate bits [3:0] determine whether the
corresponding double\-precision floating\-point value in the destination
is copied from the second source or first source. If a bit in the mask,
corresponding to a word, is ”1”, then the double\-precision
floating\-point value in the second source operand is copied, else the
value in the first source operand is copied.

.PP
128\-bit Legacy SSE version: The second source can be an XMM register or
an 128\-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL\-1:128) of the
corresponding YMM register destination are unmodified.

.PP
VEX.128 encoded version: the first source operand is an XMM register.
The second source operand is an XMM register or 128\-bit memory location.
The destination operand is an XMM register. The upper bits (MAXVL\-1:128)
of the corresponding YMM register destination are zeroed.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256\-bit memory
location. The destination operand is a YMM register.

.SH OPERATION
.SS BLENDPD (128\-bit Legacy SSE version)
.PP
.RS

.nf
IF (IMM8[0] = 0)THEN DEST[63:0]←DEST[63:0]
    ELSE DEST [63:0]←SRC[63:0] FI
IF (IMM8[1] = 0) THEN DEST[127:64]←DEST[127:64]
    ELSE DEST [127:64]←SRC[127:64] FI
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS VBLENDPD (VEX.128 encoded version)
.PP
.RS

.nf
IF (IMM8[0] = 0)THEN DEST[63:0]←SRC1[63:0]
    ELSE DEST [63:0]←SRC2[63:0] FI
IF (IMM8[1] = 0) THEN DEST[127:64]←SRC1[127:64]
    ELSE DEST [127:64]←SRC2[127:64] FI
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VBLENDPD (VEX.256 encoded version)
.PP
.RS

.nf
IF (IMM8[0] = 0)THEN DEST[63:0]←SRC1[63:0]
    ELSE DEST [63:0]←SRC2[63:0] FI
IF (IMM8[1] = 0) THEN DEST[127:64]←SRC1[127:64]
    ELSE DEST [127:64]←SRC2[127:64] FI
IF (IMM8[2] = 0) THEN DEST[191:128]←SRC1[191:128]
    ELSE DEST [191:128]←SRC2[191:128] FI
IF (IMM8[3] = 0) THEN DEST[255:192]←SRC1[255:192]
    ELSE DEST [255:192]←SRC2[255:192] FI

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
BLENDPD: \_\_m128d \_mm\_blend\_pd (\_\_m128d v1, \_\_m128d v2, const int mask);

VBLENDPD: \_\_m256d \_mm256\_blend\_pd (\_\_m256d a, \_\_m256d b, const int mask);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 4.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
