.nh
.TH "X86-KADDW-KADDB-KADDQ-KADDD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
KADDW-KADDB-KADDQ-KADDD - ADD TWO MASKS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.L1.0F.W0 4A /r KADDW k1, k2, k3
T}
	RVR	V/V	AVX512DQ	T{
Add 16 bits masks in k2 and k3 and place result in k1.
T}
T{
VEX.L1.66.0F.W0 4A /r KADDB k1, k2, k3
T}
	RVR	V/V	AVX512DQ	T{
Add 8 bits masks in k2 and k3 and place result in k1.
T}
T{
VEX.L1.0F.W1 4A /r KADDQ k1, k2, k3
T}
	RVR	V/V	AVX512BW	T{
Add 64 bits masks in k2 and k3 and place result in k1.
T}
T{
VEX.L1.66.0F.W1 4A /r KADDD k1, k2, k3
T}
	RVR	V/V	AVX512BW	T{
Add 32 bits masks in k2 and k3 and place result in k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
Op/En	Operand 1	Operand 2	Operand 3
RVR	ModRM:reg (w)	VEX.1vvv (r)	ModRM:r/m (r, ModRM:
[
7:6
]
 must be 11b)
.TE

.SH DESCRIPTION
.PP
Adds the vector mask k2 and the vector mask k3, and writes the result
into vector mask k1.

.SH OPERATION
.SS KADDW
.PP
.RS

.nf
DEST[15:0]←SRC1[15:0] + SRC2[15:0]
DEST[MAX\_KL\-1:16] ← 0

.fi
.RE

.SS KADDB
.PP
.RS

.nf
DEST[7:0]←SRC1[7:0] + SRC2[7:0]
DEST[MAX\_KL\-1:8] ← 0

.fi
.RE

.SS KADDQ
.PP
.RS

.nf
DEST[63:0]←SRC1[63:0] + SRC2[63:0]
DEST[MAX\_KL\-1:64] ← 0

.fi
.RE

.SS KADDD
.PP
.RS

.nf
DEST[31:0]←SRC1[31:0] + SRC2[31:0]
DEST[MAX\_KL\-1:32] ← 0

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type K20.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
