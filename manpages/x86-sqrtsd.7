.nh
.TH "X86-SQRTSD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
SQRTSD - COMPUTE SQUARE ROOT OF SCALAR DOUBLE-PRECISION FLOATING-POINT VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp / En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
F2 0F 51/r SQRTSD xmm1,xmm2/m64
T}
	A	V/V	SSE2	T{
Computes square root of the low double\-precision floating\-point value in xmm2/m64 and stores the results in xmm1.
T}
T{
VEX.LIG.F2.0F.WIG 51/r VSQRTSD xmm1,xmm2, xmm3/m64
T}
	B	V/V	AVX	T{
Computes square root of the low double\-precision floating\-point value in xmm3/m64 and stores the results in xmm1. Also, upper double\-precision floating\-point value (bits
T}
[
127:64
]
) from xmm2 is copied to xmm1
[
127:64
]
\&.
T{
EVEX.LIG.F2.0F.W1 51/r VSQRTSD xmm1 {k1}{z}, xmm2, xmm3/m64{er}
T}
	C	V/V	AVX512F	T{
Computes square root of the low double\-precision floating\-point value in xmm3/m64 and stores the results in xmm1 under writemask k1. Also, upper double\-precision floating\-point value (bits
T}
[
127:64
]
) from xmm2 is copied to xmm1
[
127:64
]
\&.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
C	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
Computes the square root of the low double\-precision floating\-point
value in the second source operand and stores the double\-precision
floating\-point result in the destination operand. The second source
operand can be an XMM register or a 64\-bit memory location. The first
source and destination operands are XMM registers.

.PP
128\-bit Legacy SSE version: The first source operand and the destination
operand are the same. The quadword at bits 127:64 of the destination
operand remains unchanged. Bits (MAXVL\-1:64) of the corresponding
destination register remain unchanged.

.PP
VEX.128 and EVEX encoded versions: Bits 127:64 of the destination
operand are copied from the corresponding bits of the first source
operand. Bits (MAXVL\-1:128) of the destination register are zeroed.

.PP
EVEX encoded version: The low quadword element of the destination
operand is updated according to the writemask.

.PP
Software should ensure VSQRTSD is encoded with VEX.L=0. Encoding VSQRTSD
with VEX.L=1 may encounter unpredictable behavior across different
processor generations.

.SS Operation
.SS VSQRTSD (EVEX encoded version)
.PP
.RS

.nf
IF (EVEX.b = 1) AND (SRC2 *is register*)
    THEN
        SET\_RM(EVEX.RC);
    ELSE
        SET\_RM(MXCSR.RM);
FI;
IF k1[0] or *no writemask*
    THEN DEST[63:0] ← SQRT(SRC2[63:0])
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[63:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[63:0]←0
        FI;
FI;
DEST[127:64] ← SRC1[127:64]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VSQRTSD (VEX.128 encoded version)
.PP
.RS

.nf
DEST[63:0] ←SQRT(SRC2[63:0])
DEST[127:64] ←SRC1[127:64]
DEST[MAXVL\-1:128] ←0

.fi
.RE

.SS SQRTSD (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[63:0] ←SQRT(SRC[63:0])
DEST[MAXVL\-1:64] (Unmodified)

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VSQRTSD \_\_m128d \_mm\_sqrt\_round\_sd(\_\_m128d a, \_\_m128d b, int r);

VSQRTSD \_\_m128d \_mm\_mask\_sqrt\_round\_sd(\_\_m128d s, \_\_mmask8 k, \_\_m128d a, \_\_m128d b, int r);

VSQRTSD \_\_m128d \_mm\_maskz\_sqrt\_round\_sd(\_\_mmask8 k, \_\_m128d a, \_\_m128d b, int r);

SQRTSD \_\_m128d \_mm\_sqrt\_sd (\_\_m128d a, \_\_m128d b)

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
Invalid, Precision, Denormal

.SS Other Exceptions
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 3.

.PP
EVEX\-encoded instruction, see Exceptions Type E3.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
