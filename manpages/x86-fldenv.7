.nh
.TH "X86-FLDENV" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FLDENV - LOAD X87 FPU ENVIRONMENT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
D9 /4	FLDENV m14/28byte	Valid	Valid	T{
Load FPU environment from m28byte.
T}
.TE

.SH DESCRIPTION
.PP
Loads the complete x87 FPU operating environment from memory into the
FPU registers. The source operand specifies the first byte of the
operating\-environment data in memory. This data is typically written to
the specified memory location by a FSTENV or FNSTENV instruction.

.PP
The FPU operating environment consists of the FPU control word, status
word, tag word, instruction pointer, data pointer, and last opcode.
Figures 8\-9 through 8\-12 in the Intel® 64 and IA\-32 Architectures
Software Developer’s Manual, Volume 1, show the layout in memory of the
loaded environment, depending on the operating mode of the processor
(protected or real) and the current operand\-size attribute (16\-bit or
32\-bit). In virtual\-8086 mode, the real mode layouts are used.

.PP
The FLDENV instruction should be executed in the same operating mode as
the corresponding FSTENV/FNSTENV instruction.

.PP
If one or more unmasked exception flags are set in the new FPU status
word, a floating\-point exception will be generated upon execution of the
next floating\-point instruction (except for the no\-wait floating\-point
instructions, see the section titled “Software Exception Handling” in
Chapter 8 of the Intel® 64 and IA\-32 Architectures Software Developer’s
Manual, Volume 1). To avoid generating exceptions when loading a new
environment, clear all the exception flags in the FPU status word that
is being loaded.

.PP
If a page or limit fault occurs during the execution of this
instruction, the state of the x87 FPU registers as seen by the fault
handler may be different than the state being loaded from memory. In
such situations, the fault handler should ignore the status of the x87
FPU registers, handle the fault, and return. The FLDENV instruction will
then complete the loading of the x87 FPU registers with no resulting
context inconsistency.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
FPUControlWord ← SRC[FPUControlWord];
FPUStatusWord ← SRC[FPUStatusWord];
FPUTagWord ← SRC[FPUTagWord];
FPUDataPointer ← SRC[FPUDataPointer];
FPUInstructionPointer ← SRC[FPUInstructionPointer];
FPULastInstructionOpcode ← SRC[FPULastInstructionOpcode];

.fi
.RE

.SH FPU FLAGS AFFECTED
.PP
The C0, C1, C2, C3 flags are loaded.

.SH FLOATING\-POINT EXCEPTIONS
.PP
None; however, if an unmasked exception is loaded in the status word, it
is generated upon execution of the next “waiting” floating\-point
instruction.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
