.nh
.TH "X86-VZEROUPPER" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VZEROUPPER - ZERO UPPER BITS OF YMM REGISTERS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
VEX.128.0F.WIG 77 VZEROUPPER	ZO	V/V	AVX	T{
Zero upper 128 bits of all YMM registers.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
The instruction zeros the bits in position 128 and higher of all YMM
registers. The lower 128\-bits of the registers (the corresponding XMM
registers) are unmodified.

.PP
This instruction is recommended when transitioning between AVX and
legacy SSE code \- it will eliminate performance penalties caused by
false dependencies.

.PP
Note: VEX.vvvv is reserved and must be 1111b otherwise instructions will
#UD. In Compatibility and legacy 32\-bit mode only the lower 8 registers
are modified.

.SH OPERATION
.PP
.RS

.nf
simd\_reg\_file[][] is a two dimensional array representing the SIMD register file containing all the overlapping xmm, ymm and zmm
registers present in that implementation. The major dimension is the register number: 0 for xmm0, ymm0 and zmm0; 1 for xmm1,
ymm1, and zmm1; etc. The minor dimension size is the width of the implemented SIMD state measured in bits. On a machine
supporting Intel AVX\-512, the width is 512. On a machine supporting Intel AVX but not Intel AVX\-512, the width is “MAXVL”.

.fi
.RE

.SS VZEROUPPER
.PP
.RS

.nf
IF (64\-bit mode)
    limit ←15
ELSE
    limit ← 7
FOR i in 0 .. limit:
    simd\_reg\_file[i][MAXVL\-1:128] ← 0

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VZEROUPPER: \_mm256\_zeroupper()

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None.

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 8.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
