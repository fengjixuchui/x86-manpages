.nh
.TH "X86-ANDNPS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ANDNPS - BITWISE LOGICAL AND NOT OF PACKED SINGLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp / En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
NP 0F 55 /r ANDNPS xmm1, xmm2/m128
T}
	A	V/V	SSE	T{
Return the bitwise logical AND NOT of packed single\-precision floating\-point values in xmm1 and xmm2/mem.
T}
T{
VEX.128.0F 55 /r VANDNPS xmm1, xmm2, xmm3/m128
T}
	B	V/V	AVX	T{
Return the bitwise logical AND NOT of packed single\-precision floating\-point values in xmm2 and xmm3/mem.
T}
T{
VEX.256.0F 55 /r VANDNPS ymm1, ymm2, ymm3/m256
T}
	B	V/V	AVX	T{
Return the bitwise logical AND NOT of packed single\-precision floating\-point values in ymm2 and ymm3/mem.
T}
T{
EVEX.128.0F.W0 55 /r VANDNPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
T}
	C	V/V	AVX512VL AVX512DQ	T{
Return the bitwise logical AND of packed single\-precision floating\-point values in xmm2 and xmm3/m128/m32bcst subject to writemask k1.
T}
T{
EVEX.256.0F.W0 55 /r VANDNPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
T}
	C	V/V	AVX512VL AVX512DQ	T{
Return the bitwise logical AND of packed single\-precision floating\-point values in ymm2 and ymm3/m256/m32bcst subject to writemask k1.
T}
T{
EVEX.512.0F.W0 55 /r VANDNPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
T}
	C	V/V	AVX512DQ	T{
Return the bitwise logical AND of packed single\-precision floating\-point values in zmm2 and zmm3/m512/m32bcst subject to writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv	ModRM:r/m (r)	NA
C	Full	ModRM:reg (w)	EVEX.vvvv	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Performs a bitwise logical AND NOT of the four, eight or sixteen packed
single\-precision floating\-point values from the first source operand and
the second source operand, and stores the result in the destination
operand.

.PP
EVEX encoded versions: The first source operand is a ZMM/YMM/XMM
register. The second source operand can be a ZMM/YMM/XMM register, a
512/256/128\-bit memory location, or a 512/256/128\-bit vector broadcasted
from a 32\-bit memory location. The destination operand is a ZMM/YMM/XMM
register conditionally updated with writemask k1.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand is a YMM register or a 256\-bit memory location.
The destination operand is a YMM register. The upper bits (MAXVL\-1:256)
of the corresponding ZMM register destination are zeroed.

.PP
VEX.128 encoded version: The first source operand is an XMM register.
The second source operand is an XMM register or 128\-bit memory location.
The destination operand is an XMM register. The upper bits (MAXVL\-1:128)
of the corresponding ZMM register destination are zeroed.

.PP
128\-bit Legacy SSE version: The second source can be an XMM register or
an 128\-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL\-1:128) of the
corresponding ZMM register destination are unmodified.

.SH OPERATION
.SS VANDNPS (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j←0 TO KL\-1
    i←j * 32
    IF k1[j] OR *no writemask*
            IF (EVEX.b == 1) AND (SRC2 *is memory*)
                THEN
                    DEST[i+31:i]←(NOT(SRC1[i+31:i])) BITWISE AND SRC2[31:0]
                ELSE
                    DEST[i+31:i]←(NOT(SRC1[i+31:i])) BITWISE AND SRC2[i+31:i]
            FI;
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE ; zeroing\-masking
                    DEST[i+31:i] = 0
            FI;
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VANDNPS (VEX.256 encoded version)
.PP
.RS

.nf
DEST[31:0]←(NOT(SRC1[31:0])) BITWISE AND SRC2[31:0]
DEST[63:32]←(NOT(SRC1[63:32])) BITWISE AND SRC2[63:32]
DEST[95:64]←(NOT(SRC1[95:64])) BITWISE AND SRC2[95:64]
DEST[127:96]←(NOT(SRC1[127:96])) BITWISE AND SRC2[127:96]
DEST[159:128]←(NOT(SRC1[159:128])) BITWISE AND SRC2[159:128]
DEST[191:160]←(NOT(SRC1[191:160])) BITWISE AND SRC2[191:160]
DEST[223:192]←(NOT(SRC1[223:192])) BITWISE AND SRC2[223:192]
DEST[255:224]←(NOT(SRC1[255:224])) BITWISE AND SRC2[255:224].
DEST[MAXVL\-1:256] ← 0

.fi
.RE

.SS VANDNPS (VEX.128 encoded version)
.PP
.RS

.nf
DEST[31:0]←(NOT(SRC1[31:0])) BITWISE AND SRC2[31:0]
DEST[63:32]←(NOT(SRC1[63:32])) BITWISE AND SRC2[63:32]
DEST[95:64]←(NOT(SRC1[95:64])) BITWISE AND SRC2[95:64]
DEST[127:96]←(NOT(SRC1[127:96])) BITWISE AND SRC2[127:96]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS ANDNPS (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[31:0]←(NOT(DEST[31:0])) BITWISE AND SRC[31:0]
DEST[63:32]←(NOT(DEST[63:32])) BITWISE AND SRC[63:32]
DEST[95:64]←(NOT(DEST[95:64])) BITWISE AND SRC[95:64]
DEST[127:96]←(NOT(DEST[127:96])) BITWISE AND SRC[127:96]
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VANDNPS \_\_m512 \_mm512\_andnot\_ps (\_\_m512 a, \_\_m512 b);

VANDNPS \_\_m512 \_mm512\_mask\_andnot\_ps (\_\_m512 s, \_\_mmask16 k, \_\_m512 a, \_\_m512 b);

VANDNPS \_\_m512 \_mm512\_maskz\_andnot\_ps (\_\_mmask16 k, \_\_m512 a, \_\_m512 b);

VANDNPS \_\_m256 \_mm256\_mask\_andnot\_ps (\_\_m256 s, \_\_mmask8 k, \_\_m256 a, \_\_m256 b);

VANDNPS \_\_m256 \_mm256\_maskz\_andnot\_ps (\_\_mmask8 k, \_\_m256 a, \_\_m256 b);

VANDNPS \_\_m128 \_mm\_mask\_andnot\_ps (\_\_m128 s, \_\_mmask8 k, \_\_m128 a, \_\_m128 b);

VANDNPS \_\_m128 \_mm\_maskz\_andnot\_ps (\_\_mmask8 k, \_\_m128 a, \_\_m128 b);

VANDNPS \_\_m256 \_mm256\_andnot\_ps (\_\_m256 a, \_\_m256 b);

ANDNPS \_\_m128 \_mm\_andnot\_ps (\_\_m128 a, \_\_m128 b);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
VEX\-encoded instruction, see Exceptions Type 4.

.PP
EVEX\-encoded instruction, see Exceptions Type E4.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
