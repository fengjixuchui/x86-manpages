.nh
.TH "X86-EMODPR" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
EMODPR - RESTRICT THE PERMISSIONS OF AN EPC PAGE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
EAX = 0EH ENCLS[EMODPR]	IR	V/V	SGX2	T{
This leaf function restricts the access rights associated with a EPC page in an initialized enclave.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.PP
Op/En

.PP
EAX

.PP
RBX

.PP
RCX

.PP
IR

.PP
EMODPR (In)

.PP
Return Error Code (Out)

.PP
Address of a SECINFO (In)

.PP
Address of the destination EPC page (In)

.SS Description
.PP
This leaf function restricts the access rights associated with an EPC
page in an initialized enclave. THE RWX bits of the SECINFO parameter
are treated as a permissions mask; supplying a value that does not
restrict the page permissions will have no effect. This instruction can
only be executed when current privilege level is 0.

.PP
RBX contains the effective address of a SECINFO structure while RCX
contains the effective address of an EPC page. The table below provides
additional information on the memory parameter of the EMODPR leaf
function.

.SH EMODPR MEMORY PARAMETER SEMANTICS
.TS
allbox;
l l 
l l .
SECINFO	EPCPAGE
T{
Read access permitted by Non Enclave
T}
	T{
Read/Write access permitted by Enclave
T}
.TE

.PP
The instruction faults if any of the following:

.SH EMODPR FAULTING CONDITIONS
.TS
allbox;
l l 
l l .
T{
The operands are not properly aligned.
T}
	T{
If unsupported security attributes are set.
T}
T{
The Enclave is not initialized.
T}
	T{
SECS is locked by another thread.
T}
T{
The EPC page is locked by another thread.
T}
	T{
RCX does not contain an effective address of an EPC page in the running enclave.
T}
The EPC page is not valid.	.TE

.PP
The error codes are:

.TS
allbox;
l l 
l l .
\fB\fCError Code (see Table 40\-4)\fR	\fB\fCDescription\fR
No Error	EMODPR successful.
SGX\_PAGE\_NOT\_MODIFIABLE	T{
The EPC page cannot be modified because it is in the PENDING or MODIFIED state.
T}
SGX\_EPC\_PAGE\_CONFLICT	T{
Page is being written by EADD, EAUG, ECREATE, ELDU/B, EMODT, or EWB.
T}
.TE

.PP
Table 40\-31\&. EMODPR Return Value in
RAX

.SS Concurrency Restrictions
.PP
Leaf

.PP
Parameter

.PP
Base Concurrency Restrictions

.PP
Access

.PP
On Conflict

.PP
SGX\_CONFLICT VM Exit Qualification

.PP
EMODPR

.PP
Target [DS:RCX]

.PP
Shared

.PP
#GP

.PP
Table 40\-32\&. Base Concurrency
Restrictions of EMODPR

.PP
Leaf

.PP
Parameter

.PP
Additional Concurrency Restrictions

.PP
vs. EACCEPT, EACCEPTCOPY, EMODPE, EMODPR, EMODT

.PP
vs. EADD, EEXTEND, EINIT

.PP
vs. ETRACK, ETRACKC

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
EMODPR

.PP
Target [DS:RCX]

.PP
Exclusive

.PP
SGX\_EPC\_PAGE \_CONFLICT

.PP
Concurrent

.PP
Concurrent

.PP
Table 40\-33\&. Additional Concurrency
Restrictions of EMODPR

.SS Operation
.SH TEMP VARIABLES IN EMODPR OPERATIONAL FLOW
.TS
allbox;
l l l l 
l l l l .
\fB\fCName\fR	\fB\fCType\fR	\fB\fCSize (bits)\fR	\fB\fCDescription\fR
TMP\_SECS	Effective Address	32/64	T{
Physical address of SECS to which EPC operand belongs.
T}
SCRATCH\_SECINFO	SECINFO	512	T{
Scratch storage for holding the contents of DS:RBX.
T}
.TE

.PP
IF (DS:RBX is not 64Byte Aligned)

.PP
THEN #GP(0); FI;

.PP
IF (DS:RCX is not 4KByte Aligned)

.PP
THEN #GP(0); FI;

.PP
IF (DS:RCX does not resolve within an EPC)

.PP
THEN #PF(DS:RCX); FI;

.PP
SCRATCH\_SECINFO ← DS:RBX;

.PP
(* Check for misconfigured SECINFO flags*)

.PP
IF ( (SCRATCH\_SECINFO reserved fields are not zero ) or

.PP
(SCRATCH\_SECINFO.FLAGS.R is 0 and SCRATCH\_SECINFO.FLAGS.W is not 0) )

.PP
THEN #GP(0); FI;

.PP
(* Check concurrency with SGX1 or SGX2 instructions on the EPC page *)

.PP
IF (SGX1 or other SGX2 instructions accessing EPC page)

.PP
THEN #GP(0); FI;

.PP
IF (EPCM(DS:RCX).VALID is 0 )

.PP
THEN #PF(DS:RCX); FI;

.PP
(* Check the EPC page for concurrency *)

.PP
IF (EPC page in use by another SGX2 instruction)

.PP
THEN

.PP
RFLAGS.ZF ← 1;

.PP
RAX ← SGX\_EPC\_PAGE\_CONFLICT;

.PP
GOTO DONE;

.PP
FI;

.PP
IF (EPCM(DS:RCX).PENDING is not 0 or (EPCM(DS:RCX).MODIFIED is not 0) )

.PP
THEN

.PP
RFLAGS.ZF ← 1;

.PP
RAX ← SGX\_PAGE\_NOT\_MODIFIABLE;

.PP
GOTO DONE;

.PP
FI;

.PP
IF (EPCM(DS:RCX).PT is not PT\_REG)

.PP
THEN #PF(DS:RCX); FI;

.PP
TMP\_SECS ← GET\_SECS\_ADDRESS

.PP
IF (TMP\_SECS.ATTRIBUTES.INIT = 0)

.PP
THEN #GP(0); FI;

.PP
(* Set the PR bit to indicate that permission restriction is in
progress *)

.PP
EPCM(DS:RCX).PR ← 1;

.PP
(* Update EPCM permissions *)

.PP
EPCM(DS:RCX).R←EPCM(DS:RCX).R \& SCRATCH\_SECINFO.FLAGS.R;

.PP
EPCM(DS:RCX).W←EPCM(DS:RCX).W \& SCRATCH\_SECINFO.FLAGS.W;

.PP
EPCM(DS:RCX).X←EPCM(DS:RCX).X \& SCRATCH\_SECINFO.FLAGS.X;

.PP
RFLAGS.ZF ← 0;

.PP
RAX←0;

.PP
DONE:

.PP
RFLAGS.CF,PF,AF,OF,SF ← 0;

.SS Flags Affected
.PP
Sets ZF if page is not modifiable or if other SGX2 instructions are
executing concurrently, otherwise cleared. Clears CF, PF, AF, OF, SF.

.SS Protected Mode Exceptions
.PP
#GP(0)

.PP
If a memory operand effective address is outside the DS segment limit.

.PP
If a memory operand is not properly aligned.

.PP
If a memory operand is locked.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.PP
If a memory operand is not an EPC page.

.SS 64\-Bit Mode Exceptions
.PP
#GP(0)

.PP
If a memory operand is non\-canonical form.

.PP
If a memory operand is not properly aligned.

.PP
If a memory operand is locked.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.PP
If a memory operand is not an EPC page.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
