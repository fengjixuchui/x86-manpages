.nh
.TH "X86-PMULHW" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
PMULHW - MULTIPLY PACKED SIGNED INTEGERS AND STORE HIGH RESULT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F E5 /mm, mm/m64	A	V/V	MMX	T{
Multiply the packed signed word integers in mm1.
T}
66 0F E5 /xmm2/m128	A	V/V	SSE2	T{
Multiply the packed signed word integers in xmm1.
T}
T{
VEX.128.66.0F.WIG E5 /r VPMULHW xmm1, xmm2, xmm3/m128
T}
	B	V/V	AVX	T{
Multiply the packed signed word integers in xmm1.
T}
T{
VEX.256.66.0F.WIG E5 /r VPMULHW ymm1, ymm2, ymm3/m256
T}
	B	V/V	AVX2	T{
Multiply the packed signed word integers in ymm1.
T}
T{
EVEX.128.66.0F.WIG E5 /r VPMULHW xmm1 {k1}{z}, xmm2, xmm3/m128
T}
	C	V/V	AVX512VL AVX512BW	T{
Multiply the packed signed word integers in xmm2 and xmm3/m128, and store the high 16 bits of the results in xmm1 under writemask k1.
T}
T{
EVEX.256.66.0F.WIG E5 /r VPMULHW ymm1 {k1}{z}, ymm2, ymm3/m256
T}
	C	V/V	AVX512VL AVX512BW	T{
Multiply the packed signed word integers in ymm2 and ymm3/m256, and store the high 16 bits of the results in ymm1 under writemask k1.
T}
T{
EVEX.512.66.0F.WIG E5 /r VPMULHW zmm1 {k1}{z}, zmm2, zmm3/m512
T}
	C	V/V	AVX512BW	T{
Multiply the packed signed word integers in zmm2 and zmm3/m512, and store the high 16 bits of the results in zmm1 under writemask k1.
T}
.TE

.PP
.RS

.PP
1\&. See note in Section 2.4, “AVX and SSE Instruction Exception
Specification” in the Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 3A.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
C	Full Mem	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Performs a SIMD signed multiply of the packed signed word integers in
the destination operand (first operand) and the source operand (second
operand), and stores the high 16 bits of each intermediate 32\-bit result
in the destination operand. (Figure 4\-12 shows this operation when using
64\-bit operands.)

.PP
n 64\-bit mode and not encoded with VEX/EVEX, using a REX prefix in the
form of REX.R permits this instruction to access additional registers
(XMM8\-XMM15).

.PP
Legacy SSE version 64\-bit operand: The source operand can be an MMX
technology register or a 64\-bit memory location. The destination operand
is an MMX technology register.

.PP
128\-bit Legacy SSE version: The first source and destination operands
are XMM registers. The second source operand is an XMM register or a
128\-bit memory location. Bits (MAXVL\-1:128) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: The first source and destination operands are
XMM registers. The second source operand is an XMM register or a 128\-bit
memory location. Bits (MAXVL\-1:128) of the destination YMM register are
zeroed. VEX.L must be 0, otherwise the instruction will #UD.

.PP
VEX.256 encoded version: The second source operand can be an YMM
register or a 256\-bit memory location. The first source and destination
operands are YMM registers.

.PP
EVEX encoded versions: The first source operand is a ZMM/YMM/XMM
register. The second source operand can be a ZMM/YMM/XMM register, a
512/256/128\-bit memory location. The destination operand is a
ZMM/YMM/XMM register conditionally updated with writemask k1.

.SH OPERATION
.SS PMULHW (with 64\-bit operands)
.PP
.RS

.nf
TEMP0[31:0] ←
    DEST[15:0] ∗ SRC[15:0]; (* Signed multiplication *)
TEMP1[31:0] ←
    DEST[31:16] ∗ SRC[31:16];
TEMP2[31:0] ←
    DEST[47:32] ∗ SRC[47:32];
TEMP3[31:0] ←
    DEST[63:48] ∗ SRC[63:48];
DEST[15:0] ←
    TEMP0[31:16];
DEST[31:16] ←
    TEMP1[31:16];
DEST[47:32] ←
    TEMP2[31:16];
DEST[63:48] ←
    TEMP3[31:16];

.fi
.RE

.SS PMULHW (with 128\-bit operands)
.PP
.RS

.nf
TEMP0[31:0] ←
    DEST[15:0] ∗ SRC[15:0]; (* Signed multiplication *)
TEMP1[31:0] ←
    DEST[31:16] ∗ SRC[31:16];
TEMP2[31:0] ←
    DEST[47:32] ∗ SRC[47:32];
TEMP3[31:0] ←
    DEST[63:48] ∗ SRC[63:48];
TEMP4[31:0] ←
    DEST[79:64] ∗ SRC[79:64];
TEMP5[31:0] ←
    DEST[95:80] ∗ SRC[95:80];
TEMP6[31:0] ←
    DEST[111:96] ∗ SRC[111:96];
TEMP7[31:0] ←
    DEST[127:112] ∗ SRC[127:112];
DEST[15:0] ←
    TEMP0[31:16];
DEST[31:16] ←
    TEMP1[31:16];
DEST[47:32] ←
    TEMP2[31:16];
DEST[63:48] ←
    TEMP3[31:16];
DEST[79:64] ←
    TEMP4[31:16];
DEST[95:80] ←
    TEMP5[31:16];
DEST[111:96] ←
    TEMP6[31:16];
DEST[127:112] ←
    TEMP7[31:16];

.fi
.RE

.SS VPMULHW (VEX.128 encoded version)
.PP
.RS

.nf
TEMP0[31:0]←SRC1[15:0] * SRC2[15:0] (*Signed Multiplication*)
TEMP1[31:0]←SRC1[31:16] * SRC2[31:16]
TEMP2[31:0]←SRC1[47:32] * SRC2[47:32]
TEMP3[31:0]←SRC1[63:48] * SRC2[63:48]
TEMP4[31:0]←SRC1[79:64] * SRC2[79:64]
TEMP5[31:0]←SRC1[95:80] * SRC2[95:80]
TEMP6[31:0]←SRC1[111:96] * SRC2[111:96]
TEMP7[31:0]←SRC1[127:112] * SRC2[127:112]
DEST[15:0] ← TEMP0[31:16]
DEST[31:16] ← TEMP1[31:16]
DEST[47:32] ← TEMP2[31:16]
DEST[63:48] ← TEMP3[31:16]
DEST[79:64] ← TEMP4[31:16]
DEST[95:80] ← TEMP5[31:16]
DEST[111:96] ← TEMP6[31:16]
DEST[127:112] ← TEMP7[31:16]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS PMULHW (VEX.256 encoded version)
.PP
.RS

.nf
TEMP0[31:0]←SRC1[15:0] * SRC2[15:0] (*Signed Multiplication*)
TEMP1[31:0]←SRC1[31:16] * SRC2[31:16]
TEMP2[31:0]←SRC1[47:32] * SRC2[47:32]
TEMP3[31:0]←SRC1[63:48] * SRC2[63:48]
TEMP4[31:0]←SRC1[79:64] * SRC2[79:64]
TEMP5[31:0]←SRC1[95:80] * SRC2[95:80]
TEMP6[31:0]←SRC1[111:96] * SRC2[111:96]
TEMP7[31:0]←SRC1[127:112] * SRC2[127:112]
TEMP8[31:0]←SRC1[143:128] * SRC2[143:128]
TEMP9[31:0]←SRC1[159:144] * SRC2[159:144]
TEMP10[31:0]←SRC1[175:160] * SRC2[175:160]
TEMP11[31:0]←SRC1[191:176] * SRC2[191:176]
TEMP12[31:0]←SRC1[207:192] * SRC2[207:192]
TEMP13[31:0]←SRC1[223:208] * SRC2[223:208]
TEMP14[31:0]←SRC1[239:224] * SRC2[239:224]
TEMP15[31:0]←SRC1[255:240] * SRC2[255:240]
DEST[15:0] ← TEMP0[31:16]
DEST[31:16] ← TEMP1[31:16]
DEST[47:32] ← TEMP2[31:16]
DEST[63:48] ← TEMP3[31:16]
DEST[79:64] ← TEMP4[31:16]
DEST[95:80] ← TEMP5[31:16]
DEST[111:96] ← TEMP6[31:16]
DEST[127:112] ← TEMP7[31:16]
DEST[143:128] ← TEMP8[31:16]
DEST[159:144] ← TEMP9[31:16]
DEST[175:160] ← TEMP10[31:16]
DEST[191:176] ← TEMP11[31:16]
DEST[207:192] ← TEMP12[31:16]
DEST[223:208] ← TEMP13[31:16]
DEST[239:224] ← TEMP14[31:16]
DEST[255:240] ← TEMP15[31:16]
DEST[MAXVL\-1:256] ← 0

.fi
.RE

.SS PMULHW (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO KL\-1
    i←j * 16
    IF k1[j] OR *no writemask*
        THEN
            temp[31:0]←SRC1[i+15:i] * SRC2[i+15:i]
            DEST[i+15:i] ← tmp[31:16]
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+15:i] remains unchanged*
                ELSE *zeroing\-masking*
                        ; zeroing\-masking
                    DEST[i+15:i] ← 0
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VPMULHW \_\_m512i \_mm512\_mulhi\_epi16(\_\_m512i a, \_\_m512i b);

VPMULHW \_\_m512i \_mm512\_mask\_mulhi\_epi16(\_\_m512i s, \_\_mmask32 k, \_\_m512i a, \_\_m512i b);

VPMULHW \_\_m512i \_mm512\_maskz\_mulhi\_epi16( \_\_mmask32 k, \_\_m512i a, \_\_m512i b);

VPMULHW \_\_m256i \_mm256\_mask\_mulhi\_epi16(\_\_m256i s, \_\_mmask16 k, \_\_m256i a, \_\_m256i b);

VPMULHW \_\_m256i \_mm256\_maskz\_mulhi\_epi16( \_\_mmask16 k, \_\_m256i a, \_\_m256i b);

VPMULHW \_\_m128i \_mm\_mask\_mulhi\_epi16(\_\_m128i s, \_\_mmask8 k, \_\_m128i a, \_\_m128i b);

VPMULHW \_\_m128i \_mm\_maskz\_mulhi\_epi16( \_\_mmask8 k, \_\_m128i a, \_\_m128i b);

PMULHW:\_\_m64 \_mm\_mulhi\_pi16 (\_\_m64 m1, \_\_m64 m2)

(V)PMULHW:\_\_m128i \_mm\_mulhi\_epi16 ( \_\_m128i a, \_\_m128i b)

VPMULHW:\_\_m256i \_mm256\_mulhi\_epi16 ( \_\_m256i a, \_\_m256i b)

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None.

.SH OTHER EXCEPTIONS
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 4.

.PP
EVEX\-encoded instruction, see Exceptions Type E4.nb.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
