.nh
.TH "X86-VRSQRT14SS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VRSQRT14SS - COMPUTE APPROXIMATE RECIPROCAL OF SQUARE ROOT OF SCALAR FLOAT32 VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.LIG.66.0F38.W0 4F /r VRSQRT14SS xmm1 {k1}{z}, xmm2, xmm3/m32
T}
	A	V/V	AVX512F	T{
Computes the approximate reciprocal square root of the scalar single\-precision floating\-point value in xmm3/m32 and stores the result in the low doubleword element of xmm1 using writemask k1. Bits
T}
[
127:32
]
 of xmm2 is copied to xmm1
[
127:32
]
\&.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Tuple1 Scalar	ModRM:reg (w)	VEX.vvvv	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
Computes of the approximate reciprocal of the square root of the scalar
single\-precision floating\-point value in the low doubleword element of
the source operand (the second operand) and stores the result in the low
doubleword element of the destination operand (the first operand)
according to the writemask. The maximum relative error for this
approximation is less than 2\-14. The source operand can be an XMM
register or a 32\-bit memory location. The destination operand is an XMM
register.

.PP
Bits (127:32) of the XMM register destination are copied from
corresponding bits in the first source operand. Bits (MAXVL\-1:128) of
the destination register are zeroed.

.PP
The VRSQRT14SS instruction is not affected by the rounding control bits
in the MXCSR register. When a source value is a 0.0, an ∞ with the sign
of the source value is returned. When the source operand is an ∞, zero
with the sign of the source value is returned. A denormal source value
is treated as zero only if DAZ bit is set in MXCSR. Otherwise it is
treated correctly and performs the approximation with the specified
masked response. When a source value is a negative value (other than
0.0) a floating\-point indefinite is returned. When a source value is an
SNaN or QNaN, the SNaN is converted to a QNaN or the source QNaN is
returned.

.PP
MXCSR exception flags are not affected by this instruction and
floating\-point exceptions are not reported.

.SS A numerically exact implementation of VRSQRT14xx can be found at https://software.intel.com/en\-us/arti\-
.SS cles/reference\-implementations\-for\-IA\-approximation\-instructions\-vrcp14\-vrsqrt14\-vrcp28\-vrsqrt28\-vexp2.
.SS Operation
.SS VRSQRT14SS (EVEX version)
.PP
.RS

.nf
IF k1[0] or *no writemask*
    THEN DEST[31:0]←APPROXIMATE(1.0/ SQRT(SRC2[31:0]))
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[31:0]←0
        FI;
FI;
DEST[127:32] ← SRC1[127:32]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.TS
allbox;
l l l 
l l l .
\fB\fCInput value\fR	\fB\fCResult value\fR	\fB\fCComments\fR
Any denormal	Normal	Cannot generate overflow
X = 2\-2n	2n	X\&lt;0	QNaN\_Indefinite	Including \-INF
X = \-0	\-INF	X = +0	+INF	X = +INF	+0	.TE

.PP
Table 5\-29. VRSQRT14SS Special Cases

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VRSQRT14SS \_\_m128 \_mm\_rsqrt14\_ss( \_\_m128 a, \_\_m128 b);

VRSQRT14SS \_\_m128 \_mm\_mask\_rsqrt14\_ss(\_\_m128 s, \_\_mmask8 k, \_\_m128 a, \_\_m128 b);

VRSQRT14SS \_\_m128 \_mm\_maskz\_rsqrt14\_ss( \_\_mmask8 k, \_\_m128 a, \_\_m128 b);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
See Exceptions Type E5.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
