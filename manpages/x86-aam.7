.nh
.TH "X86-AAM" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
AAM - ASCII ADJUST AX AFTER MULTIPLY
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
D4 0A	AAM	ZO	Invalid	Valid	T{
ASCII adjust AX after multiply.
T}
D4 ib	AAM imm8	ZO	Invalid	Valid	T{
Adjust AX after multiply to number base imm8.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Adjusts the result of the multiplication of two unpacked BCD values to
create a pair of unpacked (base 10) BCD values. The AX register is the
implied source and destination operand for this instruction. The AAM
instruction is only useful when it follows an MUL instruction that
multiplies (binary multiplication) two unpacked BCD values and stores a
word result in the AX register. The AAM instruction then adjusts the
contents of the AX register to contain the correct 2\-digit unpacked
(base 10) BCD result.

.PP
The generalized version of this instruction allows adjustment of the
contents of the AX to create two unpacked digits of any number base (see
the “Operation” section below). Here, the imm8).

.PP
This instruction executes as described in compatibility mode and legacy
mode. It is not valid in 64\-bit mode.

.SH OPERATION
.PP
.RS

.nf
IF 64\-Bit Mode
    THEN
        #UD;
    ELSE
        tempAL ← AL;
        AH ← tempAL / imm8 is set to 0AH for the AAM mnemonic *)
        AL ← tempAL MOD imm8;
FI;
The immediate value (imm8) is taken from the second byte of the instruction.

.fi
.RE

.SH FLAGS AFFECTED
.PP
The SF, ZF, and PF flags are set according to the resulting binary value
in the AL register. The OF, AF, and CF flags are undefined.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#DE	T{
If an immediate value of 0 is used.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If in 64\-bit mode.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
