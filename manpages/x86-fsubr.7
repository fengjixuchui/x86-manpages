.nh
.TH "X86-FSUBR-FSUBRP-FISUBR" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FSUBR-FSUBRP-FISUBR - REVERSE SUBTRACT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
D8 /5	FSUBR m32fp	Valid	Valid	T{
Subtract ST(0) from m32fp and store result in ST(0).
T}
DC /5	FSUBR m64fp	Valid	Valid	T{
Subtract ST(0) from m64fp and store result in ST(0).
T}
D8 E8+i	FSUBR ST(0), ST(i)	Valid	Valid	T{
Subtract ST(0) from ST(i) and store result in ST(0).
T}
DC E0+i	FSUBR ST(i), ST(0)	Valid	Valid	T{
Subtract ST(i) from ST(0) and store result in ST(i).
T}
DE E0+i	FSUBRP ST(i), ST(0)	Valid	Valid	T{
Subtract ST(i) from ST(0), store result in ST(i), and pop register stack.
T}
DE E1	FSUBRP	Valid	Valid	T{
Subtract ST(1) from ST(0), store result in ST(1), and pop register stack.
T}
DA /5	FISUBR m32int	Valid	Valid	T{
Subtract ST(0) from m32int and store result in ST(0).
T}
DE /5	FISUBR m16int	Valid	Valid	T{
Subtract ST(0) from m16int and store result in ST(0).
T}
.TE

.SH DESCRIPTION
.PP
Subtracts the destination operand from the source operand and stores the
difference in the destination location. The destination operand is
always an FPU register; the source operand can be a register or a memory
location. Source operands in memory can be in single\-precision or
double\-precision floating\-point format or in word or doubleword integer
format.

.PP
These instructions perform the reverse operations of the FSUB, FSUBP,
and FISUB instructions. They are provided to support more efficient
coding.

.PP
The no\-operand version of the instruction subtracts the contents of the
ST(1) register from the ST(0) register and stores the result in ST(1).
The one\-operand version subtracts the contents of the ST(0) register
from the contents of a memory location (either a floating\-point or an
integer value) and stores the result in ST(0). The two\-operand version,
subtracts the contents of the ST(i) register from the ST(0) register or
vice versa.

.PP
The FSUBRP instructions perform the additional operation of popping the
FPU register stack following the subtraction. To pop the register stack,
the processor marks the ST(0) register as empty and increments the stack
pointer (TOP) by 1. The no\-operand version of the floating\-point reverse
subtract instructions always results in the register stack being popped.
In some assemblers, the mnemonic for this instruction is FSUBR rather
than FSUBRP.

.PP
The FISUBR instructions convert an integer source operand to double
extended\-precision floating\-point format before performing the
subtraction.

.PP
The following table shows the results obtained when subtracting various
classes of numbers from one another, assuming that neither overflow nor
underflow occurs. Here, the DEST value is subtracted from the SRC value
(SRC − DEST = result).

.PP
When the difference between two operands of like sign is 0, the result
is +0, except for the round toward −∞ mode, in which case the result is
−0. This instruction also guarantees that +0 − (−0) = +0, and that −0 −
(+0) = −0. When the source operand is an integer 0, it is treated as a
+0.

.PP
When one operand is ∞, the result is ∞ of the expected sign. If both
operands are ∞ of the same sign, an invalidoperation exception is
generated.

.PP
SRC

.PP
DEST

.PP
−∞

.PP
−F or −I

.PP
−0

.PP
+0

.PP
+F or +I

.PP
+∞

.PP
NaN

.PP
−∞

.PP
*

.PP
+∞

.PP
+∞

.PP
+∞

.PP
+∞

.PP
+∞

.PP
NaN

.PP
−F

.PP
−∞

.PP
±F or ±0

.PP
−DEST

.PP
−DEST

.PP
+F

.PP
+∞

.PP
NaN

.PP
−0

.PP
−∞

.PP
SRC

.PP
±0

.PP
+0

.PP
SRC

.PP
+∞

.PP
NaN

.PP
+0

.PP
−∞

.PP
SRC

.PP
−0

.PP
±0

.PP
SRC

.PP
+∞

.PP
NaN

.PP
+F

.PP
−∞

.PP
−F

.PP
−DEST

.PP
−DEST

.PP
±F or ±0

.PP
+∞

.PP
NaN

.PP
+∞

.PP
−∞

.PP
−∞

.PP
−∞

.PP
−∞

.PP
−∞

.PP
*

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
Table 3\-39. FSUBR/FSUBRP/FISUBR Results

.PP
.RS

.PP
F Meansfinitefloating\-pointvalue.

.PP
I Means integer.

.PP
* Indicatesfloating\-pointinvalid\-arithmetic\-operand(#IA)exception.

.RE

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
IF Instruction = FISUBR
    THEN
        DEST ← ConvertToDoubleExtendedPrecisionFP(SRC) − DEST;
    ELSE (* Source operand is floating\-point value *)
        DEST ← SRC − DEST; FI;
IF Instruction = FSUBRP
    THEN
        PopRegisterStack; FI;

.fi
.RE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
C1	T{
Set to 0 if stack underflow occurred.
T}
	T{
Set if result was rounded up; cleared otherwise.
T}
C0, C2, C3	Undefined.
.TE

.SH FLOATING\-POINT EXCEPTIONS
.TS
allbox;
l l 
l l .
#IS	Stack underflow occurred.
#IA	T{
Operand is an SNaN value or unsupported format.
T}
	T{
Operands are infinities of like sign.
T}
#D	T{
Source operand is a denormal value.
T}
#U	T{
Result is too small for destination format.
T}
#O	T{
Result is too large for destination format.
T}
#P	T{
Value cannot be represented exactly in destination format.
T}
.TE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
