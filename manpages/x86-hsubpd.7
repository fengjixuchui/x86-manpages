.nh
.TH "X86-HSUBPD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
HSUBPD - PACKED DOUBLE-FP HORIZONTAL SUBTRACT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32\-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
66 0F 7D /xmm1, xmm2/m128	RM	V/V	SSE3	T{
Horizontal subtract packed double\-precision floating\-point values from xmm1.
T}
T{
VEX.128.66.0F.WIG 7D /r VHSUBPD xmm1,xmm2, xmm3/m128
T}
	RVM	V/V	AVX	T{
Horizontal subtract packed double\-precision floating\-point values from xmm2 and xmm3/mem.
T}
T{
VEX.256.66.0F.WIG 7D /r VHSUBPD ymm1, ymm2, ymm3/m256
T}
	RVM	V/V	AVX	T{
Horizontal subtract packed double\-precision floating\-point values from ymm2 and ymm3/mem.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
RVM	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
The HSUBPD instruction subtracts horizontally the packed DP FP numbers
of both operands.

.PP
Subtracts the double\-precision floating\-point value in the high quadword
of the destination operand from the low quadword of the destination
operand and stores the result in the low quadword of the destination
operand.

.PP
Subtracts the double\-precision floating\-point value in the high quadword
of the source operand from the low quadword of the source operand and
stores the result in the high quadword of the destination operand.

.PP
In 64\-bit mode, use of the REX.R prefix permits this instruction to
access additional registers (XMM8\-XMM15).

.PP
See Figure 3\-21 for VHSUBPD.

.PP
HSUBPD xmm1,
xmm2/m128xmm2[127:64][63:0]/m128xmm1[127:64][63:0]Result:xmm2/m128[63:0]
\-xmm1[63:0] \- xmm1[127:64]xmm1xmm2/m128[127:64][127:64][63:0]

.PP
Figure 3\-20. HSUBPD—Packed Double\-FP Horizontal Subtract

.PP
X3X2X1X0SRC1Y3Y2Y1Y0SRC2DESTY2 \- Y3X2 \- X3Y0 \- Y1X0 \- X1

.PP
Figure 3\-21. VHSUBPD operation

.PP
128\-bit Legacy SSE version: The second source can be an XMM register or
an 128\-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL\-1:128) of the
corresponding YMM register destination are unmodified.

.PP
VEX.128 encoded version: the first source operand is an XMM register or
128\-bit memory location. The destination operand is an XMM register. The
upper bits (MAXVL\-1:128) of the corresponding YMM register destination
are zeroed.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256\-bit memory
location. The destination operand is a YMM register.

.SH OPERATION
.SS HSUBPD (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[63:0]←SRC1[63:0] \- SRC1[127:64]
DEST[127:64]←SRC2[63:0] \- SRC2[127:64]
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS VHSUBPD (VEX.128 encoded version)
.PP
.RS

.nf
DEST[63:0]←SRC1[63:0] \- SRC1[127:64]
DEST[127:64]←SRC2[63:0] \- SRC2[127:64]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VHSUBPD (VEX.256 encoded version)
.PP
.RS

.nf
DEST[63:0]←SRC1[63:0] \- SRC1[127:64]
DEST[127:64]←SRC2[63:0] \- SRC2[127:64]
DEST[191:128]←SRC1[191:128] \- SRC1[255:192]
DEST[255:192]←SRC2[191:128] \- SRC2[255:192]

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
HSUBPD: \_\_m128d \_mm\_hsub\_pd(\_\_m128d a, \_\_m128d b)

VHSUBPD: \_\_m256d \_mm256\_hsub\_pd (\_\_m256d a, \_\_m256d b);

.fi
.RE

.SH EXCEPTIONS
.PP
When the source operand is a memory operand, the operand must be aligned
on a 16\-byte boundary or a general\-protection exception (#GP) will be
generated.

.SH NUMERIC EXCEPTIONS
.PP
Overflow, Underflow, Invalid, Precision, Denormal

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 2.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
