.nh
.TH "X86-FSTCW-FNSTCW" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FSTCW-FNSTCW - STORE X87 FPU CONTROL WORD
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
9B D9 /7	FSTCW m2byte	Valid	Valid	T{
Store FPU control word to m2byte after checking for pending unmasked floating\-point exceptions.
T}
D9 /7	FNSTCW* m2byte	Valid	Valid	T{
Store FPU control word to m2byte without checking for pending unmasked floating\-point exceptions.
T}
.TE

.PP
.RS

.PP
* SeeIA\-32ArchitectureCompatibilitysectionbelow.

.RE

.SH DESCRIPTION
.PP
Stores the current value of the FPU control word at the specified
destination in memory. The FSTCW instruction checks for and handles
pending unmasked floating\-point exceptions before storing the control
word; the FNSTCW instruction does not.

.PP
The assembler issues two instructions for the FSTCW instruction (an
FWAIT instruction followed by an FNSTCW instruction), and the processor
executes each of these instructions in separately. If an exception is
generated for either of these instructions, the save EIP points to the
instruction that caused the exception.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH IA\-32 ARCHITECTURE COMPATIBILITY
.PP
When operating a Pentium or Intel486 processor in MS\-DOS compatibility
mode, it is possible (under unusual circumstances) for an FNSTCW
instruction to be interrupted prior to being executed to handle a
pending FPU exception. See the section titled “No\-Wait FPU Instructions
Can Get FPU Interrupt in Window” in Appendix D of the Intel® 64 and
IA\-32 Architectures Software Developer’s Manual, Volume 1, for a
description of these circumstances. An FNSTCW instruction cannot be
interrupted in this way on later Intel processors, except for the Intel
QuarkTM X1000 processor.

.SH OPERATION
.PP
.RS

.nf
DEST ← FPUControlWord;

.fi
.RE

.SH FPU FLAGS AFFECTED
.PP
The C0, C1, C2, and C3 flags are undefined.

.SH FLOATING\-POINT EXCEPTIONS
.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the destination is located in a non\-writable segment.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
