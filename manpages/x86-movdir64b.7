.nh
.TH "X86-MOVDIR64B" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
MOVDIR64B - MOVE 64 BYTES AS DIRECT STORE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
66 0F 38 F8 /r MOVDIR64B r16/r32/r64, m512
T}
	A	V/V	MOVDIR64B	T{
Move 64\-bytes as direct\-store with guaranteed 64\-byte write atomicity from the source memory operand address to destination memory address specified as offset to ES segment in the register operand.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING1
.PP
.RS

.PP
1\&. The Mod field of the ModR/M byte cannot have value 11B.

.RE

.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOp/En\fR	\fB\fCTuple\fR	\fB\fCOperand 1\fR	\fB\fCOperand 2\fR	\fB\fCOperand 3\fR	\fB\fCOperand 4\fR
A	NA	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Moves 64\-bytes as direct\-store with 64\-byte write atomicity from source
memory address to destination memory address. The source operand is a
normal memory operand. The destination operand is a memory location
specified in a general\-purpose register. The register content is
interpreted as an offset into ES segment without any segment override.
In 64\-bit mode, the register operand width is 64\-bits (32\-bits with 67H
prefix). Outside of 64\-bit mode, the register width is 32\-bits when
CS.D=1 (16\-bits with 67H prefix), and 16\-bits when CS.D=0 (32\-bits with
67H prefix). MOVDIR64B requires the destination address to be 64\-byte
aligned. No alignment restriction is enforced for source operand.

.PP
MOVDIR64B reads 64\-bytes from the source memory address and performs a
64\-byte direct\-store operation to the destination address. The load
operation follows normal read ordering based on source address
memory\-type. The direct\-store is implemented by using the write
combining (WC) memory type protocol for writing data. Using this
protocol, the processor does not write the data into the cache
hierarchy, nor does it fetch the corresponding cache line from memory
into the cache hierarchy. If the destination address is cached, the line
is written\-back (if modified) and invalidated from the cache, before the
direct\-store.

.PP
Unlike stores with non\-temporal hint which allow UC/WP memory\-type for
destination to override the non\-temporal hint, direct\-stores always
follow WC memory type protocol irrespective of destination address
memory type (including UC/WP types). Unlike WC stores and stores with
non\-temporal hint, direct\-stores are eligible for immediate eviction
from the write\-combining buffer, and thus not combined with younger
stores (including direct\-stores) to the same address. Older WC and
non\-temporal stores held in the write\-combing buffer may be combined
with younger direct stores to the same address. Because WC protocol used
by direct\-stores follow weakly\-ordered memory consistency model, fencing
operation using SFENCE or MFENCE should follow the MOVDIR64B instruction
to enforce ordering when needed.

.PP
There is no atomicity guarantee provided for the 64\-byte load operation
from source address, and processor implementations may use multiple load
operations to read the 64\-bytes. The 64\-byte direct\-store issued by
MOVDIR64B guarantees 64\-byte write\-completion atomicity. This means that
the data arrives at the destination in a single undivided 64\-byte write
transaction.

.PP
Availability of the MOVDIR64B instruction is indicated by the presence
of the CPUID feature flag MOVDIR64B (bit 28 of the ECX register in leaf
07H, see “CPUID—CPU Identification” in the Intel® 64 and IA\-32
Architectures Software Developer’s Manual, Volume 2A).

.SH OPERATION
.PP
.RS

.nf
DEST ← SRC;

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
MOVDIR64B void \_movdir64b(void *dst, const void* src)

.fi
.RE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.
T}
	T{
If address in destination (register) operand is not aligned to a 64\-byte boundary.
T}
#SS(0)	T{
For an illegal address in the SS segment.
T}
#PF	(fault\-code) For a page fault.
#UD	If CPUID.07H.0H:ECX.MOVDIR64B
[
bit 28
]
 = 0.
	If LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If any part of the operand lies outside the effective address space from 0 to FFFFH.
T}
	T{
If address in destination (register) operand is not aligned to a 64\-byte boundary.
T}
#UD	If CPUID.07H.0H:ECX.MOVDIR64B
[
bit 28
]
 = 0.
	If LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in real address mode.

.TS
allbox;
l l 
l l .
#PF	(fault\-code) For a page fault.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If memory address referencing the SS segment is in non\-canonical form.
T}
#GP(0)	T{
If the memory address is in non\-canonical form.
T}
	T{
If address in destination (register) operand is not aligned to a 64\-byte boundary.
T}
#PF	(fault\-code) For a page fault.
#UD	If CPUID.07H.0H:ECX.MOVDIR64B
[
bit 28
]
 = 0.
	If LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
