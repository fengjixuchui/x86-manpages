.nh
.TH "X86-VPLZCNTD-VPLZCNTQ" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VPLZCNTD-VPLZCNTQ - COUNT THE NUMBER OF LEADING ZERO BITS FOR PACKED DWORD, PACKED QWORD VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.128.66.0F38.W0 44 /r VPLZCNTD xmm1 {k1}{z}, xmm2/m128/m32bcst
T}
	A	V/V	AVX512VL AVX512CD	T{
Count the number of leading zero bits in each dword element of xmm2/m128/m32bcst using writemask k1.
T}
T{
EVEX.256.66.0F38.W0 44 /r VPLZCNTD ymm1 {k1}{z}, ymm2/m256/m32bcst
T}
	A	V/V	AVX512VL AVX512CD	T{
Count the number of leading zero bits in each dword element of ymm2/m256/m32bcst using writemask k1.
T}
T{
EVEX.512.66.0F38.W0 44 /r VPLZCNTD zmm1 {k1}{z}, zmm2/m512/m32bcst
T}
	A	V/V	AVX512CD	T{
Count the number of leading zero bits in each dword element of zmm2/m512/m32bcst using writemask k1.
T}
T{
EVEX.128.66.0F38.W1 44 /r VPLZCNTQ xmm1 {k1}{z}, xmm2/m128/m64bcst
T}
	A	V/V	AVX512VL AVX512CD	T{
Count the number of leading zero bits in each qword element of xmm2/m128/m64bcst using writemask k1.
T}
T{
EVEX.256.66.0F38.W1 44 /r VPLZCNTQ ymm1 {k1}{z}, ymm2/m256/m64bcst
T}
	A	V/V	AVX512VL AVX512CD	T{
Count the number of leading zero bits in each qword element of ymm2/m256/m64bcst using writemask k1.
T}
T{
EVEX.512.66.0F38.W1 44 /r VPLZCNTQ zmm1 {k1}{z}, zmm2/m512/m64bcst
T}
	A	V/V	AVX512CD	T{
Count the number of leading zero bits in each qword element of zmm2/m512/m64bcst using writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Full	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SS Description
.PP
Counts the number of leading most significant zero bits in each dword or
qword element of the source operand (the second operand) and stores the
results in the destination register (the first operand) according to the
writemask. If an element is zero, the result for that element is the
operand size of the element.

.PP
EVEX.512 encoded version: The source operand is a ZMM register, a
512\-bit memory location, or a 512\-bit vector broadcasted from a
32/64\-bit memory location. The destination operand is a ZMM register,
conditionally updated using writemask k1.

.PP
EVEX.256 encoded version: The source operand is a YMM register, a
256\-bit memory location, or a 256\-bit vector broadcasted from a
32/64\-bit memory location. The destination operand is a YMM register,
conditionally updated using writemask k1.

.PP
EVEX.128 encoded version: The source operand is a XMM register, a
128\-bit memory location, or a 128\-bit vector broadcasted from a
32/64\-bit memory location. The destination operand is a XMM register,
conditionally updated using writemask k1.

.PP
EVEX.vvvv is reserved and must be 1111b otherwise instructions will
#UD.

.SS Operation
.SS VPLZCNTD
.PP
.RS

.nf
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j←0 TO KL\-1
    i←j*32
    IF MaskBit(j) OR *no writemask*
        THEN
                temp ← 32
                DEST[i+31:i] ← 0
                WHILE (temp > 0) AND (SRC[i+temp\-1] = 0)
                DO
                    temp←temp – 1
                    DEST[i+31:i]←DEST[i+31:i] + 1
                OD
        ELSE
            IF *merging\-masking*
                THEN *DEST[i+31:i] remains unchanged*
                ELSE DEST[i+31:i]←0
            FI
    FI
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VPLZCNTQ
.PP
.RS

.nf
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL\-1
    i←j*64
    IF MaskBit(j) OR *no writemask*
        THEN
                temp ← 64
                DEST[i+63:i] ← 0
                WHILE (temp > 0) AND (SRC[i+temp\-1] = 0)
                DO
                    temp←temp – 1
                    DEST[i+63:i]←DEST[i+63:i] + 1
                OD
        ELSE
            IF *merging\-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE DEST[i+63:i]←0
            FI
    FI
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VPLZCNTD \_\_m512i \_mm512\_lzcnt\_epi32(\_\_m512i a);

VPLZCNTD \_\_m512i \_mm512\_mask\_lzcnt\_epi32(\_\_m512i s, \_\_mmask16 m, \_\_m512i a);

VPLZCNTD \_\_m512i \_mm512\_maskz\_lzcnt\_epi32( \_\_mmask16 m, \_\_m512i a);

VPLZCNTQ \_\_m512i \_mm512\_lzcnt\_epi64(\_\_m512i a);

VPLZCNTQ \_\_m512i \_mm512\_mask\_lzcnt\_epi64(\_\_m512i s, \_\_mmask8 m, \_\_m512i a);

VPLZCNTQ \_\_m512i \_mm512\_maskz\_lzcnt\_epi64(\_\_mmask8 m, \_\_m512i a);

VPLZCNTD \_\_m256i \_mm256\_lzcnt\_epi32(\_\_m256i a);

VPLZCNTD \_\_m256i \_mm256\_mask\_lzcnt\_epi32(\_\_m256i s, \_\_mmask8 m, \_\_m256i a);

VPLZCNTD \_\_m256i \_mm256\_maskz\_lzcnt\_epi32( \_\_mmask8 m, \_\_m256i a);

VPLZCNTQ \_\_m256i \_mm256\_lzcnt\_epi64(\_\_m256i a);

VPLZCNTQ \_\_m256i \_mm256\_mask\_lzcnt\_epi64(\_\_m256i s, \_\_mmask8 m, \_\_m256i a);

VPLZCNTQ \_\_m256i \_mm256\_maskz\_lzcnt\_epi64(\_\_mmask8 m, \_\_m256i a);

VPLZCNTD \_\_m128i \_mm\_lzcnt\_epi32(\_\_m128i a);

VPLZCNTD \_\_m128i \_mm\_mask\_lzcnt\_epi32(\_\_m128i s, \_\_mmask8 m, \_\_m128i a);

VPLZCNTD \_\_m128i \_mm\_maskz\_lzcnt\_epi32( \_\_mmask8 m, \_\_m128i a);

VPLZCNTQ \_\_m128i \_mm\_lzcnt\_epi64(\_\_m128i a);

VPLZCNTQ \_\_m128i \_mm\_mask\_lzcnt\_epi64(\_\_m128i s, \_\_mmask8 m, \_\_m128i a);

VPLZCNTQ \_\_m128i \_mm\_maskz\_lzcnt\_epi64(\_\_mmask8 m, \_\_m128i a);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
EVEX\-encoded instruction, see Exceptions Type E4.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
