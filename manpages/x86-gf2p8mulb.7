.nh
.TH "X86-GF2P8MULB" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
GF2P8MULB - GALOIS FIELD MULTIPLY BYTES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
66 0F38 CF /r GF2P8MULB xmm1, xmm2/m128
T}
	A	V/V	GFNI	T{
Multiplies elements in the finite field GF(2^8).
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOp/En\fR	\fB\fCTuple\fR	\fB\fCOperand 1\fR	\fB\fCOperand 2\fR	\fB\fCOperand 3\fR	\fB\fCOperand 4\fR
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
.TE

.SS Description
.PP
The instruction multiplies elements in the finite field GF(23 + x + 1.

.PP
This instruction does not support broadcasting.

.PP
The SSE encoded forms of the instruction require16B alignment on their
memory operations.

.SS Operation
.PP
.RS

.nf
define gf2p8mul\_byte(src1byte, src2byte):
    tword ← 0
    FOR i ← 0 to 7:
        IF src2byte.bit[i]:
            tword ← tword XOR (src1byte<< i)
        * carry out polynomial reduction by the characteristic polynomial p*
    FOR i ← 14 downto 8:
        p ← 0x11B << (i\-8) *0x11B = 0000\_0001\_0001\_1011 in binary*
        IF tword.bit[i]:
            tword ← tword XOR p
return tword.byte[0]

.fi
.RE

.SS GF2P8MULB srcdest, src1 (128b SSE encoded version)
.PP
.RS

.nf
FOR j ← 0 TO 15:
    SRCDEST.byte[j] ← gf2p8mul\_byte(SRCDEST.byte[j], SRC1.byte[j])

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VGF2P8MULB \_\_m128i \_mm\_gf2p8mul\_epi8(\_\_m128i, \_\_m128i);

VGF2P8MULB \_\_m128i \_mm\_mask\_gf2p8mul\_epi8(\_\_m128i, \_\_mmask16, \_\_m128i, \_\_m128i);

VGF2P8MULB \_\_m128i \_mm\_maskz\_gf2p8mul\_epi8(\_\_mmask16, \_\_m128i, \_\_m128i);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None.

.SS Other Exceptions
.PP
Legacy\-encoded: Exceptions Type 4.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
