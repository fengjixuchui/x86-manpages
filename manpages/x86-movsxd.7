.nh
.TH "X86-MOVSX-MOVSXD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
MOVSX-MOVSXD - MOVE WITH SIGN-EXTENSION
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
0F BE /r	MOVSX r16, r/m8	RM	Valid	Valid	T{
Move byte to word with sign\-extension.
T}
0F BE /r	MOVSX r32, r/m8	RM	Valid	Valid	T{
Move byte to doubleword with sign\-extension.
T}
REX.W + 0F BE /r	MOVSX r64, r/m8	RM	Valid	N.E.	T{
Move byte to quadword with sign\-extension.
T}
0F BF /r	MOVSX r32, r/m16	RM	Valid	Valid	T{
Move word to doubleword, with sign\-extension.
T}
REX.W + 0F BF /r	MOVSX r64, r/m16	RM	Valid	N.E.	T{
Move word to quadword with sign\-extension.
T}
63 /r*	MOVSXD r16, r/m16	RM	Valid	Valid	T{
Move word to word with sign\-extension.
T}
63 /r*	MOVSXD r32, r/m32	RM	Valid	Valid	T{
Move doubleword to doubleword with sign\-extension.
T}
REX.W + 63 /r	MOVSXD r64, r/m32	RM	Valid	N.E.	T{
Move doubleword to quadword with sign\-extension.
T}
.TE

.PP
.RS

.PP
*
TheuseofMOVSXDwithoutREX.Win64\-bitmodeisdiscouraged.RegularMOVshouldbeusedinsteadofusingMOVSXDwithout
REX.W.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Copies the contents of the source operand (register or memory location)
to the destination operand (register) and sign extends the value to 16
or 32 bits (see Figure 7\-6 in the
Intel® 64 and IA\-32 Architectures Software Developer’s Manual, Volume
1). The size of the converted value depends on the operand\-size
attribute.

.PP
In 64\-bit mode, the instruction’s default operation size is 32 bits. Use
of the REX.R prefix permits access to additional registers (R8\-R15). Use
of the REX.W prefix promotes operation to 64 bits. See the summary chart
at the beginning of this section for encoding data and limits.

.SH OPERATION
.PP
.RS

.nf
DEST ← SignExtend(SRC);

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
