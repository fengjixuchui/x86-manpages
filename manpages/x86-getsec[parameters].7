.nh
.TH "X86-GETSEC[PARAMETERS]" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
GETSEC[PARAMETERS] - REPORT THE SMX PARAMETERS
.TS
allbox;
l l l 
l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCDescription\fR
NP 0F 37 (EAX=6)	GETSEC[PARAMETERS]	T{
Report the SMX parameters. The parameters index is input in EBX with the result returned in EAX, EBX, and ECX.
T}
.TE

.SH DESCRIPTION
.PP
The GETSEC[PARAMETERS] instruction returns specific parameter
information for SMX features supported by the processor. Parameter
information is returned in EAX, EBX, and ECX, with the input parameter
selected using EBX.

.PP
Software retrieves parameter information by searching with an input
index for EBX starting at 0, and then reading the returned results in
EAX, EBX, and ECX. EAX[4:0] is designated to return a parameter type
field indicating if a parameter is available and what type it is. If
EAX[4:0] is returned with 0, this designates a null parameter and
indicates no more parameters are available.

.PP
Table 6\-7 defines the parameter types
supported in current and future implementations.

.TS
allbox;
l l l l l 
l l l l l .
\fB\fCParameter Type EAX[4:0]\fR	\fB\fCParameter Description\fR	\fB\fCEAX[31:5]\fR	\fB\fCEBX[31:0]\fR	\fB\fCECX[31:0]\fR
0	NULL	Reserved (0 returned)	Reserved (unmodified)	Reserved (unmodified)
1	Supported AC module versions	Reserved (0 returned)	Version comparison mask	Version numbers supported
2	T{
Max size of authenticated code execution area
T}
	T{
Multiply by 32 for size in bytes
T}
	Reserved (unmodified)	Reserved (unmodified)
3	T{
External memory types supported during AC mode
T}
	Memory type bit mask	Reserved (unmodified)	Reserved (unmodified)
4	T{
Selective SENTER functionality control
T}
	EAX[14:8]T{
 correspond to available SENTER function disable controls
T}
	Reserved (unmodified)	Reserved (unmodified)
5	TXT extensions support	T{
TXT Feature Extensions Flags (see 
T}
Table 6\-8)	Reserved	Reserved
6\-31	Undefined	Reserved (unmodified)	Reserved (unmodified)	Reserved (unmodified)
.TE

.PP
Table 6\-7\&. SMX Reporting Parameters
Format

.TS
allbox;
l l l 
l l l .
\fB\fCBit\fR	\fB\fCDefinition\fR	\fB\fCDescription\fR
5	Processor based S\-CRTM support	T{
Returns 1 if this processor implements a processor\-rooted S\-CRTM capability and 0 if not (SCRTM is rooted in BIOS). This flag cannot be used to infer whether the chipset supports TXT or whether the processor support SMX.
T}
6	Machine Check Handling	T{
Returns 1 if it machine check status registers can be preserved through ENTERACCS and SENTER. If this bit is 1, the caller of ENTERACCS and SENTER is not required to clear machine check error status bits before invoking these GETSEC leaves. If this bit returns 0, the caller of ENTERACCS and SENTER must clear all machine check error status bits before invoking these GETSEC leaves.
T}
31:7	Reserved	T{
Reserved for future use. Will return 0.
T}
.TE

.PP
Table 6\-8\&. TXT Feature Extensions
Flags

.PP
Supported AC module versions (as defined by the AC module HeaderVersion
field) can be determined for a particular SMX capable processor by the
type 1 parameter. Using EBX to index through the available parameters
reported by GETSEC[PARAMETERS] for each unique parameter set returned
for type 1, software can determine the complete list of AC module
version(s) supported.

.PP
For each parameter set, EBX returns the comparison mask and ECX returns
the available HeaderVersion field values supported, after AND'ing the
target HeaderVersion with the comparison mask. Software can then
determine if a particular AC module version is supported by following
the pseudo\-code search routine given below:

.PP
parameter\_search\_index= 0 do { EBX= parameter\_search\_index++ EAX= 6
GETSEC if (EAX[4:0] = 1) { if ((version\_query \& EBX) = ECX) {
version\_is\_supported= 1 break } }

.PP
} while (EAX[4:0] ≠ 0)

.PP
If only AC modules with a HeaderVersion of 0 are supported by the
processor, then only one parameter set of type 1 will be returned, as
follows: EAX = 00000001H,

.PP
EBX = FFFFFFFFH and ECX = 00000000H.

.PP
The maximum capacity for an authenticated code execution area supported
by the processor is reported with the parameter type of 2. The maximum
supported size in bytes is determined by multiplying the returned size
in EAX[31:5] by 32. Thus, for a maximum supported authenticated RAM
size of 32KBytes, EAX returns with 00008002H.

.PP
Supportable memory types for memory mapped outside of the authenticated
code execution area are reported with the parameter type of 3. While is
active, as initiated by the GETSEC functions SENTER and ENTERACCS and
terminated by EXITAC, there are restrictions on what memory types are
allowed for the rest of system memory. It is the responsibility of the
system software to initialize the memory type range register (MTRR) MSRs
and/or the page attribute table (PAT) to only map memory types
consistent with the reporting of this parameter. The reporting of
supportable memory types of external memory is indicated using a bit map
returned in EAX[31:8]\&. These bit positions correspond to the memory
type encodings defined for the MTRR MSR and PAT programming. See Table 6\-9\&.

.PP
The parameter type of 4 is used for enumerating the availability of
selective GETSEC[SENTER] function disable controls. If a 1 is reported
in bits 14:8 of the returned parameter EAX, then this indicates a
disable control capa\-

.PP
bility exists with SENTER for a particular function. The enumerated
field in bits 14:8 corresponds to use of the EDX input parameter bits
6:0 for SENTER. If an enumerated field bit is set to 1, then the
corresponding EDX input parameter bit of EDX may be set to 1 to disable
that designated function. If the enumerated field bit is 0 or this
parameter is not reported, then no disable capability exists with the
corresponding EDX input parameter for SENTER, and EDX bit(s) must be
cleared to 0 to enable execution of SENTER. If no selective disable
capability for SENTER exists as enumerated, then the corresponding bits
in the IA32\_FEATURE\_CONTROL MSR bits 14:8 must also be programmed to 1
if the SENTER global enable bit 15 of the MSR is set. This is required
to enable future extensibility of SENTER selective disable capability
with respect to potentially separate software initialization of the MSR.

.TS
allbox;
l l 
l l .
\fB\fCEAX Bit Position\fR	\fB\fCParameter Description\fR
8	Uncacheable (UC)
9	Write Combining (WC)
11:10	Reserved
12	Write\-through (WT)
13	Write\-protected (WP)
14	Write\-back (WB)
31:15	Reserved
.TE

.PP
Table 6\-9\&. External Memory Types Using
Parameter 3

.PP
If the GETSEC[PARAMETERS] leaf or specific parameter is not present
for a given SMX capable processor, then default parameter values should
be assumed. These are defined in Table
6\-10\&.

.TS
allbox;
l l l 
l l l .
\fB\fCParameter Type EAX[4:0]\fR	\fB\fCDefault Setting\fR	\fB\fCParameter Description\fR
1	0.0 only	Supported AC module versions.
2	32 KBytes	T{
Authenticated code execution area size.
T}
3	UC only	T{
External memory types supported during AC execution mode.
T}
4	None	T{
Available SENTER selective disable controls.
T}
.TE

.PP
Table 6\-10\&. Default Parameter Values

.SH OPERATION
.PP
.RS

.nf
(* example of a processor supporting only a 0.0 HeaderVersion, 32K ACRAM size, memory types UC and WC *)
IF (CR4.SMXE=0)
    THEN #UD;
ELSE IF (in VMX non\-root operation)
    THEN VM Exit (reason=”GETSEC instruction”);
ELSE IF (GETSEC leaf unsupported)
    THEN #UD;
    (* example of a processor supporting a 0.0 HeaderVersion *)
IF (EBX=0) THEN
    EAX← 00000001h;
    EBX← FFFFFFFFh;
    ECX← 00000000h;
ELSE IF (EBX=1)
    (* example of a processor supporting a 32K ACRAM size *)
    THEN EAX← 00008002h;
ESE IF (EBX= 2)
    (* example of a processor supporting external memory types of UC and WC *)
    THEN EAX← 00000303h;
ESE IF (EBX= other value(s) less than unsupported index value)
    (* EAX value varies. Consult Table 6\-7 and Table 6\-8*)
ELSE (* unsupported index*)
    EAX ̈ 00000000h;
END;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH USE OF PREFIXES
.PP
LOCK Causes #UD.

.PP
REP* Cause #UD (includes REPNE/REPNZ and REP/REPE/REPZ).

.PP
Operand size Causes #UD.

.PP
NP 66/F2/F3 prefixes are not allowed.

.PP
Segmentoverrides Ignored.

.PP
Address size Ignored.

.PP
REX Ignored.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If CR4.SMXE = 0.
	If GETSEC
[
PARAMETERS
]
T{
 is not reported as supported by GETSEC
T}
[
CAPABILITIES
]
\&.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If CR4.SMXE = 0.
	If GETSEC
[
PARAMETERS
]
T{
 is not reported as supported by GETSEC
T}
[
CAPABILITIES
]
\&.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If CR4.SMXE = 0.
	If GETSEC
[
PARAMETERS
]
T{
 is not reported as supported by GETSEC
T}
[
CAPABILITIES
]
\&.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
All protected mode exceptions apply.

.SH 64\-BIT MODE EXCEPTIONS
.PP
All protected mode exceptions apply.

.SH VM\-EXIT CONDITION
.PP
Reason (GETSEC) IF in VMX non\-root operation.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
