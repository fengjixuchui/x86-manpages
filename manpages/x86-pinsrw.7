.nh
.TH "X86-PINSRW" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
PINSRW - INSERT WORD
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/ En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F C4 /r32/m16, imm8	A	V/V	SSE	Insert the low word from imm8.
66 0F C4 /xmm, r32/m16, imm8	A	V/V	SSE2	Move the low word of imm8.
T{
VEX.128.66.0F.W0 C4 /r ib VPINSRW xmm1, xmm2, r32/m16, imm8
T}
	B	V2/V	AVX	T{
Insert a word integer value from imm8.
T}
T{
EVEX.128.66.0F.WIG C4 /r ib VPINSRW xmm1, xmm2, r32/m16, imm8
T}
	C	V/V	AVX512BW	T{
Insert a word integer value from r32/m16 and rest from xmm2 into xmm1 at the word offset in imm8.
T}
.TE

.PP
.RS

.PP
1\&. See note in Section 2.4, “AVX and SSE Instruction Exception
Specification” in the Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 3A.

.PP
2\&. In 64\-bit mode, VEX.W1 is ignored for VPINSRW (similar to legacy
REX.W=1 prefix in PINSRW).

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (w)	ModRM:r/m (r)	imm8	NA
B	NA	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	imm8
C	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	Imm8
.TE

.SH DESCRIPTION
.PP
Copies a word from the source operand (second operand) and inserts it in
the destination operand (first operand) at the location specified with
the count operand (third operand). (The other words in the destination
register are left untouched.) The source operand can be a
general\-purpose register or a 16\-bit memory location. (When the source
operand is a general\-purpose register, the low word of the register is
copied.) The destination operand can be an MMX technology register or an
XMM register. The count operand is an 8\-bit immediate. When specifying a
word location in an MMX technology register, the 2 least\-significant
bits of the count operand specify the location; for an XMM register, the
3 least\-significant bits specify the location.

.PP
In 64\-bit mode and not encoded with VEX/EVEX, using a REX prefix in the
form of REX.R permits this instruction to access additional registers
(XMM8\-XMM15, R8\-15).

.PP
128\-bit Legacy SSE version: Bits (MAXVL\-1:128) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: Bits (MAXVL\-1:128) of the destination YMM
register are zeroed. VEX.L must be 0, otherwise the instruction will
#UD.

.PP
EVEX.128 encoded version: Bits (MAXVL\-1:128) of the destination register
are zeroed. EVEX.L’L must be 0, otherwise the instruction will #UD.

.SH OPERATION
.SS PINSRW (with 64\-bit source operand)
.PP
.RS

.nf
SEL ← COUNT AND 3H;
    CASE (Determine word position) OF
        SEL←0:
            MASK ← 000000000000FFFFH;
        SEL←1:
            MASK ← 00000000FFFF0000H;
        SEL←2:
            MASK ← 0000FFFF00000000H;
        SEL←3:
            MASK ← FFFF000000000000H;
DEST ← (DEST AND NOT MASK) OR (((SRC << (SEL ∗ 16)) AND MASK);

.fi
.RE

.SS PINSRW (with 128\-bit source operand)
.PP
.RS

.nf
SEL ← COUNT AND 7H;
    CASE (Determine word position) OF
        SEL←0:
            MASK ← 0000000000000000000000000000FFFFH;
        SEL←1:
            MASK ← 000000000000000000000000FFFF0000H;
        SEL←2:
            MASK ← 00000000000000000000FFFF00000000H;
        SEL←3:
            MASK ← 0000000000000000FFFF000000000000H;
        SEL←4:
            MASK ← 000000000000FFFF0000000000000000H;
        SEL←5:
            MASK ← 00000000FFFF00000000000000000000H;
        SEL←6:
            MASK ← 0000FFFF000000000000000000000000H;
        SEL←7:
            MASK ← FFFF0000000000000000000000000000H;
DEST ← (DEST AND NOT MASK) OR (((SRC << (SEL ∗ 16)) AND MASK);

.fi
.RE

.SS VPINSRW (VEX/EVEX encoded version)
.PP
.RS

.nf
SEL ← imm8[2:0]
DEST[127:0]←write\_w\_element(SEL, SRC2, SRC1)
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
PINSRW: \_\_m64 \_mm\_insert\_pi16 (\_\_m64 a, int d, int n)

PINSRW: \_\_m128i \_mm\_insert\_epi16 ( \_\_m128i a, int b, int imm)

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH NUMERIC EXCEPTIONS
.PP
None.

.SH OTHER EXCEPTIONS
.PP
EVEX\-encoded instruction, see Exceptions Type 5;

.PP
EVEX\-encoded instruction, see Exceptions Type E9NF.

.TS
allbox;
l l 
l l .
#UD	If VEX.L = 1 or EVEX.L’L 
\&gt;
 0.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
