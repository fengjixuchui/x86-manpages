.nh
.TH "X86-VDBPSADBW" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VDBPSADBW - DOUBLE BLOCK PACKED SUM-ABSOLUTE-DIFFERENCES (SAD) ON UNSIGNED BYTES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.128.66.0F3A.W0 42 /r ib VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8
T}
	A	V/V	AVX512VL AVX512BW	T{
Compute packed SAD word results of unsigned bytes in dword block from xmm2 with unsigned bytes of dword blocks transformed from xmm3/m128 using the shuffle controls in imm8. Results are written to xmm1 under the writemask k1.
T}
T{
EVEX.256.66.0F3A.W0 42 /r ib VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8
T}
	A	V/V	AVX512VL AVX512BW	T{
Compute packed SAD word results of unsigned bytes in dword block from ymm2 with unsigned bytes of dword blocks transformed from ymm3/m256 using the shuffle controls in imm8. Results are written to ymm1 under the writemask k1.
T}
T{
EVEX.512.66.0F3A.W0 42 /r ib VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8
T}
	A	V/V	AVX512BW	T{
Compute packed SAD word results of unsigned bytes in dword block from zmm2 with unsigned bytes of dword blocks transformed from zmm3/m512 using the shuffle controls in imm8. Results are written to zmm1 under the writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Full Mem	ModRM:reg (w)	EVEX.vvvv	ModRM:r/m (r)	Imm8
.TE

.SS Description
.PP
Compute packed SAD (sum of absolute differences) word results of
unsigned bytes from two 32\-bit dword elements. Packed SAD word results
are calculated in multiples of qword superblocks, producing 4 SAD word
results in each 64\-bit superblock of the destination register.

.PP
Within each super block of packed word results, the SAD results from two
32\-bit dword elements are calculated as follows:

.RS
.IP \(bu 2
The lower two word results are calculated each from the SAD
operation between a sliding dword element within a qword superblock
from an intermediate vector with a stationary dword element in the
corresponding qword superblock of the first source operand. The
intermediate vector, see “Tmp1” in Figure 5\-8, is constructed from
the second source operand the imm8 byte as shuffle control to select
dword elements within a 128\-bit lane of the second source operand.
The two sliding dword elements in a qword superblock of Tmp1 are
located at byte offset 0 and 1 within the superblock, respectively.
The stationary dword element in the qword superblock from the first
source operand is located at byte offset 0.
.IP \(bu 2
The next two word results are calculated each from the SAD operation
between a sliding dword element within a qword superblock from the
intermediate vector Tmp1 with a second stationary dword element in
the corresponding qword superblock of the first source operand. The
two sliding dword elements in a qword superblock of Tmp1 are located
at byte offset 2and 3 within the superblock, respectively. The
stationary dword element in the qword superblock from the first
source operand is located at byte offset 4.
.IP \(bu 2
The intermediate vector is constructed in 128\-bits lanes. Within
each 128\-bit lane, each dword element of the intermediate vector is
selected by a two\-bit field within the imm8 byte on the
corresponding 128\-bits of the second source operand. The imm8 byte
serves as dword shuffle control within each 128\-bit lanes of the
intermediate vector and the second source operand, similarly to
PSHUFD.

.RE

.PP
The first source operand is a ZMM/YMM/XMM register. The second source
operand is a ZMM/YMM/XMM register, or a 512/256/128\-bit memory location.
The destination operand is conditionally updated based on writemask k1
at 16\-bit word granularity.

.PP
127+128*n95+128*n63+128*n31+128*n128*n128\-bit Lane of
Src2DW0DW3DW1DW200B: DW001B: DW110B: DW2imm8 shuffle control11B:
DW375310127+128*n95+128*n63+128*n31+128*n128*n128\-bit Lane of
Tmp1Tmp1 qword superblock39 31 23 15 855 47 39 31 24Tmp1 sliding
dwordTmp1 sliding dword3106332\_\_ \_ \_\_\_ \_ \_Src1 stationary dword
0Src1 stationary dword 1abs abs abs absabs abs abs abs++47 39 31 23 1631
23 15 7 0Tmp1 sliding dwordTmp1 sliding dword6332310237Src1 stationary
dword 1Src1 stationary dword 0\_\_\_\_\_\_\_\_abs abs abs absabs abs abs
abs+Destination qword superblock

.PP
Figure 5\-8. 64\-bit Super Block of SAD Operation in VDBPSADBW

.SS Operation
.SS VDBPSADBW (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
Selection of quadruplets:
FOR I = 0 to VL step 128
    TMP1[I+31:I]←select (SRC2[I+127: I], imm8[1:0])
    TMP1[I+63: I+32]←select (SRC2[I+127: I], imm8[3:2])
    TMP1[I+95: I+64]←select (SRC2[I+127: I], imm8[5:4])
    TMP1[I+127: I+96]←select (SRC2[I+127: I], imm8[7:6])
END FOR
SAD of quadruplets:
FOR I =0 to VL step 64
    TMP\_DEST[I+15:I]←ABS(SRC1[I+7: I] \- TMP1[I+7: I]) +
        ABS(SRC1[I+15: I+8]\- TMP1[I+15: I+8]) +
        ABS(SRC1[I+23: I+16]\- TMP1[I+23: I+16]) +
        ABS(SRC1[I+31: I+24]\- TMP1[I+31: I+24])
    TMP\_DEST[I+31: I+16] ←ABS(SRC1[I+7: I] \- TMP1[I+15: I+8]) +
        ABS(SRC1[I+15: I+8]\- TMP1[I+23: I+16]) +
        ABS(SRC1[I+23: I+16]\- TMP1[I+31: I+24]) +
        ABS(SRC1[I+31: I+24]\- TMP1[I+39: I+32])
    TMP\_DEST[I+47: I+32] ←ABS(SRC1[I+39: I+32] \- TMP1[I+23: I+16]) +
        ABS(SRC1[I+47: I+40]\- TMP1[I+31: I+24]) +
        ABS(SRC1[I+55: I+48]\- TMP1[I+39: I+32]) +
        ABS(SRC1[I+63: I+56]\- TMP1[I+47: I+40])
    TMP\_DEST[I+63: I+48] ←ABS(SRC1[I+39: I+32] \- TMP1[I+31: I+24]) +
        ABS(SRC1[I+47: I+40] \- TMP1[I+39: I+32]) +
        ABS(SRC1[I+55: I+48] \- TMP1[I+47: I+40]) +
        ABS(SRC1[I+63: I+56] \- TMP1[I+55: I+48])
ENDFOR
FOR j←0 TO KL\-1
    i← j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+15:i]←TMP\_DEST[i+15:i]
        ELSE
            IF *merging\-masking*
                        ; merging\-masking
                THEN *DEST[i+15:i] remains unchanged*
                ELSE
                        ; zeroing\-masking
                    DEST[i+15:i] ← 0
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VDBPSADBW \_\_m512i \_mm512\_dbsad\_epu8(\_\_m512i a, \_\_m512i b);

VDBPSADBW \_\_m512i \_mm512\_mask\_dbsad\_epu8(\_\_m512i s, \_\_mmask32 m, \_\_m512i a, \_\_m512i b);

VDBPSADBW \_\_m512i \_mm512\_maskz\_dbsad\_epu8(\_\_mmask32 m, \_\_m512i a, \_\_m512i b);

VDBPSADBW \_\_m256i \_mm256\_dbsad\_epu8(\_\_m256i a, \_\_m256i b);

VDBPSADBW \_\_m256i \_mm256\_mask\_dbsad\_epu8(\_\_m256i s, \_\_mmask16 m, \_\_m256i a, \_\_m256i b);

VDBPSADBW \_\_m256i \_mm256\_maskz\_dbsad\_epu8(\_\_mmask16 m, \_\_m256i a, \_\_m256i b);

VDBPSADBW \_\_m128i \_mm\_dbsad\_epu8(\_\_m128i a, \_\_m128i b);

VDBPSADBW \_\_m128i \_mm\_mask\_dbsad\_epu8(\_\_m128i s, \_\_mmask8 m, \_\_m128i a, \_\_m128i b);

VDBPSADBW \_\_m128i \_mm\_maskz\_dbsad\_epu8(\_\_mmask8 m, \_\_m128i a, \_\_m128i b);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
See Exceptions Type E4NF.nb.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
