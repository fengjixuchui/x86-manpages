.nh
.TH "X86-LOCK" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
LOCK - ASSERT LOCK# SIGNAL PREFIX
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
F0	LOCK	ZO	Valid	Valid	Asserts LOCK
#
T{
 signal for duration of the accompanying instruction.
T}
.TE

.PP
.RS

.PP
* SeeIA\-32ArchitectureCompatibilitysectionbelow.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Causes the processor’s LOCK# signal to be asserted during execution of
the accompanying instruction (turns the instruction into an atomic
instruction). In a multiprocessor environment, the LOCK# signal ensures
that the processor has exclusive use of any shared memory while the
signal is asserted.

.PP
In most IA\-32 and all Intel 64 processors, locking may occur without the
LOCK# signal being asserted. See the “IA\-32 Architecture Compatibility”
section below for more details.

.PP
The LOCK prefix can be prepended only to the following instructions and
only to those forms of the instructions where the destination operand is
a memory operand: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B,
CMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG. If
the LOCK prefix is used with one of these instructions and the source
operand is a memory operand, an undefined opcode exception (#UD) may be
generated. An undefined opcode exception will also be generated if the
LOCK prefix is used with any instruction not in the above list. The XCHG
instruction always asserts the LOCK# signal regardless of the presence
or absence of the LOCK prefix.

.PP
The LOCK prefix is typically used with the BTS instruction to perform a
read\-modify\-write operation on a memory location in shared memory
environment.

.PP
The integrity of the LOCK prefix is not affected by the alignment of the
memory field. Memory locking is observed for arbitrarily misaligned
fields.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH IA\-32 ARCHITECTURE COMPATIBILITY
.PP
Beginning with the P6 family processors, when the LOCK prefix is
prefixed to an instruction and the memory area being accessed is cached
internally in the processor, the LOCK# signal is generally not
asserted. Instead, only the processor’s cache is locked. Here, the
processor’s cache coherency mechanism ensures that the operation is
carried out atomically with regards to memory. See “Effects of a Locked
Operation on Internal Processor Caches” in Chapter 8 of Intel® 64 and
IA\-32 Architectures Software Developer’s Manual, Volume 3A, the for more
information on locking of caches.

.SH OPERATION
.PP
.RS

.nf
AssertLOCK#(DurationOfAccompaningInstruction);

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
If the LOCK prefix is used with an instruction not listed: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, CMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, XCHG.
T}
	T{
Other exceptions can be generated by the instruction when the LOCK prefix is applied.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
