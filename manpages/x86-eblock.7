.nh
.TH "X86-EBLOCK" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
EBLOCK - MARK A PAGE IN EPC AS BLOCKED
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
EAX = 09H ENCLS[EBLOCK]	IR	V/V	SGX1	T{
This leaf function marks a page in the EPC as blocked.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.PP
Op/En

.PP
EAX

.PP
RCX

.PP
IR

.PP
EBLOCK (In)

.PP
Return error code (Out)

.PP
Effective address of the EPC page (In)

.SS Description
.PP
This leaf function causes an EPC page to be marked as BLOCKED. This
instruction can only be executed when current privilege level is 0.

.PP
The content of RCX is an effective address of an EPC page. The DS
segment is used to create linear address. Segment override is not
supported.

.PP
An error code is returned in RAX.

.PP
The table below provides additional information on the memory parameter
of EBLOCK leaf function.

.SH EBLOCK MEMORY PARAMETER SEMANTICS
.TS
allbox;
l 
l .
EPCPAGE
T{
Read/Write access permitted by Enclave
T}
.TE

.PP
The error codes are:

.TS
allbox;
l l 
l l .
\fB\fCError Code (see Table 40\-4)\fR	\fB\fCDescription\fR
No Error	EBLOCK successful.
SGX\_BLKSTATE	T{
Page already blocked. This value is used to indicate to a VMM that the page was already in BLOCKED state as a result of EBLOCK and thus will need to be restored to this state when it is eventually reloaded (using ELDB).
T}
SGX\_ENTRYEPOCH\_LOCKED	T{
SECS locked for Entry Epoch update. This value indicates that an ETRACK is currently executing on the SECS. The EBLOCK should be reattempted.
T}
SGX\_NOTBLOCKABLE	T{
Page type is not one which can be blocked.
T}
SGX\_PG\_INVLD	T{
Page is not valid and cannot be blocked.
T}
SGX\_EPC\_PAGE\_CONFLICT	T{
Page is being written by EADD, EAUG, ECREATE, ELDU/B, EMODT, or EWB.
T}
.TE

.PP
Table 40\-12\&. EBLOCK Return Value in
RAX

.SS Concurrency Restrictions
.PP
Leaf

.PP
Parameter

.PP
Base Concurrency Restrictions

.PP
Access

.PP
On Conflict

.PP
SGX\_CONFLICT VM Exit Qualification

.PP
EBLOCK

.PP
Target [DS:RCX]

.PP
Shared

.PP
SGX\_EPC\_PAGE\_ CONFLICT

.PP
Table 40\-13\&. Base Concurrency
Restrictions of EBLOCK

.PP
Leaf

.PP
Parameter

.PP
Additional Concurrency Restrictions

.PP
vs. EACCEPT, EACCEPTCOPY, EMODPE, EMODPR, EMODT

.PP
vs. EADD, EEXTEND, EINIT

.PP
vs. ETRACK, ETRACKC

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
EBLOCK

.PP
Target [DS:RCX]

.PP
Concurrent

.PP
Concurrent

.PP
Concurrent

.PP
Table 40\-14\&. Additional Concurrency
Restrictions of EBLOCK

.SS Operation
.SH TEMP VARIABLES IN EBLOCK OPERATIONAL FLOW
.TS
allbox;
l l l l 
l l l l .
Name	Type	Size (Bits)	Description
TMP\_BLKSTATE	Integer	64	Page is already blocked.
.TE

.PP
IF (DS:RCX is not 4KByte Aligned)

.PP
THEN #GP(0); FI;

.PP
IF (DS:RCX does not resolve within an EPC)

.PP
THEN #PF(DS:RCX); FI;

.PP
RFLAGS.ZF,CF,PF,AF,OF,SF ← 0;

.PP
RAX← 0;

.PP
(* Check the EPC page for concurrency*)

.PP
IF (EPC page in use)

.PP
THEN

.PP
RFLAGS.ZF ← 1;

.PP
RAX← SGX\_EPC\_PAGE\_CONFLICT;

.PP
GOTO DONE;

.PP
FI;

.PP
IF (EPCM(DS:RCX). VALID = 0)

.PP
THEN

.PP
RFLAGS.ZF ← 1;

.PP
RAX← SGX\_PG\_INVLD;

.PP
GOTO DONE;

.PP
FI;

.PP
IF ( (EPCM(DS:RCX).PT ≠ PT\_REG) and (EPCM(DS:RCX).PT ≠ PT\_TCS) and
(EPCM(DS:RCX).PT ≠ PT\_TRIM) )

.PP
THEN

.PP
RFLAGS.CF ← 1;

.PP
IF (EPCM(DS:RCX).PT = PT\_SECS)

.PP
THEN RAX←SGX\_PG\_IS\_SECS;

.PP
ELSE RAX←SGX\_NOTBLOCKABLE;

.PP
FI;

.PP
GOTO DONE;

.PP
FI;

.PP
(* Check if the page is already blocked and report blocked state *)

.PP
TMP\_BLKSTATE ← EPCM(DS:RCX).BLOCKED;

.PP
(* at this point, the page must be valid and PT\_TCS or PT\_REG or
PT\_TRIM*)

.PP
IF (TMP\_BLKSTATE = 1)

.PP
THEN

.PP
RFLAGS.CF ← 1;

.PP
RAX← SGX\_BLKSTATE;

.PP
ELSE

.PP
EPCM(DS:RCX).BLOCKED ← 1

.PP
FI;

.PP
DONE:

.SS Flags Affected
.PP
Sets ZF if SECS is in use or invalid, otherwise cleared. Sets CF if page
is BLOCKED or not blockable, otherwise cleared. Clears PF, AF, OF, SF.

.SS Protected Mode Exceptions
.PP
#GP(0)

.PP
If a memory operand effective address is outside the DS segment limit.

.PP
If a memory operand is not properly aligned.

.PP
If the specified EPC resource is in use.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.PP
If a memory operand is not an EPC page.

.SS 64\-Bit Mode Exceptions
.PP
#GP(0)

.PP
If a memory operand is non\-canonical form.

.PP
If a memory operand is not properly aligned.

.PP
If the specified EPC resource is in use.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.PP
If a memory operand is not an EPC page.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
