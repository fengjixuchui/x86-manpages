.nh
.TH "X86-EACCEPTCOPY" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
EACCEPTCOPY - INITIALIZE A PENDING PAGE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
EAX = 07H ENCLU[EACCEPTCOPY]	IR	V/V	SGX2	T{
This leaf function initializes a dynamically allocated EPC page from another page in the EPC.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.PP
Op/En

.PP
EAX

.PP
RBX

.PP
RCX

.PP
RDX

.PP
IR

.PP
EACCEPTCOPY (In)

.PP
Return Error Code (Out)

.PP
Address of a SECINFO (In)

.PP
Address of the destination EPC page (In)

.PP
Address of the source EPC page (In)

.SS Description
.PP
This leaf function copies the contents of an existing EPC page into an
uninitialized EPC page (created by EAUG). After initialization, the
instruction may also modify the access rights associated with the
destination EPC page. This instruction leaf can only be executed when
inside the enclave.

.PP
RBX contains the effective address of a SECINFO structure while RCX and
RDX each contain the effective address of an EPC page. The table below
provides additional information on the memory parameter of the
EACCEPTCOPY leaf function.

.SH EACCEPTCOPY MEMORY PARAMETER SEMANTICS
.TS
allbox;
l l l 
l l l .
SECINFO	EPCPAGE (Destination)	EPCPAGE (Source)
T{
Read access permitted by Non Enclave
T}
	T{
Read/Write access permitted by Enclave
T}
	T{
Read access permitted by Enclave
T}
.TE

.PP
The instruction faults if any of the following:

.SH EACCEPTCOPY FAULTING CONDITIONS
.TS
allbox;
l l 
l l .
T{
The operands are not properly aligned.
T}
	T{
If security attributes of the SECINFO page make the page inaccessible.
T}
T{
The EPC page is locked by another thread.
T}
	T{
If security attributes of the source EPC page make the page inaccessible.
T}
The EPC page is not valid.	T{
RBX does not contain an effective address in an EPC page in the running enclave.
T}
T{
SECINFO contains an invalid request.
T}
	T{
RCX/RDX does not contain an effective address of an EPC page in the running enclave.
T}
.TE

.PP
The error codes are:

.TS
allbox;
l l 
l l .
\fB\fCError Code (see Table 40\-4)\fR	\fB\fCDescription\fR
No Error	EACCEPTCOPY successful.
SGX\_PAGE\_ATTRIBUTES\_MISMATCH	T{
The attributes of the target EPC page do not match the expected values.
T}
.TE

.PP
Table 40\-57\&. EACCEPTCOPY Return Value
in RAX

.SS Concurrency Restrictions
.PP
Leaf

.PP
Parameter

.PP
Base Concurrency Restrictions

.PP
Access

.PP
On Conflict

.PP
SGX\_CONFLICT VM Exit Qualification

.PP
EACCEPTCOPY

.PP
Target [DS:RCX]

.PP
Concurrent

.PP
Source [DS:RDX]

.PP
Concurrent

.PP
SECINFO [DS:RBX]

.PP
Concurrent

.PP
Table 40\-58\&. Base Concurrency
Restrictions of EACCEPTCOPY

.PP
Leaf

.PP
Parameter

.PP
Additional Concurrency Restrictions

.PP
vs. EACCEPT, EACCEPTCOPY, EMODPE, EMODPR, EMODT

.PP
vs. EADD, EEXTEND, EINIT

.PP
vs. ETRACK, ETRACKC

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
EACCEPTCOPY

.PP
Target [DS:RCX]

.PP
Exclusive

.PP
#GP

.PP
Concurrent

.PP
Concurrent

.PP
Source [DS:RDX]

.PP
Concurrent

.PP
Concurrent

.PP
Concurrent

.PP
SECINFO [DS:RBX]

.PP
Concurrent

.PP
Concurrent

.PP
Concurrent

.PP
Table 40\-59\&. Additional Concurrency
Restrictions of EACCEPTCOPY

.SS Operation
.SH TEMP VARIABLES IN EACCEPTCOPY OPERATIONAL FLOW
.TS
allbox;
l l l l 
l l l l .
\fB\fCName\fR	\fB\fCType\fR	\fB\fCSize (bits)\fR	\fB\fCDescription\fR
SCRATCH\_SECINFO	SECINFO	512	T{
Scratch storage for holding the contents of DS:RBX.
T}
.TE

.PP
IF (DS:RBX is not 64Byte Aligned)

.PP
THEN #GP(0); FI;

.PP
IF ( (DS:RCX is not 4KByte Aligned) or (DS:RDX is not 4KByte Aligned) )

.PP
THEN #GP(0); FI;

.PP
IF ((DS:RBX is not within CR\_ELRANGE) or (DS:RCX is not within
CR\_ELRANGE) or (DS:RDX is not within CR\_ELRANGE))

.PP
THEN #GP(0); FI;

.PP
IF (DS:RBX does not resolve within an EPC)

.PP
THEN #PF(DS:RBX); FI;

.PP
IF (DS:RCX does not resolve within an EPC)

.PP
THEN #PF(DS:RCX); FI;

.PP
IF (DS:RDX does not resolve within an EPC)

.PP
THEN #PF(DS:RDX); FI;

.PP
IF ( (EPCM(DS:RBX \&\~FFFH).VALID = 0) or (EPCM(DS:RBX \&\~FFFH).R = 0) or
(EPCM(DS:RBX \&\~FFFH).PENDING ≠ 0) or

.PP
(EPCM(DS:RBX \&\~FFFH).MODIFIED ≠ 0) or (EPCM(DS:RBX \&\~FFFH).BLOCKED ≠ 0)
or (EPCM(DS:RBX \&\~FFFH).PT ≠ PT\_REG) or

.PP
(EPCM(DS:RBX \&\~FFFH).ENCLAVESECS ≠ CR\_ACTIVE\_SECS) or

.PP
(EPCM(DS:RBX \&\~FFFH).ENCLAVEADDRESS ≠ DS:RBX) )

.PP
THEN #PF(DS:RBX); FI;

.PP
(* Copy 64 bytes of contents *)

.PP
SCRATCH\_SECINFO ← DS:RBX;

.PP
(* Check for misconfigured SECINFO flags*)

.PP
IF ( (SCRATCH\_SECINFO reserved fields are not zero ) or
(SCRATCH\_SECINFO.FLAGS.R=0) AND(SCRATCH\_SECINFO.FLAGS.W≠0 ) or

.PP
(SCRATCH\_SECINFO.FLAGS.PT is not PT\_REG) )

.PP
THEN #GP(0); FI;

.PP
(* Check security attributes of the source EPC page *)

.PP
IF ( (EPCM(DS:RDX).VALID = 0) or (EPCM(DS:RCX).R = 0) or
(EPCM(DS:RDX).PENDING ≠ 0) or (EPCM(DS:RDX).MODIFIED ≠ 0) or

.PP
(EPCM(DS:RDX).BLOCKED ≠ 0) or (EPCM(DS:RDX).PT ≠ PT\_REG) or
(EPCM(DS:RDX).ENCLAVESECS ≠ CR\_ACTIVE\_SECS) or

.PP
(EPCM(DS:RDX).ENCLAVEADDRESS ≠ DS:RDX))

.PP
THEN #PF(DS:RDX); FI;

.PP
(* Check security attributes of the destination EPC page *)

.PP
IF ( (EPCM(DS:RCX).VALID = 0) or (EPCM(DS:RCX).PENDING ≠ 1) or
(EPCM(DS:RCX).MODIFIED ≠ 0) or

.PP
(EPCM(DS:RDX).BLOCKED ≠ 0) or (EPCM(DS:RCX).PT ≠ PT\_REG) or
(EPCM(DS:RCX).ENCLAVESECS ≠ CR\_ACTIVE\_SECS) )

.PP
THEN

.PP
RFLAGS.ZF ← 1;

.PP
RAX ← SGX\_PAGE\_ATTRIBUTES\_MISMATCH;

.PP
GOTO DONE;

.PP
FI;

.PP
(* Check the destination EPC page for concurrency *)

.PP
IF (destination EPC page in use )

.PP
THEN #GP(0); FI;

.PP
(* Re\-Check security attributes of the destination EPC page *)

.PP
IF ( (EPCM(DS:RCX).VALID = 0) or (EPCM(DS:RCX).PENDING ≠ 1) or
(EPCM(DS:RCX).MODIFIED ≠ 0) or

.PP
(EPCM(DS:RCX).R ≠ 1) or (EPCM(DS:RCX).W ≠ 1) or (EPCM(DS:RCX).X ≠ 0) or

.PP
(EPCM(DS:RCX).PT ≠ SCRATCH\_SECINFO.FLAGS.PT) or
(EPCM(DS:RCX).ENCLAVESECS ≠ CR\_ACTIVE\_SECS) or

.PP
(EPCM(DS:RCX).ENCLAVEADDRESS ≠ DS:RCX))

.PP
THEN

.PP
RFLAGS.ZF ← 1;

.PP
RAX ← SGX\_PAGE\_ATTRIBUTES\_MISMATCH;

.PP
GOTO DONE;

.PP
FI;

.PP
(* Copy 4KBbytes form the source to destination EPC page*)

.PP
DS:RCX[32767:0] ← DS:RDX[32767:0];

.PP
(* Update EPCM permissions *)

.PP
EPCM(DS:RCX).R ← SCRATCH\_SECINFO.FLAGS.R;

.PP
EPCM(DS:RCX).W ← SCRATCH\_SECINFO.FLAGS.W;

.PP
EPCM(DS:RCX).X ← SCRATCH\_SECINFO.FLAGS.X;

.PP
EPCM(DS:RCX).PENDING ← 0;

.PP
RFLAGS.ZF ← 0;

.PP
RAX←0;

.PP
DONE:

.PP
RFLAGS.CF,PF,AF,OF,SF ← 0;

.SS Flags Affected
.PP
Sets ZF if page is not modifiable, otherwise cleared. Clears CF, PF, AF,
OF, SF

.SS Protected Mode Exceptions
.PP
#GP(0)

.PP
If executed outside an enclave.

.PP
If a memory operand effective address is outside the DS segment limit.

.PP
If a memory operand is not properly aligned.

.PP
If a memory operand is locked.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.PP
If a memory operand is not an EPC page.

.PP
If EPC page has incorrect page type or security attributes.

.SS 64\-Bit Mode Exceptions
.PP
#GP(0)

.PP
If executed outside an enclave.

.PP
If a memory operand is non\-canonical form.

.PP
If a memory operand is not properly aligned.

.PP
If a memory operand is locked.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.PP
If a memory operand is not an EPC page.

.PP
If EPC page has incorrect page type or security attributes.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
