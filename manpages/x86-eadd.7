.nh
.TH "X86-EADD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
EADD - ADD A PAGE TO AN UNINITIALIZED ENCLAVE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
EAX = 01H ENCLS[EADD]	IR	V/V	SGX1	T{
This leaf function adds a page to an uninitialized enclave.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
Op/En	EAX	RBX	RCX
IR	EADD (In)	Address of a PAGEINFO (In)	T{
Address of the destination EPC page (In)
T}
.TE

.SS Description
.PP
This leaf function copies a source page from non\-enclave memory into the
EPC, associates the EPC page with an SECS page residing in the EPC, and
stores the linear address and security attributes in EPCM. As part of
the association, the enclave offset and the security attributes are
measured and extended into the SECS.MRENCLAVE. This instruction can only
be executed when current privilege level is 0.

.PP
RBX contains the effective address of a PAGEINFO structure while RCX
contains the effective address of an EPC page. The table below provides
additional information on the memory parameter of EADD leaf function.

.SH EADD MEMORY PARAMETER SEMANTICS
.TS
allbox;
l l l l l 
l l l l l .
PAGEINFO	PAGEINFO.SECS	PAGEINFO.SRCPGE	PAGEINFO.SECINFO	EPCPAGE
T{
Read access permitted by Non Enclave
T}
	T{
Read/Write access permitted by Enclave
T}
	T{
Read access permitted by Non Enclave
T}
	T{
Read access permitted by Non Enclave
T}
	T{
Write access permitted by Enclave
T}
.TE

.PP
The instruction faults if any of the following:

.SH EADD FAULTING CONDITIONS
.TS
allbox;
l l 
l l .
T{
The operands are not properly aligned.
T}
	T{
Unsupported security attributes are set.
T}
Refers to an invalid SECS.	T{
Reference is made to an SECS that is locked by another thread.
T}
T{
The EPC page is locked by another thread.
T}
	T{
RCX does not contain an effective address of an EPC page.
T}
The EPC page is already valid.	T{
If security attributes specifies a TCS and the source page specifies unsupported TCS values or fields.
T}
The SECS has been initialized.	T{
The specified enclave offset is outside of the enclave address space.
T}
.TE

.SS Concurrency Restrictions
.PP
Leaf

.PP
Parameter

.PP
Base Concurrency Restrictions

.PP
Access

.PP
On Conflict

.PP
SGX\_CONFLICT VM Exit Qualification

.PP
EADD

.PP
Target [DS:RCX]

.PP
Exclusive

.PP
#GP

.PP
EPC\_PAGE\_CONFLICT\_EXCEPTION

.PP
SECS [DS:RBX]PAGEINFO.SECS

.PP
Shared

.PP
#GP

.PP
Table 40\-8\&. Base Concurrency
Restrictions of EADD

.PP
Leaf

.PP
Parameter

.PP
Additional Concurrency Restrictions

.PP
vs. EACCEPT, EACCEPTCOPY, EMODPE, EMODPR, EMODT

.PP
vs. EADD, EEXTEND, EINIT

.PP
vs. ETRACK, ETRACKC

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
EADD

.PP
Target [DS:RCX]

.PP
Concurrent

.PP
Concurrent

.PP
Concurrent

.PP
SECS [DS:RBX]PAGEINFO.SECS

.PP
Concurrent

.PP
Exclusive

.PP
#GP

.PP
Concurrent

.PP
Table 40\-9\&. Additional Concurrency
Restrictions of EADD

.SS Operation
.SH TEMP VARIABLES IN EADD OPERATIONAL FLOW
.TS
allbox;
l l l l 
l l l l .
\fB\fCName\fR	\fB\fCType\fR	\fB\fCSize (bits)\fR	\fB\fCDescription\fR
TMP\_SRCPGE	Effective Address	32/64	T{
Effective address of the source page.
T}
TMP\_SECS	Effective Address	32/64	T{
Effective address of the SECS destination page.
T}
TMP\_SECINFO	Effective Address	32/64	T{
Effective address of an SECINFO structure which contains security attributes of the page to be added.
T}
SCRATCH\_SECINFO	SECINFO	512	T{
Scratch storage for holding the contents of DS:TMP
T}
\_
SECINFO.
TMP\_LINADDR	Unsigned Integer	64	T{
Holds the linear address to be stored in the EPCM and used to calculate TMP
T}
\_
ENCLAVEOFFSET.
TMP\_ENCLAVEOFFSET	Enclave Offset	64	T{
The page displacement from the enclave base address.
T}
TMPUPDATEFIELD	SHA256 Buffer	512	T{
Buffer used to hold data being added to TMP
T}
\_
SECS.MRENCLAVE.
.TE

.PP
IF (DS:RBX is not 32Byte Aligned)

.PP
THEN #GP(0); FI;

.PP
IF (DS:RCX is not 4KByte Aligned)

.PP
THEN #GP(0); FI;

.PP
IF (DS:RCX does not resolve within an EPC)

.PP
THEN #PF(DS:RCX); FI;

.PP
TMP\_SRCPGE ← DS:RBX.SRCPGE;

.PP
TMP\_SECS ← DS:RBX.SECS;

.PP
TMP\_SECINFO ← DS:RBX.SECINFO;

.PP
TMP\_LINADDR ← DS:RBX.LINADDR;

.PP
IF (DS:TMP\_SRCPGE is not 4KByte aligned or DS:TMP\_SECS is not 4KByte
aligned or

.PP
DS:TMP\_SECINFO is not 64Byte aligned or TMP\_LINADDR is not 4KByte
aligned)

.PP
THEN #GP(0); FI;

.PP
IF (DS:TMP\_SECS does not resolve within an EPC)

.PP
THEN #PF(DS:TMP\_SECS); FI;

.PP
SCRATCH\_SECINFO ← DS:TMP\_SECINFO;

.PP
(* Check for misconfigured SECINFO flags*)

.PP
IF (SCRATCH\_SECINFO reserved fields are not zero or

.PP
! (SCRATCH\_SECINFO.FLAGS.PT is PT\_REG or SCRATCH\_SECINFO.FLAGS.PT is
PT\_TCS) )

.PP
THEN #GP(0); FI;

.PP
(* Check the EPC page for concurrency *)

.PP
IF (EPC page is not available for EADD)

.PP
THEN

.PP
IF (\&lt;\&lt;VMX non\-root operation\&gt;\&gt; AND
\&lt;\&lt;ENABLE\_EPC\_VIRTUALIZATION\_EXTENSIONS\&gt;\&gt;)

.PP
THEN

.PP
VMCS.Exit\_reason ← SGX\_CONFLICT;

.PP
VMCS.Exit\_qualification.code ← EPC\_PAGE\_CONFLICT\_EXCEPTION;

.PP
VMCS.Exit\_qualification.error ← 0;

.PP
VMCS.Guest\-physical\_address←\&lt;\&lt; translation of DS:RCX produced by
paging \&gt;\&gt;;

.PP
VMCS.Guest\-linear\_address ← DS:RCX;

.PP
Deliver VMEXIT;

.PP
ELSE

.PP
#GP(0);

.PP
FI;

.PP
FI;

.PP
IF (EPCM(DS:RCX).VALID ≠ 0)

.PP
THEN #PF(DS:RCX); FI;

.PP
(* Check the SECS for concurrency *)

.PP
IF (SECS is not available for EADD)

.PP
THEN #GP(0); FI;

.PP
IF (EPCM(DS:TMP\_SECS).VALID = 0 or EPCM(DS:TMP\_SECS).PT ≠ PT\_SECS)

.PP
THEN #PF(DS:TMP\_SECS); FI;

.PP
(* Copy 4KBytes from source page to EPC page*)

.PP
DS:RCX[32767:0] ← DS:TMP\_SRCPGE[32767:0];

.PP
CASE (SCRATCH\_SECINFO.FLAGS.PT)

.PP
PT\_TCS:

.PP
IF (DS:RCX.RESERVED ≠ 0) #GP(0); FI;

.PP
IF ( (DS:TMP\_SECS.ATTRIBUTES.MODE64BIT = 0) and

.PP
((DS:TCS.FSLIMIT \& 0FFFH ≠ 0FFFH) or (DS:TCS.GSLIMIT \& 0FFFH ≠ 0FFFH) ))
#GP(0); FI;

.PP
BREAK;

.PP
PT\_REG:

.PP
IF (SCRATCH\_SECINFO.FLAGS.W = 1 and SCRATCH\_SECINFO.FLAGS.R = 0)
#GP(0); FI;

.PP
BREAK;

.PP
ESAC;

.PP
(* Check the enclave offset is within the enclave linear address space
*) IF (TMP\_LINADDR \&lt; DS:TMP\_SECS.BASEADDR or TMP\_LINADDR ≥
DS:TMP\_SECS.BASEADDR + DS:TMP\_SECS.SIZE) THEN #GP(0); FI;

.PP
(* Check concurrency of measurement resource*)

.PP
IF (Measurement being updated)

.PP
THEN #GP(0); FI;

.PP
(* Check if the enclave to which the page will be added is already in
Initialized state *)

.PP
IF (DS:TMP\_SECS already initialized)

.PP
THEN #GP(0); FI;

.PP
(* For TCS pages, force EPCM.rwx bits to 0 and no debug access *)

.PP
IF (SCRATCH\_SECINFO.FLAGS.PT = PT\_TCS)

.PP
THEN

.PP
SCRATCH\_SECINFO.FLAGS.R ← 0;

.PP
SCRATCH\_SECINFO.FLAGS.W ← 0;

.PP
SCRATCH\_SECINFO.FLAGS.X ← 0;

.PP
(DS:RCX).FLAGS.DBGOPTIN←0; // force TCS.FLAGS.DBGOPTIN off

.PP
DS:RCX.CSSA ← 0;

.PP
DS:RCX.AEP ← 0;

.PP
DS:RCX.STATE ← 0;

.PP
FI;

.PP
(* Add enclave offset and security attributes to MRENCLAVE *)

.PP
TMP\_ENCLAVEOFFSET←TMP\_LINADDR \- DS:TMP\_SECS.BASEADDR;

.PP
TMPUPDATEFIELD[63:0]←0000000044444145H; // “EADD”

.PP
TMPUPDATEFIELD[127:64] ← TMP\_ENCLAVEOFFSET;

.PP
TMPUPDATEFIELD[511:128]←SCRATCH\_SECINFO[375:0]; // 48 bytes

.PP
DS:TMP\_SECS.MRENCLAVE←SHA256UPDATE(DS:TMP\_SECS.MRENCLAVE,
TMPUPDATEFIELD)

.PP
INC enclave’s MRENCLAVE update counter;

.PP
(* Add enclave offset and security attributes to MRENCLAVE *)

.PP
EPCM(DS:RCX).R ← SCRATCH\_SECINFO.FLAGS.R;

.PP
EPCM(DS:RCX).W ← SCRATCH\_SECINFO.FLAGS.W;

.PP
EPCM(DS:RCX).X ← SCRATCH\_SECINFO.FLAGS.X;

.PP
EPCM(DS:RCX).PT ← SCRATCH\_SECINFO.FLAGS.PT;

.PP
EPCM(DS:RCX).ENCLAVEADDRESS ← TMP\_LINADDR;

.PP
(* associate the EPCPAGE with the SECS by storing the SECS identifier
of DS:TMP\_SECS *)

.PP
Update EPCM(DS:RCX) SECS identifier to reference DS:TMP\_SECS
identifier;

.PP
(* Set EPCM entry fields *)

.PP
EPCM(DS:RCX).BLOCKED ← 0;

.PP
EPCM(DS:RCX).PENDING ← 0;

.PP
EPCM(DS:RCX).MODIFIED ← 0;

.PP
EPCM(DS:RCX).VALID ← 1;

.SS Flags Affected
.PP
None

.SS Protected Mode Exceptions
.PP
#GP(0)

.PP
If a memory operand effective address is outside the DS segment limit.

.PP
If a memory operand is not properly aligned.

.PP
If an enclave memory operand is outside of the EPC.

.PP
If an enclave memory operand is the wrong type.

.PP
If a memory operand is locked.

.PP
If the enclave is initialized.

.PP
If the enclave's MRENCLAVE is locked.

.PP
If the TCS page reserved bits are set.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.PP
If the EPC page is valid.

.SS 64\-Bit Mode Exceptions
.PP
#GP(0)

.PP
If a memory operand is non\-canonical form.

.PP
If a memory operand is not properly aligned.

.PP
If an enclave memory operand is outside of the EPC.

.PP
If an enclave memory operand is the wrong type.

.PP
If a memory operand is locked.

.PP
If the enclave is initialized.

.PP
If the enclave's MRENCLAVE is locked.

.PP
If the TCS page reserved bits are set.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.PP
If the EPC page is valid.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
