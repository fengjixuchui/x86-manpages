.nh
.TH "X86-XACQUIRE-XRELEASE" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
XACQUIRE-XRELEASE - HARDWARE LOCK ELISION PREFIX HINTS
.TS
allbox;
l l l l 
l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fC64/32bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
F2 XACQUIRE	V/V	HLE1	T{
A hint used with an “XACQUIRE\-enabled“ instruction to start lock elision on the instruction memory operand address.
T}
F3 XRELEASE	V/V	HLE	T{
A hint used with an “XRELEASE\-enabled“ instruction to end lock elision on the instruction memory operand address.
T}
.TE

.PP
.RS

.PP
1\&. Software is not required to check the HLE feature flag to use
XACQUIRE or XRELEASE, as they are treated as regular prefix if HLE
feature flag reports 0.

.RE

.SH DESCRIPTION
.PP
The XACQUIRE prefix is a hint to start lock elision on the memory
address specified by the instruction and the XRELEASE prefix is a hint
to end lock elision on the memory address specified by the instruction.

.PP
The XACQUIRE prefix hint can only be used with the following
instructions (these instructions are also referred to as
XACQUIRE\-enabled when used with the XACQUIRE prefix):

.RS
.IP \(bu 2
Instructions with an explicit LOCK prefix (F0H) prepended to forms
of the instruction where the destination operand is a memory
operand: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCHG8B, DEC, INC,
NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG.
.IP \(bu 2
The XCHG instruction either with or without the presence of the LOCK
prefix.

.RE

.PP
The XRELEASE prefix hint can only be used with the following
instructions (also referred to as XRELEASE\-enabled when used with the
XRELEASE prefix):

.RS
.IP \(bu 2
Instructions with an explicit LOCK prefix (F0H) prepended to forms
of the instruction where the destination operand is a memory
operand: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCHG8B, DEC, INC,
NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG.
.IP \(bu 2
The XCHG instruction either with or without the presence of the LOCK
prefix.
.IP \(bu 2
The “MOV mem, reg” (Opcode 88H/89H) and “MOV mem, imm” (Opcode
C6H/C7H) instructions. In these cases, the XRELEASE is recognized
without the presence of the LOCK prefix.

.RE

.PP
The lock variables must satisfy the guidelines described in Intel® 64
and IA\-32 Architectures Software Developer’s Manual, Volume 1, Section
16.3.3, for elision to be successful, otherwise an HLE abort may be
signaled.

.PP
If an encoded byte sequence that meets XACQUIRE/XRELEASE requirements
includes both prefixes, then the HLE semantic is determined by the
prefix byte that is placed closest to the instruction opcode. For
example, an F3F2C6 will not be treated as a XRELEASE\-enabled instruction
since the F2H (XACQUIRE) is closest to the instruction opcode C6.
Similarly, an F2F3F0 prefixed instruction will be treated as a
XRELEASE\-enabled instruction since F3H (XRELEASE) is closest to the
instruction opcode.

.PP
Intel 64 and IA\-32 Compatibility

.PP
The effect of the XACQUIRE/XRELEASE prefix hint is the same in
non\-64\-bit modes and in 64\-bit mode.

.PP
For instructions that do not support the XACQUIRE hint, the presence of
the F2H prefix behaves the same way as prior hardware, according to

.RS
.IP \(bu 2
REPNE/REPNZ semantics for string instructions,
.IP \(bu 2
Serve as SIMD prefix for legacy SIMD instructions operating on XMM
register
.IP \(bu 2
Cause #UD if prepending the VEX prefix.
.IP \(bu 2
Undefined for non\-string instructions or other situations.

.RE

.PP
For instructions that do not support the XRELEASE hint, the presence of
the F3H prefix behaves the same way as in prior hardware, according to

.RS
.IP \(bu 2
REP/REPE/REPZ semantics for string instructions,
.IP \(bu 2
Serve as SIMD prefix for legacy SIMD instructions operating on XMM
register
.IP \(bu 2
Cause #UD if prepending the VEX prefix.
.IP \(bu 2
Undefined for non\-string instructions or other situations.

.RE

.SH OPERATION
.SS XACQUIRE
.PP
.RS

.nf
IF XACQUIRE\-enabled instruction
    THEN
        IF (HLE\_NEST\_COUNT < MAX\_HLE\_NEST\_COUNT) THEN
            HLE\_NEST\_COUNT++
            IF (HLE\_NEST\_COUNT = 1) THEN
                HLE\_ACTIVE ← 1
                IF 64\-bit mode
                    THEN
                        restartRIP ← instruction pointer of the XACQUIRE\-enabled instruction
                    ELSE
                        restartEIP ← instruction pointer of the XACQUIRE\-enabled instruction
                FI;
                Enter HLE Execution (* record register state, start tracking memory state *)
            FI; (* HLE\_NEST\_COUNT = 1*)
            IF ElisionBufferAvailable
                THEN
                    Allocate elision buffer
                    Record address and data for forwarding and commit checking
                    Perform elision
                ELSE
                    Perform lock acquire operation transactionally but without elision
            FI;
        ELSE (* HLE\_NEST\_COUNT = MAX\_HLE\_NEST\_COUNT *)
                GOTO HLE\_ABORT\_PROCESSING
        FI;
    ELSE
        Treat instruction as non\-XACQUIRE F2H prefixed legacy instruction
FI;

.fi
.RE

.SS XRELEASE
.PP
.RS

.nf
IF XRELEASE\-enabled instruction
    THEN
        IF (HLE\_NEST\_COUNT > 0)
            THEN
                HLE\_NEST\_COUNT\-\-
                IF lock address matches in elision buffer THEN
                    IF lock satisfies address and value requirements THEN
                        Deallocate elision buffer
                    ELSE
                        GOTO HLE\_ABORT\_PROCESSING
                    FI;
                FI;
                IF (HLE\_NEST\_COUNT = 0)
                    THEN
                        IF NoAllocatedElisionBuffer
                            THEN
                                Try to commit transactional execution
                                IF fail to commit transactional execution
                                    THEN
                                        GOTO HLE\_ABORT\_PROCESSING;
                                    ELSE (* commit success *)
                                        HLE\_ACTIVE ← 0
                                FI;
                            ELSE
                                GOTO HLE\_ABORT\_PROCESSING
                        FI;
                FI;
        FI; (* HLE\_NEST\_COUNT > 0 *)
    ELSE
        Treat instruction as non\-XRELEASE F3H prefixed legacy instruction
FI;
(* For any HLE abort condition encountered during HLE execution *)
HLE\_ABORT\_PROCESSING:
    HLE\_ACTIVE ← 0
    HLE\_NEST\_COUNT ← 0
    Restore architectural register state
    Discard memory updates performed in transaction
    Free any allocated lock elision buffers
    IF 64\-bit mode
        THEN
            RIP ← restartRIP
        ELSE
            EIP ← restartEIP
    FI;
    Execute and retire instruction at RIP (or EIP) and ignore any HLE hint
END

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the use of prefix causes instruction length to exceed 15 bytes.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
