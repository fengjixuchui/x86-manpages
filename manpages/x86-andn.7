.nh
.TH "X86-ANDN" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ANDN - LOGICAL AND NOT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 \-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.LZ.0F38.W0 F2 /r ANDN r32a, r32b, r/m32
T}
	RVM	V/V	BMI1	T{
Bitwise AND of inverted r32b with r/m32, store result in r32a.
T}
T{
VEX.LZ. 0F38.W1 F2 /r ANDN r64a, r64b, r/m64
T}
	RVM	V/NE	BMI1	T{
Bitwise AND of inverted r64b with r/m64, store result in r64a.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RVM	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Performs a bitwise logical AND of inverted second operand (the first
source operand) with the third operand (the

.PP
second source operand). The result is stored in the first operand
(destination operand).

.PP
This instruction is not supported in real mode and virtual\-8086 mode.
The operand size is always 32 bits if not in 64\-bit mode. In 64\-bit mode
operand size 64 requires VEX.W1. VEX.W1 is ignored in non\-64\-bit modes.
An attempt to execute this instruction with VEX.L not equal to 0 will
cause #UD.

.SH OPERATION
.PP
.RS

.nf
DEST ← (NOT SRC1) bitwiseAND SRC2;
SF ← DEST[OperandSize \-1];
ZF ← (DEST = 0);

.fi
.RE

.SH FLAGS AFFECTED
.PP
SF and ZF are updated based on result. OF and CF flags are cleared. AF
and PF flags are undefined.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
Auto\-generated from high\-level language.

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 13.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
