.nh
.TH "X86-MOVLPD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
MOVLPD - MOVE LOW PACKED DOUBLE-PRECISION FLOATING-POINT VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp / En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
66 0F 12 /r MOVLPD xmm1, m64	A	V/V	SSE2	T{
Move double\-precision floating\-point value from m64 to low quadword of xmm1.
T}
T{
VEX.128.66.0F.WIG 12 /r VMOVLPD xmm2, xmm1, m64
T}
	B	V/V	AVX	T{
Merge double\-precision floating\-point value from m64 and the high quadword of xmm1.
T}
T{
EVEX.128.66.0F.W1 12 /r VMOVLPD xmm2, xmm1, m64
T}
	D	V/V	AVX512F	T{
Merge double\-precision floating\-point value from m64 and the high quadword of xmm1.
T}
66 0F 13/r MOVLPD m64, xmm1	C	V/V	SSE2	T{
Move double\-precision floating\-point value from low quadword of xmm1 to m64.
T}
T{
VEX.128.66.0F.WIG 13/r VMOVLPD m64, xmm1
T}
	C	V/V	AVX	T{
Move double\-precision floating\-point value from low quadword of xmm1 to m64.
T}
T{
EVEX.128.66.0F.W1 13/r VMOVLPD m64, xmm1
T}
	E	V/V	AVX512F	T{
Move double\-precision floating\-point value from low quadword of xmm1 to m64.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:r/m (r)	VEX.vvvv	ModRM:r/m (r)	NA
C	NA	ModRM:r/m (w)	ModRM:reg (r)	NA	NA
D	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv	ModRM:r/m (r)	NA
E	Tuple1 Scalar	ModRM:r/m (w)	ModRM:reg (r)	NA	NA
.TE

.SS Description
.PP
This instruction cannot be used for register to register or memory to
memory moves.

.PP
128\-bit Legacy SSE load:

.PP
Moves a double\-precision floating\-point value from the source 64\-bit
memory operand and stores it in the low 64\-bits of the destination XMM
register. The upper 64bits of the XMM register are preserved. Bits
(MAXVL\-1:128) of the corresponding destination register are preserved.

.PP
VEX.128 \& EVEX encoded load:

.PP
Loads a double\-precision floating\-point value from the source 64\-bit
memory operand (third operand), merges it with the upper 64\-bits of the
first source XMM register (second operand), and stores it in the low
128\-bits of the destination XMM register (first operand). Bits
(MAXVL\-1:128) of the corresponding destination register are zeroed.

.PP
128\-bit store:

.PP
Stores a double\-precision floating\-point value from the low 64\-bits of
the XMM register source (second operand) to the 64\-bit memory location
(first operand).

.PP
Note: VMOVLPD (store) (VEX.128.66.0F 13 /r) is legal and has the same
behavior as the existing 66 0F 13 store. For VMOVLPD (store) VEX.vvvv
and EVEX.vvvv are reserved and must be 1111b otherwise instruction will
#UD.

.PP
If VMOVLPD is encoded with VEX.L or EVEX.L’L= 1, an attempt to execute
the instruction encoded with VEX.L or EVEX.L’L= 1 will cause an #UD
exception.

.SS Operation
.SS MOVLPD (128\-bit Legacy SSE load)
.PP
.RS

.nf
DEST[63:0] ← SRC[63:0]
DEST[MAXVL\-1:64] (Unmodified)

.fi
.RE

.SS VMOVLPD (VEX.128 \& EVEX encoded load)
.PP
.RS

.nf
DEST[63:0] ← SRC2[63:0]
DEST[127:64] ← SRC1[127:64]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VMOVLPD (store)
.PP
.RS

.nf
DEST[63:0] ← SRC[63:0]

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
MOVLPD \_\_m128d \_mm\_loadl\_pd ( \_\_m128d a, double *p)

MOVLPD void \_mm\_storel\_pd (double *p, \_\_m128d a)

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 5; additionally

.TS
allbox;
l l 
l l .
#UD	If VEX.L = 1.
.TE

.PP
EVEX\-encoded instruction, see Exceptions Type E9NF.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
