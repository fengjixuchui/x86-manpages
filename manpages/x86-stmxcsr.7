.nh
.TH "X86-STMXCSR" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
STMXCSR - STORE MXCSR REGISTER STATE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode*/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F AE /3 STMXCSR m32	M	V/V	SSE	T{
Store contents of MXCSR register to m32.
T}
T{
VEX.LZ.0F.WIG AE /3 VSTMXCSR m32
T}
	M	V/V	AVX	T{
Store contents of MXCSR register to m32.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
M	ModRM:r/m (w)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Stores the contents of the MXCSR control and status register to the
destination operand. The destination operand is a 32\-bit memory
location. The reserved bits in the MXCSR register are stored as 0s.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.PP
VEX.L must be 0, otherwise instructions will #UD.

.PP
Note: In VEX\-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.

.SH OPERATION
.PP
.RS

.nf
m32 ← MXCSR;

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
\_mm\_getcsr(void)

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None.

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 5; additionally

.TS
allbox;
l l 
l l .
#UD	If VEX.L= 1,
	If VEX.vvvv ≠ 1111B.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
