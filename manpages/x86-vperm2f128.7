.nh
.TH "X86-VPERM2F128" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VPERM2F128 - PERMUTE FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.256.66.0F3A.W0 06 /r ib VPERM2F128 ymm1, ymm2, ymm3/m256, imm8
T}
	RVMI	V/V	AVX	T{
Permute 128\-bit floating\-point fields in ymm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RVMI	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	imm8
.TE

.SH DESCRIPTION
.PP
Permute 128 bit floating\-point\-containing fields from the first source
operand (second operand) and second source operand (third operand) using
bits in the 8\-bit immediate and store results in the destination operand
(first operand). The first source operand is a YMM register, the second
source operand is a YMM register or a 256\-bit memory location, and the
destination operand is a YMM register.

.PP
Y1Y0SRC2X1X0SRC1X0, X1, Y0, or Y1DESTX0, X1, Y0, or Y1

.PP
Figure 5\-21. VPERM2F128 Operation

.PP
Imm8[1:0] select the source for the first destination 128\-bit field,
imm8[5:4] select the source for the second destination field. If
imm8[3] is set, the low 128\-bit field is zeroed. If imm8[7] is set,
the high 128\-bit field is zeroed.

.PP
VEX.L must be 1, otherwise the instruction will #UD.

.SH OPERATION
.SS VPERM2F128
.PP
.RS

.nf
CASE IMM8[1:0] of
0: DEST[127:0]←SRC1[127:0]
1: DEST[127:0]←SRC1[255:128]
2: DEST[127:0]←SRC2[127:0]
3: DEST[127:0]←SRC2[255:128]
ESAC
CASE IMM8[5:4] of
0: DEST[255:128]←SRC1[127:0]
1: DEST[255:128]←SRC1[255:128]
2: DEST[255:128]←SRC2[127:0]
3: DEST[255:128]←SRC2[255:128]
ESAC
IF (imm8[3])
DEST[127:0] ← 0
FI
IF (imm8[7])
DEST[MAXVL\-1:128] ← 0
FI

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VPERM2F128: \_\_m256 \_mm256\_permute2f128\_ps (\_\_m256 a, \_\_m256 b, int control)

VPERM2F128: \_\_m256d \_mm256\_permute2f128\_pd (\_\_m256d a, \_\_m256d b, int control)

VPERM2F128: \_\_m256i \_mm256\_permute2f128\_si256 (\_\_m256i a, \_\_m256i b, int control)

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None.

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 6; additionally

.TS
allbox;
l l 
l l .
#UD	If VEX.L = 0
	If VEX.W = 1.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
