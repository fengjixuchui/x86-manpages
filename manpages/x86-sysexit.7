.nh
.TH "X86-SYSEXIT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
SYSEXIT - FAST RETURN FROM FAST SYSTEM CALL
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
0F 35	SYSEXIT	ZO	Valid	Valid	T{
Fast return to privilege level 3 user code.
T}
REX.W + 0F 35	SYSEXIT	ZO	Valid	Valid	T{
Fast return to 64\-bit mode privilege level 3 user code.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Executes a fast return to privilege level 3 user code. SYSEXIT is a
companion instruction to the SYSENTER instruction. The instruction is
optimized to provide the maximum performance for returns from system
procedures executing at protections levels 0 to user procedures
executing at protection level 3. It must be executed from code executing
at privilege level 0.

.PP
With a 64\-bit operand size, SYSEXIT remains in 64\-bit mode; otherwise,
it either enters compatibility mode (if the logical processor is in
IA\-32e mode) or remains in protected mode (if it is not).

.PP
Prior to executing SYSEXIT, software must specify the privilege level 3
code segment and code entry point, and the privilege level 3 stack
segment and stack pointer by writing values into the following MSR and
general\-purpose registers:

.RS
.IP \(bu 2
IA32\_SYSENTER\_CS (MSR address 174H) — Contains a 32\-bit value that
is used to determine the segment selectors for the privilege level 3
code and stack segments (see the Operation section)
.IP \(bu 2
RDX — The canonical address in this register is loaded into RIP
(thus, this value references the first instruction to be executed in
the user code). If the return is not to 64\-bit mode, only bits 31:0
are loaded.
.IP \(bu 2
ECX — The canonical address in this register is loaded into RSP
(thus, this value contains the stack pointer for the privilege level
3 stack). If the return is not to 64\-bit mode, only bits 31:0 are
loaded.

.RE

.PP
The IA32\_SYSENTER\_CS MSR can be read from and written to using RDMSR
and WRMSR.

.PP
While SYSEXIT loads the CS and SS selectors with values derived from the
IA32\_SYSENTER\_CS MSR, the CS and SS descriptor caches are not loaded
from the descriptors (in GDT or LDT) referenced by those selectors.
Instead, the descriptor caches are loaded with fixed values. See the
Operation section for details. It is the responsibility of OS software
to ensure that the descriptors (in GDT or LDT) referenced by those
selector values correspond to the fixed values loaded into the
descriptor caches; the SYSEXIT instruction does not ensure this
correspondence.

.PP
The SYSEXIT instruction can be invoked from all operating modes except
real\-address mode and virtual\-8086 mode.

.PP
The SYSENTER and SYSEXIT instructions were introduced into the IA\-32
architecture in the Pentium II processor. The availability of these
instructions on a processor is indicated with the SYSENTER/SYSEXIT
present (SEP) feature flag returned to the EDX register by the CPUID
instruction. An operating system that qualifies the SEP flag must also
qualify the processor family and model to ensure that the
SYSENTER/SYSEXIT instructions are actually present. For example:

.PP
IF CPUID SEP bit is set

.PP
THEN IF (Family = 6) and (Model \&lt; 3) and (Stepping \&lt; 3) THEN

.PP
SYSENTER/SYSEXIT\_Not\_Supported; FI;

.PP
ELSE

.PP
SYSENTER/SYSEXIT\_Supported; FI;

.PP
FI;

.PP
When the CPUID instruction is executed on the Pentium Pro processor
(model 1), the processor returns a the SEP flag as set, but does not
support the SYSENTER/SYSEXIT instructions.

.PP
Instruction ordering. Instructions following a SYSEXIT may be fetched
from memory before earlier instructions complete execution, but they
will not execute (even speculatively) until all instructions prior to
the SYSEXIT have completed execution (the later instructions may execute
before data stored by the earlier instructions have become globally
visible).

.SH OPERATION
.PP
.RS

.nf
IF IA32\_SYSENTER\_CS[15:2] = 0 OR CR0.PE = 0 OR CPL ≠ 0 THEN #GP(0); FI;
IF operand size is 64\-bit
    THEN (* Return to 64\-bit mode *)
        RSP ← RCX;
        RIP ← RDX;
    ELSE (* Return to protected mode or compatibility mode *)
        RSP ← ECX;
        RIP ← EDX;
FI;
IF operand size is 64\-bit (* Operating system provides CS; RPL forced to 3 *)
    THEN CS.Selector ← IA32\_SYSENTER\_CS[15:0] + 32;
    ELSE CS.Selector ← IA32\_SYSENTER\_CS[15:0] + 16;
FI;
CS.Selector ← CS.Selector OR 3;
            (* RPL forced to 3 *)
(* Set rest of CS to a fixed value *)
CS.Base ← 0;
            (* Flat segment *)
CS.Limit ← FFFFFH;
            (* With 4\-KByte granularity, implies a 4\-GByte limit *)
CS.Type ← 11;
            (* Execute/read code, accessed *)
CS.S ← 1;
CS.DPL ← 3;
CS.P ← 1;
IF operand size is 64\-bit
    THEN (* return to 64\-bit mode *)
        CS.L ← 1;
            (* 64\-bit code segment *)
        CS.D ← 0;
    ELSE (* return to protected mode or compatibility mode *)
        CS.L ← 0;
        CS.D ← 1;
            (* 32\-bit code segment*)
FI;
CS.G ← 1;
            (* 4\-KByte granularity *)
CPL ← 3;
SS.Selector ← CS.Selector + 8;
            (* SS just above CS *)
(* Set rest of SS to a fixed value *)
SS.Base ← 0;
            (* Flat segment *)
SS.Limit ← FFFFFH;
            (* With 4\-KByte granularity, implies a 4\-GByte limit *)
SS.Type ← 3;
            (* Read/write data, accessed *)
SS.S ← 1;
SS.DPL ← 3;
SS.P ← 1;
SS.B ← 1;
            (* 32\-bit stack segment*)
SS.G ← 1;
            (* 4\-KByte granularity *)

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	If IA32
\_
SYSENTER
\_
CS
[
15:2
]
 = 0.
	If CPL ≠ 0.
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
The SYSEXIT instruction is not recognized in real\-address mode.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
The SYSEXIT instruction is not recognized in virtual\-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	If IA32
\_
SYSENTER
\_
CS = 0.
	If CPL ≠ 0.
	T{
If RCX or RDX contains a non\-canonical address.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
