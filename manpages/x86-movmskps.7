.nh
.TH "X86-MOVMSKPS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
MOVMSKPS - EXTRACT PACKED SINGLE-PRECISION FLOATING-POINT SIGN MASK
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32\-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F 50 /xmm	RM	V/V	SSE	T{
Extract 4\-bit sign mask from r64 are filled with zeros.
T}
T{
VEX.128.0F.WIG 50 /r VMOVMSKPS reg, xmm2
T}
	RM	V/V	AVX	T{
Extract 4\-bit sign mask from r64 are zeroed.
T}
T{
VEX.256.0F.WIG 50 /r VMOVMSKPS reg, ymm2
T}
	RM	V/V	AVX	T{
Extract 8\-bit sign mask from ymm2 and store in reg. The upper bits of r64 are zeroed.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING1
.PP
.RS

.PP
1\&. ModRM.MOD = 011B required

.RE

.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Extracts the sign bits from the packed single\-precision floating\-point
values in the source operand (second operand), formats them into a 4\- or
8\-bit mask, and stores the mask in the destination operand (first
operand). The source operand is an XMM or YMM register, and the
destination operand is a general\-purpose register. The mask is stored in
the 4 or 8 low\-order bits of the destination operand. The upper bits of
the destination operand beyond the mask are filled with zeros.

.PP
In 64\-bit mode, the instruction can access additional registers
(XMM8\-XMM15, R8\-R15) when used with a REX.R prefix. The default operand
size is 64\-bit in 64\-bit mode.

.PP
128\-bit versions: The source operand is a YMM register. The destination
operand is a general purpose register.

.PP
VEX.256 encoded version: The source operand is a YMM register. The
destination operand is a general purpose register.

.PP
Note: In VEX\-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.

.SH OPERATION
.PP
.RS

.nf
DEST[0] ← SRC[31];
DEST[1] ← SRC[63];
DEST[2] ← SRC[95];
DEST[3] ← SRC[127];
IF DEST = r32
    THEN DEST[31:4] ← ZeroExtend;
    ELSE DEST[63:4] ← ZeroExtend;
FI;

.fi
.RE

.SS (V)MOVMSKPS (128\-bit version)
.PP
.RS

.nf
DEST[0] ← SRC[31]
DEST[1] ← SRC[63]
DEST[2] ← SRC[95]
DEST[3] ← SRC[127]
IF DEST = r32
    THEN DEST[31:4]←0;
    ELSE DEST[63:4]←0;
FI

.fi
.RE

.SS VMOVMSKPS (VEX.256 encoded version)
.PP
.RS

.nf
DEST[0] ← SRC[31]
DEST[1] ← SRC[63]
DEST[2] ← SRC[95]
DEST[3] ← SRC[127]
DEST[4] ← SRC[159]
DEST[5] ← SRC[191]
DEST[6] ← SRC[223]
DEST[7] ← SRC[255]
IF DEST = r32
    THEN DEST[31:8]←0;
    ELSE DEST[63:8]←0;
FI

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
int \_mm\_movemask\_ps(\_\_m128 a)

int \_mm256\_movemask\_ps(\_\_m256 a)

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None.

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 7; additionally

.TS
allbox;
l l 
l l .
#UD	If VEX.vvvv ≠ 1111B.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
