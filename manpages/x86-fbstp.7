.nh
.TH "X86-FBSTP" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FBSTP - STORE BCD INTEGER AND POP
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
DF /6	FBSTP m80bcd	Valid	Valid	T{
Store ST(0) in m80bcd and pop ST(0).
T}
.TE

.SH DESCRIPTION
.PP
Converts the value in the ST(0) register to an 18\-digit packed BCD
integer, stores the result in the destination operand, and pops the
register stack. If the source value is a non\-integral value, it is
rounded to an integer value, according to rounding mode specified by the
RC field of the FPU control word. To pop the register stack, the
processor marks the ST(0) register as empty and increments the stack
pointer (TOP) by 1.

.PP
The destination operand specifies the address where the first byte
destination value is to be stored. The BCD value (including its sign
bit) requires 10 bytes of space in memory.

.PP
The following table shows the results obtained when storing various
classes of numbers in packed BCD format.

.TS
allbox;
l l 
l l .
\fB\fCST(0)\fR	\fB\fCDEST\fR
T{
− ∞ or Value Too Large for DEST Format
T}
	
*
F≤−1	−D
−1 \&lt; F \&lt; \-0	
*

*
−0	−0
+0	+0
+ 0 \&lt; F \&lt; +1	
*

*
F ≥ +1	+D
+T{
 ∞ or Value Too Large for DEST Format
T}
	
*
NaN	
*
.TE

.PP
Table 3\-19. FBSTP Results

.PP
.RS

.PP
F Meansfinitefloating\-pointvalue.

.PP
D Means packed\-BCD number.

.PP
* Indicatesfloating\-pointinvalid\-operation(#IA)exception.

.PP
** ±0 or ±1, depending on the rounding mode.

.RE

.PP
If the converted value is too large for the destination format, or if
the source operand is an ∞, SNaN, QNAN, or is in an unsupported format,
an invalid\-arithmetic\-operand condition is signaled. If the
invalid\-operation exception is not masked, an invalid\-arithmetic\-operand
exception (#IA) is generated and no value is stored in the destination
operand. If the invalid\-operation exception is masked, the packed BCD
indefinite value is stored in memory.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
DEST ← BCD(ST(0));
PopRegisterStack;

.fi
.RE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
C1	T{
Set to 0 if stack underflow occurred.
T}
	T{
Set if result was rounded up; cleared otherwise.
T}
C0, C2, C3	Undefined.
.TE

.SH FLOATING\-POINT EXCEPTIONS
.TS
allbox;
l l 
l l .
#IS	Stack underflow occurred.
#IA	T{
Converted value that exceeds 18 BCD digits in length.
T}
	T{
Source operand is an SNaN, QNaN, ±∞, or in an unsupported format.
T}
#P	T{
Value cannot be represented exactly in destination format.
T}
.TE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a segment register is being loaded with a segment selector that points to a non\-writable segment.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
