.nh
.TH "X86-TZCNT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
TZCNT - COUNT THE NUMBER OF TRAILING ZERO BITS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 \-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
F3 0F BC /r TZCNT r16, r/m16	A	V/V	BMI1	T{
Count the number of trailing zero bits in r16.
T}
F3 0F BC /r TZCNT r32, r/m32	A	V/V	BMI1	T{
Count the number of trailing zero bits in r32.
T}
T{
F3 REX.W 0F BC /r TZCNT r64, r/m64
T}
	A	V/N.E.	BMI1	T{
Count the number of trailing zero bits in r64.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
A	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
TZCNT counts the number of trailing least significant zero bits in
source operand (second operand) and returns the result in destination
operand (first operand). TZCNT is an extension of the BSF instruction.
The key difference between TZCNT and BSF instruction is that TZCNT
provides operand size as output when source operand is zero while in the
case of BSF instruction, if source operand is zero, the content of
destination operand are undefined. On processors that do not support
TZCNT, the instruction byte encoding is executed as BSF.

.SH OPERATION
.PP
.RS

.nf
temp ← 0
DEST ← 0
DO WHILE ( (temp < OperandSize) and (SRC[ temp] = 0) )
    temp ← temp +1
    DEST ← DEST+ 1
OD
IF DEST = OperandSize
    CF ← 1
ELSE
    CF ← 0
FI
IF DEST = 0
    ZF ← 1
ELSE
    ZF ← 0
FI

.fi
.RE

.SH FLAGS AFFECTED
.PP
ZF is set to 1 in case of zero output (least significant bit of the
source is set), and to 0 otherwise, CF is set to 1 if the input was zero
and cleared otherwise. OF, SF, PF and AF flags are undefined.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
TZCNT: unsigned \_\_int32 \_tzcnt\_u32(unsigned \_\_int32 src);

TZCNT: unsigned \_\_int64 \_tzcnt\_u64(unsigned \_\_int64 src);

.fi
.RE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a null segment selector.
T}
#SS(0)	T{
For an illegal address in the SS segment.
T}
#PF	(fault\-code) For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If any part of the operand lies outside of the effective address space from 0 to 0FFFFH.
T}
#SS(0)	T{
For an illegal address in the SS segment.
T}
.TE

.SH VIRTUAL 8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If any part of the operand lies outside of the effective address space from 0 to 0FFFFH.
T}
#SS(0)	T{
For an illegal address in the SS segment.
T}
#PF	(fault\-code) For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in Protected Mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#PF	(fault\-code) For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
