.nh
.TH "X86-MOVDDUP" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
MOVDDUP - REPLICATE DOUBLE FP VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp / En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
F2 0F 12 /r MOVDDUP xmm1, xmm2/m64
T}
	A	V/V	SSE3	T{
Move double\-precision floating\-point value from xmm2/m64 and duplicate into xmm1.
T}
T{
VEX.128.F2.0F.WIG 12 /r VMOVDDUP xmm1, xmm2/m64
T}
	A	V/V	AVX	T{
Move double\-precision floating\-point value from xmm2/m64 and duplicate into xmm1.
T}
T{
VEX.256.F2.0F.WIG 12 /r VMOVDDUP ymm1, ymm2/m256
T}
	A	V/V	AVX	T{
Move even index double\-precision floating\-point values from ymm2/mem and duplicate each element into ymm1.
T}
T{
EVEX.128.F2.0F.W1 12 /r VMOVDDUP xmm1 {k1}{z}, xmm2/m64
T}
	B	V/V	AVX512VL AVX512F	T{
Move double\-precision floating\-point value from xmm2/m64 and duplicate each element into xmm1 subject to writemask k1.
T}
T{
EVEX.256.F2.0F.W1 12 /r VMOVDDUP ymm1 {k1}{z}, ymm2/m256
T}
	B	V/V	AVX512VL AVX512F	T{
Move even index double\-precision floating\-point values from ymm2/m256 and duplicate each element into ymm1 subject to writemask k1.
T}
T{
EVEX.512.F2.0F.W1 12 /r VMOVDDUP zmm1 {k1}{z}, zmm2/m512
T}
	B	V/V	AVX512F	T{
Move even index double\-precision floating\-point values from zmm2/m512 and duplicate each element into zmm1 subject to writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
B	MOVDDUP	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SS Description
.PP
For 256\-bit or higher versions: Duplicates even\-indexed double\-precision
floating\-point values from the source operand (the second operand) and
into adjacent pair and store to the destination operand (the first
operand).

.PP
For 128\-bit versions: Duplicates the low double\-precision floating\-point
value from the source operand (the second operand) and store to the
destination operand (the first operand).

.PP
128\-bit Legacy SSE version: Bits (MAXVL\-1:128) of the corresponding
destination register are unchanged. The source operand is XMM register
or a 64\-bit memory location.

.PP
VEX.128 and EVEX.128 encoded version: Bits (MAXVL\-1:128) of the
destination register are zeroed. The source operand is XMM register or a
64\-bit memory location. The destination is updated conditionally under
the writemask for EVEX version.

.PP
VEX.256 and EVEX.256 encoded version: Bits (MAXVL\-1:256) of the
destination register are zeroed. The source operand is YMM register or a
256\-bit memory location. The destination is updated conditionally under
the writemask for EVEX version.

.PP
EVEX.512 encoded version: The destination is updated according to the
writemask. The source operand is ZMM register or a 512\-bit memory
location.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.PP
X3X2X1X0SRCDESTX2X2X0X0

.PP
Figure 4\-2. VMOVDDUP Operation

.SS Operation
.SS VMOVDDUP (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (2, 128), (4, 256), (8, 512)
TMP\_SRC[63:0] ← SRC[63:0]
TMP\_SRC[127:64] ← SRC[63:0]
IF VL >= 256
    TMP\_SRC[191:128] ← SRC[191:128]
    TMP\_SRC[255:192] ← SRC[191:128]
FI;
IF VL >= 512
    TMP\_SRC[319:256] ← SRC[319:256]
    TMP\_SRC[383:320] ← SRC[319:256]
    TMP\_SRC[477:384] ← SRC[477:384]
    TMP\_SRC[511:484] ← SRC[477:384]
FI;
FOR j←0 TO KL\-1
    i←j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i]←TMP\_SRC[i+63:i]
        ELSE
            IF *merging\-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE
                        ; zeroing\-masking
                    DEST[i+63:i]←0
                        ; zeroing\-masking
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VMOVDDUP (VEX.256 encoded version)
.PP
.RS

.nf
DEST[63:0] ←SRC[63:0]
DEST[127:64] ←SRC[63:0]
DEST[191:128] ←SRC[191:128]
DEST[255:192] ←SRC[191:128]
DEST[MAXVL\-1:256] ←0

.fi
.RE

.SS VMOVDDUP (VEX.128 encoded version)
.PP
.RS

.nf
DEST[63:0] ←SRC[63:0]
DEST[127:64] ←SRC[63:0]
DEST[MAXVL\-1:128] ←0

.fi
.RE

.SS MOVDDUP (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[63:0] ←SRC[63:0]
DEST[127:64] ←SRC[63:0]
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VMOVDDUP \_\_m512d \_mm512\_movedup\_pd( \_\_m512d a);

VMOVDDUP \_\_m512d \_mm512\_mask\_movedup\_pd(\_\_m512d s, \_\_mmask8 k, \_\_m512d a);

VMOVDDUP \_\_m512d \_mm512\_maskz\_movedup\_pd( \_\_mmask8 k, \_\_m512d a);

VMOVDDUP \_\_m256d \_mm256\_mask\_movedup\_pd(\_\_m256d s, \_\_mmask8 k, \_\_m256d a);

VMOVDDUP \_\_m256d \_mm256\_maskz\_movedup\_pd( \_\_mmask8 k, \_\_m256d a);

VMOVDDUP \_\_m128d \_mm\_mask\_movedup\_pd(\_\_m128d s, \_\_mmask8 k, \_\_m128d a);

VMOVDDUP \_\_m128d \_mm\_maskz\_movedup\_pd( \_\_mmask8 k, \_\_m128d a);

MOVDDUP \_\_m256d \_mm256\_movedup\_pd (\_\_m256d a);

MOVDDUP \_\_m128d \_mm\_movedup\_pd (\_\_m128d a);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 5;

.PP
EVEX\-encoded instruction, see Exceptions Type E5NF.

.TS
allbox;
l l 
l l .
#UD	T{
If EVEX.vvvv != 1111B or VEX.vvvv != 1111B.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
