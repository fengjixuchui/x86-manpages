.nh
.TH "X86-SGDT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
SGDT - STORE GLOBAL DESCRIPTOR TABLE REGISTER
.TS
allbox;
l l l l l l 
l l l l l l .
				Valid	Store GDTR to m.
.TE

.PP
.RS

.PP
* SeeIA\-32ArchitectureCompatibilitysectionbelow.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
M	ModRM:r/m (w)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Stores the content of the global descriptor table register (GDTR) in the
destination operand. The destination operand specifies a memory
location.

.PP
In legacy or compatibility mode, the destination operand is a 6\-byte
memory location. If the operand\-size attribute is 16 or 32 bits, the
16\-bit limit field of the register is stored in the low 2 bytes of the
memory location and the 32\-bit base address is stored in the high 4
bytes.

.PP
In 64\-bit mode, the operand size is fixed at 8+2 bytes. The instruction
stores an 8\-byte base and a 2\-byte limit.

.PP
SGDT is useful only by operating\-system software. However, it can be
used in application programs without causing an exception to be
generated if CR4.UMIP = 0. See “LGDT/LIDT—Load Global/Interrupt
Descriptor Table Register” in Chapter 3, Intel® 64 and IA\-32
Architectures Software Developer’s Manual, Volume 2A, for information on
loading the GDTR and IDTR.

.SH IA\-32 ARCHITECTURE COMPATIBILITY
.PP
The 16\-bit form of the SGDT is compatible with the Intel 286 processor
if the upper 8 bits are not referenced. The Intel 286 processor fills
these bits with 1s; processor generations later than the Intel 286
processor fill these bits with 0s.

.SH OPERATION
.PP
.RS

.nf
IF instruction is SGDT
    IF OperandSize =16 or OperandSize = 32 (* Legacy or Compatibility Mode *)
        THEN
            DEST[0:15] ← GDTR(Limit);
            DEST[16:47] ← GDTR(Base); (* Full 32\-bit base address stored *)
            FI;
        ELSE (* 64\-bit Mode *)
            DEST[0:15] ← GDTR(Limit);
            DEST[16:79] ← GDTR(Base); (* Full 64\-bit base address stored *)
    FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
#GP(0)	T{
If the destination is located in a non\-writable segment.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
	If CR4.UMIP = 1 and CPL 
\&gt;
 0.
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while CPL = 3.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	If CR4.UMIP = 1.
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#UD	If the LOCK prefix is used.
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
	If CR4.UMIP = 1 and CPL 
\&gt;
 0.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while CPL = 3.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
