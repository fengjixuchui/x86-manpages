.nh
.TH "X86-ETRACKC" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ETRACKC - ACTIVATES EBLOCK CHECKS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
EAX = 11H ENCLS[ETRACKC]	IR	V/V	EAX[6]	T{
This leaf function activates EBLOCK checks.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.PP
Op/En

.PP
EAX

.PP
RCX

.PP
IR

.PP
ETRACK (In)

.PP
Return error code (Out)

.PP
Address of the destination EPC page (In, EA)

.PP
Address of the SECS page (In, EA)

.SS Description
.PP
The ETRACKC instruction is thread safe variant of ETRACK leaf and can be
executed concurrently with other CPU threads operating on the same SECS.

.PP
This leaf function provides the mechanism for hardware to track that
software has completed the required TLB address clears successfully. The
instruction can only be executed when the current privilege level is 0.

.PP
The content of RCX is an effective address of an EPC page.

.PP
The table below provides additional information on the memory parameter
of ETRACK leaf function.

.SH ETRACKC MEMORY PARAMETER SEMANTICS
.TS
allbox;
l 
l .
EPCPAGE
T{
Read/Write access permitted by Enclave
T}
.TE

.PP
The error codes are:

.TS
allbox;
l l l 
l l l .
\fB\fCError Code\fR	\fB\fCValue\fR	\fB\fCDescription\fR
No Error	0	ETRACKC successful.
SGX\_EPC\_PAGE\_CONFLICT	7	T{
Failure due to concurrent operation of another SGX instruction.
T}
SGX\_PG\_INVLD	6	T{
Target page is not a VALID EPC page.
T}
SGX\_PREV\_TRK\_INCMPL	17	T{
All processors did not complete the previous tracking sequence.
T}
SGX\_TRACK\_NOT\_REQUIRED	27	T{
Target page type does not require tracking.
T}
.TE

.PP
Table 40\-48\&. ETRACKC Return Value in
RAX

.SS Concurrency Restrictions
.PP
Leaf

.PP
Parameter

.PP
Base Concurrency Restrictions

.PP
Access

.PP
On Conflict

.PP
SGX\_CONFLICT VM Exit Qualification

.PP
ETRACKC

.PP
Target [DS:RCX]

.PP
Shared

.PP
SGX\_EPC\_PAGE\_ CONFLICT

.PP
SECS implicit

.PP
Concurrent

.PP
Table 40\-49\&. Base Concurrency
Restrictions of ETRACKC

.PP
Leaf

.PP
Parameter

.PP
Additional Concurrency Restrictions

.PP
vs. EACCEPT, EACCEPTCOPY, EMODPE, EMODPR, EMODT

.PP
vs. EADD, EEXTEND, EINIT

.PP
vs. ETRACK, ETRACKC

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
ETRACKC

.PP
Target [DS:RCX]

.PP
Concurrent

.PP
Concurrent

.PP
Concurrent

.PP
SECS implicit

.PP
Concurrent

.PP
Concurrent

.PP
Exclusive

.PP
SGX\_EPC\_PAGE \_CONFLICT

.PP
Table 40\-50\&. Additional Concurrency
Restrictions of ETRACKC

.SS Operation
.SH TEMP VARIABLES IN ETRACKC OPERATIONAL FLOW
.TS
allbox;
l l l l 
l l l l .
\fB\fCName\fR	\fB\fCType\fR	\fB\fCSize (Bits)\fR	\fB\fCDescription\fR
TMP\_SECS	Physical Address	64	T{
Physical address of the SECS of the page being modified.
T}
.TE

.PP
(* check alignment of EPCPAGE (RCX) *)

.PP
IF (DS:RCX is not 4KByte Aligned) THEN

.PP
#GP(0); FI;

.PP
(* check that EPCPAGE (DS:RCX) is the address of an EPC page *)

.PP
IF (DS:RCX does not resolve within an EPC) THEN

.PP
#PF(DS:RCX, PFEC.SGX); FI;

.PP
(* Check the EPC page for concurrency *)

.PP
IF (EPC page is being modified) THEN

.PP
RFLAGS.ZF ← 1;

.PP
RFLAGS.CF ← 0;

.PP
RAX ← SGX\_EPC\_PAGE\_CONFLICT;

.PP
goto DONE\_POST\_LOCK\_RELEASE;

.PP
FI;

.PP
(* check to make sure the page is valid *)

.PP
IF (EPCM(DS:RCX).VALID = 0) THEN

.PP
RFLAGS.ZF ← 1;

.PP
RFLAGS.CF ← 0;

.PP
RAX ← SGX\_PG\_INVLD;

.PP
GOTO DONE;

.PP
FI;

.PP
(* find out the target SECS page *)

.PP
IF (EPCM(DS:RCX).PT is PT\_REG or PT\_TCS or PT\_TRIM) THEN

.PP
TMP\_SECS←Obtain SECS through EPCM(DS:RCX).ENCLAVESECS;

.PP
ELSE IF (EPCM(DS:RCX).PT is PT\_SECS) THEN

.PP
TMP\_SECS←Obtain SECS through (DS:RCX);

.PP
ELSE

.PP
RFLAGS.ZF ← 0;

.PP
RFLAGS.CF ← 1;

.PP
RAX ← SGX\_TRACK\_NOT\_REQUIRED;

.PP
GOTO DONE;

.PP
FI;

.PP
(* Check concurrency with other Intel SGX instructions *)

.PP
IF (Other Intel SGX instructions using tracking facility on this SECS)
THEN

.PP
IF ((VMX non\-root mode) and

.PP
(ENABLE\_EPC\_VIRTUALIZATION\_EXTENSIONS Execution Control = 1)) THEN

.PP
VMCS.Exit\_reason ← SGX\_CONFLICT;

.PP
VMCS.Exit\_qualification.code ← TRACKING\_RESOURCE\_CONFLICT;

.PP
VMCS.Exit\_qualification.error ← 0;

.PP
VMCS.Guest\-physical\_address ←

.PP
SECS(TMP\_SECS).ENCLAVECONTEXT;

.PP
VMCS.Guest\-linear\_address ← 0;

.PP
Deliver VMEXIT;

.PP
FI;

.PP
RFLAGS.ZF ← 1;

.PP
RFLAGS.CF ← 0;

.PP
RAX ← SGX\_EPC\_PAGE\_CONFLICT;

.PP
GOTO DONE;

.PP
FI;

.PP
(* All processors must have completed the previous tracking cycle*)

.PP
IF ( (TMP\_SECS).TRACKING ≠ 0) )

.PP
THEN

.PP
IF ((VMX non\-root mode) and

.PP
(ENABLE\_EPC\_VIRTUALIZATION\_EXTENSIONS Execution Control = 1)) THEN

.PP
VMCS.Exit\_reason ← SGX\_CONFLICT;

.PP
VMCS.Exit\_qualification.code ← TRACKING\_REFERENCE\_CONFLICT;

.PP
VMCS.Exit\_qualification.error ← 0;

.PP
VMCS.Guest\-physical\_address ←

.PP
SECS(TMP\_SECS).ENCLAVECONTEXT;

.PP
VMCS.Guest\-linear\_address ← 0;

.PP
Deliver VMEXIT;

.PP
FI;

.PP
RFLAGS.ZF ← 1;

.PP
RFLAGS.CF ← 0;

.PP
RAX ← SGX\_PREV\_TRK\_INCMPL;

.PP
GOTO DONE;

.PP
FI;

.PP
RFLAGS.ZF ← 0;

.PP
RFLAGS.CF ← 0;

.PP
RAX←0;

.PP
DONE:

.PP
(* clear flags *)

.PP
RFLAGS.PF,AF,OF,SF ← 0;

.SS Flags Affected
.PP
ZF is set if ETRACKC fails due to concurrent operations with another SGX
instructions or target page is an invalid EPC page or tracking is not
completed on SECS page; otherwise cleared.

.PP
CF is set if target page is not of a type that requires tracking;
otherwise cleared.

.PP
PF, AF, OF and SF are cleared.

.SS Protected Mode Exceptions
.PP
#GP(0)

.PP
If the memory operand violates access\-control policies of DS segment.

.PP
If DS segment is unusable.

.PP
If the memory operand is not properly aligned.

.PP
#PF(error

.PP
code) If the memory operand expected to be in EPC does not resolve to an
EPC page.

.PP
If a page fault occurs in access memory operand.

.SS 64\-Bit Mode Exceptions
.PP
#GP(0)

.PP
If a memory address is in a non\-canonical form.

.PP
If a memory operand is not properly aligned.

.PP
#PF(error

.PP
code) If the memory operand expected to be in EPC does not resolve to an
EPC page.

.PP
If a page fault occurs in access memory operand.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
