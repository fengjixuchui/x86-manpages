.nh
.TH "X86-ESETCONTEXT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ESETCONTEXT - SET THE ENCLAVECONTEXT FIELD IN SECS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
EAX = 02H ENCLV[ESETCONTEXT]	IR	V/V	EAX[5]	T{
This leaf function sets the ENCLAVECONTEXT field in SECS.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
Op/En	EAX	RCX	RDX
IR	ESETCONTEXT (In)	T{
Address of the destination EPC page (In, EA)
T}
	Context Value (In, EA)
.TE

.SS Description
.PP
The ESETCONTEXT leaf overwrites the ENCLAVECONTEXT field in the SECS.
ECREATE and ELD of an SECS set the ENCLAVECONTEXT field in the SECS to
the address of the SECS (for access later in ERDINFO). The ESETCONTEXT
instruction allows a VMM to overwrite the default context value if
necessary, for example, if the VMM is emulating ECREATE or ELD on behalf
of the guest.

.PP
The content of RCX is an effective address of the SECS page to be
updated, RDX contains the address pointing to the value to be stored in
the SECS. The DS segment is used to create linear address. Segment
override is not supported.

.PP
The instruction fails if:

.RS
.IP \(bu 2
The operand is not properly aligned.
.IP \(bu 2
RCX does not refer to an SECS page.

.RE

.SH ESETCONTEXT MEMORY PARAMETER SEMANTICS
.TS
allbox;
l l 
l l .
EPCPAGE	CONTEXT
T{
Read access permitted by Enclave
T}
	T{
Read/Write access permitted by Non Enclave
T}
.TE

.PP
The instruction faults if any of the following:

.SH ESETCONTEXT FAULTING CONDITIONS
.TS
allbox;
l l 
l l .
T{
A memory operand effective address is outside the DS segment limit (32b mode).
T}
	T{
A memory operand is not properly aligned.
T}
T{
DS segment is unusable (32b mode).
T}
	T{
A page fault occurs in accessing memory operands.
T}
T{
A memory address is in a non\-canonical form (64b mode).
T}
	.TE

.SS Concurrency Restrictions
.PP
Leaf

.PP
Parameter

.PP
Base Concurrency Restrictions

.PP
Access

.PP
On Conflict

.PP
SGX\_CONFLICT VM Exit Qualification

.PP
ESETCONTEXT

.PP
SECS [DS:RCX]

.PP
Shared

.PP
SGX\_EPC\_PAGE\_ CONFLICT

.PP
Table 40\-78\&. Base Concurrency
Restrictions of ESETCONTEXT

.PP
Leaf

.PP
Parameter

.PP
Additional Concurrency Restrictions

.PP
vs. EACCEPT, EACCEPTCOPY, EMODPE, EMODPR, EMODT

.PP
vs. EADD, EEXTEND, EINIT

.PP
vs. ETRACK, ETRACKC

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
ESETCONTEXT

.PP
SECS [DS:RCX]

.PP
Concurrent

.PP
Concurrent

.PP
Concurrent

.PP
Table 40\-79\&. Additional Concurrency
Restrictions of ESETCONTEXT

.SS Operation
.SH TEMP VARIABLES IN ESETCONTEXT OPERATIONAL FLOW
.TS
allbox;
l l l l 
l l l l .
\fB\fCName\fR	\fB\fCType\fR	\fB\fCSize (bits)\fR	\fB\fCDescription\fR
TMP\_SECS	Physical Address	64	T{
Physical address of the SECS of the page being modified.
T}
TMP\_CONTEXT	CONTEXT	64	Data Value of CONTEXT.
.TE

.SH ESETCONTEXT RETURN VALUE IN RAX
.TS
allbox;
l l l 
l l l .
\fB\fCError\fR	\fB\fCValue\fR	\fB\fCDescription\fR
No Error	0	ESETCONTEXT Successful.
SGX\_EPC\_PAGE\_CONFLICT		T{
Failure due to concurrent operation of another SGX instruction.
T}
.TE

.PP
(* check alignment of the EPCPAGE (RCX) *)

.PP
IF (DS:RCX is not 4KByte Aligned) THEN

.PP
#GP(0); FI;

.PP
(* check that EPCPAGE (DS:RCX) is the address of an EPC page *)

.PP
IF (DS:RCX does not resolve within an EPC)THEN

.PP
#PF(DS:RCX, PFEC.SGX); FI;

.PP
(* check alignment of the CONTEXT field (RDX) *)

.PP
IF (DS:RDX is not 8Byte Aligned) THEN

.PP
#GP(0); FI;

.PP
(* Load CONTEXT into local variable *)

.PP
TMP\_CONTEXT ← DS:RDX

.PP
(* Check the EPC page for concurrency *)

.PP
IF (EPC page is being modified) THEN

.PP
RFLAGS.ZF ← 1;

.PP
RFLAGS.CF ← 0;

.PP
RAX ← SGX\_EPC\_PAGE\_CONFLICT;

.PP
goto DONE;

.PP
FI;

.PP
(* check page validity *)

.PP
IF (EPCM(DS:RCX).VALID = 0) THEN

.PP
#PF(DS:RCX, PFEC.SGX);

.PP
FI;

.PP
(* check EPC page is an SECS page *)

.PP
IF (EPCM(DS:RCX).PT is not PT\_SECS) THEN

.PP
#PF(DS:RCX, PFEC.SGX);

.PP
FI;

.PP
(* load the context value into SECS(DS:RCX).ENCLAVECONTEXT *)

.PP
SECS(DS:RCX).ENCLAVECONTEXT ← TMP\_CONTEXT;

.PP
RAX←0;

.PP
RFLAGS.ZF ← 0;

.PP
DONE:

.PP
(* clear flags *)

.PP
RFLAGS.CF,PF,AF,OF,SF ← 0;

.SS Flags Affected
.PP
ZF is set if ESETCONTEXT fails due to concurrent operation with another
SGX instruction; otherwise cleared.

.PP
CF, PF, AF, OF and SF are cleared.

.SS Protected Mode Exceptions
.PP
#GP(0)

.PP
If a memory operand effective address is outside the DS segment limit.

.PP
If DS segment is unusable.

.PP
If a memory operand is not properly aligned.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.SS 64\-Bit Mode Exceptions
.PP
#GP(0)

.PP
If a memory address is in a non\-canonical form.

.PP
If a memory operand is not properly aligned.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
