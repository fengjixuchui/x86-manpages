.nh
.TH "X86-INVEPT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
INVEPT - INVALIDATE TRANSLATIONS DERIVED FROM EPT
.TS
allbox;
l l l 
l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fCDescription\fR
66 0F 38 80 INVEPT r64, m128	RM	T{
Invalidates EPT\-derived entries in the TLBs and paging\-structure caches (in 64\-bit mode).
T}
66 0F 38 80 INVEPT r32, m128	RM	T{
Invalidates EPT\-derived entries in the TLBs and paging\-structure caches (outside 64\-bit mode).
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (r)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Invalidates mappings in the translation lookaside buffers (TLBs) and
paging\-structure caches that were derived from extended page tables
(EPT). (See Chapter 28, “VMX Support for Address Translation”.)
Invalidation is based on the INVEPT descriptor specified in the memory
operand.

.PP
Outside IA\-32e mode, the register operand is always 32 bits, regardless
of the value of CS.D; in 64\-bit mode, the register operand has 64 bits
(the instruction cannot be executed in compatibility mode).

.PP
The INVEPT types supported by a logical processors are reported in the
IA32\_VMX\_EPT\_VPID\_CAP MSR (see Appendix A, “VMX Capability Reporting
Facility”). There are two INVEPT types currently defined:

.RS
.IP \(bu 2
Single\-context invalidation. If the INVEPT type is 1, the logical
processor invalidates all mappings associated with bits 51:12 of the
EPT pointer (EPTP) specified in the INVEPT descriptor. It may
invalidate other mappings as well.
.IP \(bu 2
Global invalidation: If the INVEPT type is 2, the logical processor
invalidates mappings associated with all EPTPs.

.RE

.PP
If an unsupported INVEPT type is specified, the instruction fails.

.PP
INVEPT invalidates all the specified mappings for the indicated EPTP(s)
regardless of the VPID and PCID values with which those mappings may be
associated.

.PP
The INVEPT descriptor comprises 128 bits and contains a 64\-bit EPTP
value in bits 63:0 (see Figure 30\-1).

.PP
12764630Reserved (must be zero)EPT pointer (EPTP)

.PP
Figure 30\-1. INVEPT Descriptor

.SH OPERATION
.PP
.RS

.nf
IF (not in VMX operation) or (CR0.PE = 0) or (RFLAGS.VM = 1) or (IA32\_EFER.LMA = 1 and CS.L = 0)
    THEN #UD;
ELSIF in VMX non\-root operation
    THEN VM exit;
ELSIF CPL > 0
    THEN #GP(0);
    ELSE
        INVEPT\_TYPE ← value of register operand;
        IF IA32\_VMX\_EPT\_VPID\_CAP MSR indicates that processor does not support INVEPT\_TYPE
            THEN VMfail(Invalid operand to INVEPT/INVVPID);
            ELSE // INVEPT\_TYPE must be 1 or 2
                INVEPT\_DESC ← value of memory operand;
                EPTP ← INVEPT\_DESC[63:0];
                CASE INVEPT\_TYPE OF
                    1:
                                    // single\-context invalidation
                        IF VM entry with the “enable EPT“ VM execution control set to 1
                        would fail due to the EPTP value
                            THEN VMfail(Invalid operand to INVEPT/INVVPID);
                            ELSE
                                Invalidate mappings associated with EPTP[51:12];
                                VMsucceed;
                        FI;
                        BREAK;
                    2:
                                    // global invalidation
                        Invalidate mappings associated with all EPTPs;
                        VMsucceed;
                        BREAK;
                ESAC;
        FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
See the operation section and Section 30.2.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the current privilege level is not 0.
T}
	T{
If the memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains an unusable segment.
T}
	T{
If the source operand is located in an execute\-only code segment.
T}
#PF(fault\-code)	T{
If a page fault occurs in accessing the memory operand.
T}
#SS(0)	T{
If the memory operand effective address is outside the SS segment limit.
T}
	T{
If the SS register contains an unusable segment.
T}
#UD	If not in VMX operation.
	T{
If the logical processor does not support EPT (IA32
T}
\_
VMX
\_
PROCBASED
\_
CTLS2
[
33
]
=0).
	T{
If the logical processor supports EPT (IA32
T}
\_
VMX
\_
PROCBASED
\_
CTLS2
[
33
]
T{
=1) but does not support the INVEPT instruction (IA32
T}
\_
VMX
\_
EPT
\_
VPID
\_
CAP
[
20
]
=0).
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The INVEPT instruction is not recognized in real\-address mode.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The INVEPT instruction is not recognized in virtual\-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The INVEPT instruction is not recognized in compatibility mode.
T}
.TE

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the current privilege level is not 0.
T}
	T{
If the memory operand is in the CS, DS, ES, FS, or GS segments and the memory address is in a non\-canonical form.
T}
#PF(fault\-code)	T{
If a page fault occurs in accessing the memory operand.
T}
#SS(0)	T{
If the memory operand is in the SS segment and the memory address is in a non\-canonical form.
T}
#UD	If not in VMX operation.
	T{
If the logical processor does not support EPT (IA32
T}
\_
VMX
\_
PROCBASED
\_
CTLS2
[
33
]
=0).
	T{
If the logical processor supports EPT (IA32
T}
\_
VMX
\_
PROCBASED
\_
CTLS2
[
33
]
T{
=1) but does not support the INVEPT instruction (IA32
T}
\_
VMX
\_
EPT
\_
VPID
\_
CAP
[
20
]
=0).
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
