.nh
.TH "X86-VRSQRT28PD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VRSQRT28PD - APPROXIMATION TO THE RECIPROCAL SQUARE ROOT OF PACKED DOUBLE-PRECISION FLOATING-POINT VALUES WITH LESS THAN 2^-28 RELATIVE ERROR
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.512.66.0F38.W1 CC /r VRSQRT28PD zmm1 {k1}{z}, zmm2/m512/m64bcst {sae}
T}
	A	V/V	AVX512ER	T{
Computes approximations to the Reciprocal square root (
T}
\&lt;
T{
2^\-28 relative error) of the packed double\-precision floating\-point values from zmm2/m512/m64bcst and stores result in zmm1with writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Full	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SS Description
.PP
Computes the reciprocal square root of the float64 values in the source
operand (the second operand) and store the results to the destination
operand (the first operand). The approximate reciprocal is evaluated
with less than 2^\-28 of maximum relative error.

.PP
If any source element is NaN, the quietized NaN source value is returned
for that element. Negative (non\-zero) source numbers, as well as \-∞,
return the canonical NaN and set the Invalid Flag (#I).

.PP
A value of \-0 must return \-∞ and set the DivByZero flags (#Z). Negative
numbers should return NaN and set the Invalid flag (#I). Note however
that the instruction flush input denormals to zero of the same sign, so
negative denormals return \-∞ and set the DivByZero flag.

.PP
The source operand is a ZMM register, a 512\-bit memory location or a
512\-bit vector broadcasted from a 64\-bit memory location. The
destination operand is a ZMM register, conditionally updated using
writemask k1.

.PP
EVEX.vvvv is reserved and must be 1111b otherwise instructions will
#UD.

.SS A numerically exact implementation of VRSQRT28xx can be found at https://software.intel.com/en\-us/arti\-
.SS cles/reference\-implementations\-for\-IA\-approximation\-instructions\-vrcp14\-vrsqrt14\-vrcp28\-vrsqrt28\-vexp2.
.SS Operation
.SS VRSQRT28PD (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (8, 512)
FOR j←0 TO KL\-1
    i←j * 64
    IF k1[j] OR *no writemask* THEN
            IF (EVEX.b = 1) AND (SRC *is memory*)
                THEN DEST[i+63:i]←(1.0/ SQRT(SRC[63:0]));
                ELSE DEST[i+63:i]←(1.0/ SQRT(SRC[i+63:i]));
            FI;
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[i+63:i] remains unchanged*
            ELSE ; zeroing\-masking
                DEST[i+63:i] ← 0
        FI;
    FI;
ENDFOR;

.fi
.RE

.TS
allbox;
l l l 
l l l .
\fB\fCInput value\fR	\fB\fCResult value\fR	\fB\fCComments\fR
NAN	QNAN(input)	If (SRC = SNaN) then 
#
I
X = 2\-2n	2n	X\&lt;0	QNaN\_Indefinite	Including \-INF
X = \-0 or negative denormal	\-INF	
#
Z
X = +0 or positive denormal	+INF	
#
Z
X = +INF	+0	.TE

.PP
Table 6\-39. VRSQRT28PD Special Cases

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VRSQRT28PD \_\_m512d \_mm512\_rsqrt28\_round\_pd(\_\_m512d a, int sae);

VRSQRT28PD \_\_m512d \_mm512\_mask\_rsqrt28\_round\_pd(\_\_m512d s, \_\_mmask8 m,\_\_m512d a, int sae);

VRSQRT28PD \_\_m512d \_mm512\_maskz\_rsqrt28\_round\_pd(\_\_mmask8 m,\_\_m512d a, int sae);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
Invalid (if SNaN input), Divide\-by\-zero

.SS Other Exceptions
.PP
See Exceptions Type E2.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
