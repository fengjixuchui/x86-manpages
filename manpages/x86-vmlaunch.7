.nh
.TH "X86-VMLAUNCH-VMRESUME" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VMLAUNCH-VMRESUME - LAUNCH-RESUME VIRTUAL MACHINE
.TS
allbox;
l l l 
l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fCDescription\fR
0F 01 C2 VMLAUNCH	ZO	T{
Launch virtual machine managed by current VMCS.
T}
0F 01 C3 VMRESUME	ZO	T{
Resume virtual machine managed by current VMCS.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Effects a VM entry managed by the current VMCS.

.RS
.IP \(bu 2
VMLAUNCH fails if the launch state of current VMCS is not “clear”.
If the instruction is successful, it sets the launch state to
“launched.”
.IP \(bu 2
VMRESUME fails if the launch state of the current VMCS is not
“launched.”

.RE

.PP
If VM entry is attempted, the logical processor performs a series of
consistency checks as detailed in Chapter 26, “VM Entries”. Failure to
pass checks on the VMX controls or on the host\-state area passes control
to the instruction following the VMLAUNCH or VMRESUME instruction. If
these pass but checks on the guest\-state area fail, the logical
processor loads state from the host\-state area of the VMCS, passing
control to the instruction referenced by the RIP field in the host\-state
area.

.PP
VM entry is not allowed when events are blocked by MOV SS or POP SS.
Neither VMLAUNCH nor VMRESUME should be used immediately after either
MOV to SS or POP to SS.

.SH OPERATION
.PP
.RS

.nf
IF (not in VMX operation) or (CR0.PE = 0) or (RFLAGS.VM = 1) or (IA32\_EFER.LMA = 1 and CS.L = 0)
    THEN #UD;
ELSIF in VMX non\-root operation
    THEN VMexit;
ELSIF CPL > 0
    THEN #GP(0);
ELSIF current\-VMCS pointer is not valid
    THEN VMfailInvalid;
ELSIF events are being blocked by MOV SS
    THEN VMfailValid(VM entry with events blocked by MOV SS);
ELSIF (VMLAUNCH and launch state of current VMCS is not “clear”)
    THEN VMfailValid(VMLAUNCH with non\-clear VMCS);
ELSIF (VMRESUME and launch state of current VMCS is not “launched”)
    THEN VMfailValid(VMRESUME with non\-launched VMCS);
    ELSE
        Check settings of VMX controls and host\-state area;
        IF invalid settings
            THEN VMfailValid(VM entry with invalid VMX\-control field(s)) or
                    VMfailValid(VM entry with invalid host\-state field(s)) or
                    VMfailValid(VM entry with invalid executive\-VMCS pointer)) or
                    VMfailValid(VM entry with non\-launched executive VMCS) or
                    VMfailValid(VM entry with executive\-VMCS pointer not VMXON pointer) or
                    VMfailValid(VM entry with invalid VM\-execution control fields in executive
                    VMCS)
                    as appropriate;
            ELSE
                Attempt to load guest state and PDPTRs as appropriate;
                clear address\-range monitoring;
                IF failure in checking guest state or PDPTRs
                    THEN VM entry fails (see Section 26.8);
                    ELSE
                        Attempt to load MSRs from VM\-entry MSR\-load area;
                        IF failure
                            THEN VM entry fails
                            (see Section 26.8);
                            ELSE
                                IF VMLAUNCH
                                    THEN launch state of VMCS ← “launched”;
                                FI;
                                IF in SMM and “entry to SMM” VM\-entry control is 0
                                    THEN
                                        IF “deactivate dual\-monitor treatment” VM\-entry
                                        control is 0
                                            THEN SMM\-transfer VMCS pointer ←
                                            current\-VMCS pointer;
                                        FI;
                                        IF executive\-VMCS pointer is VMXON pointer
                                            THEN current\-VMCS pointer ←
                                            VMCS\-link pointer;
                                            ELSE current\-VMCS pointer ←
                                            executive\-VMCS pointer;
                                        FI;
                                        leave SMM;
                                FI;
                                VM entry succeeds;
                        FI;
                FI;
        FI;
FI;
Further details of the operation of the VM\-entry appear in Chapter 26.

.fi
.RE

.SH FLAGS AFFECTED
.PP
See the operation section and Section 30.2.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the current privilege level is not 0.
T}
#UD	T{
If executed outside VMX operation.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The VMLAUNCH and VMRESUME instructions are not recognized in real\-address mode.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The VMLAUNCH and VMRESUME instructions are not recognized in virtual\-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The VMLAUNCH and VMRESUME instructions are not recognized in compatibility mode.
T}
.TE

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the current privilege level is not 0.
T}
#UD	T{
If executed outside VMX operation.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
