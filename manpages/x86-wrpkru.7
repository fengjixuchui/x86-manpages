.nh
.TH "X86-WRPKRU" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
WRPKRU - WRITE DATA TO USER PAGE KEY REGISTER
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode*\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64/32bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F 01 EF	WRPKRU	ZO	V/V	OSPKE	Writes EAX into PKRU.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Writes the value of EAX into PKRU. ECX and EDX must be 0 when WRPKRU is
executed; otherwise, a general\-protection exception (#GP) occurs.

.PP
WRPKRU can be executed only if CR4.PKE = 1; otherwise, an invalid\-opcode
exception (#UD) occurs. Software can discover the value of CR4.PKE by
examining CPUID.(EAX=07H,ECX=0H):ECX.OSPKE [bit 4]\&.

.PP
On processors that support the Intel 64 Architecture, the high\-order
32\-bits of RCX, RDX and RAX are ignored.

.SH OPERATION
.PP
.RS

.nf
IF (ECX = 0 AND EDX = 0)
    THEN PKRU ← EAX;
    ELSE #GP(0);
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
WRPKRU: void \_wrpkru(uint32\_t);

.fi
.RE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	If ECX ≠ 0.
	If EDX ≠ 0.
#UD	If the LOCK prefix is used.
	If CR4.PKE = 0.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
