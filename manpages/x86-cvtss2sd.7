.nh
.TH "X86-CVTSS2SD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
CVTSS2SD - CONVERT SCALAR SINGLE-PRECISION FLOATING-POINT VALUE TO SCALAR DOUBLE-PRECISION FLOATING-POINT VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp / En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
F3 0F 5A /r CVTSS2SD xmm1, xmm2/m32
T}
	A	V/V	SSE2	T{
Convert one single\-precision floating\-point value in xmm2/m32 to one double\-precision floating\-point value in xmm1.
T}
T{
VEX.LIG.F3.0F.WIG 5A /r VCVTSS2SD xmm1, xmm2, xmm3/m32
T}
	B	V/V	AVX	T{
Convert one single\-precision floating\-point value in xmm3/m32 to one double\-precision floating\-point value and merge with high bits of xmm2.
T}
T{
EVEX.LIG.F3.0F.W0 5A /r VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae}
T}
	C	V/V	AVX512F	T{
Convert one single\-precision floating\-point value in xmm3/m32 to one double\-precision floating\-point value and merge with high bits of xmm2 under writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv	ModRM:r/m (r)	NA
C	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Converts a single\-precision floating\-point value in the “convert\-from”
source operand to a double\-precision floating\-point value in the
destination operand. When the “convert\-from” source operand is an XMM
register, the single\-precision floating\-point value is contained in the
low doubleword of the register. The result is stored in the low quadword
of the destination operand.

.PP
128\-bit Legacy SSE version: The “convert\-from” source operand (the
second operand) is an XMM register or memory location. Bits (MAXVL\-1:64)
of the corresponding destination register remain unchanged. The
destination operand is an XMM register.

.PP
VEX.128 and EVEX encoded versions: The “convert\-from” source operand
(the third operand) can be an XMM register or a 32\-bit memory location.
The first source and destination operands are XMM registers. Bits
(127:64) of the XMM register destination are copied from the
corresponding bits in the first source operand. Bits (MAXVL\-1:128) of
the destination register are zeroed.

.PP
Software should ensure VCVTSS2SD is encoded with VEX.L=0. Encoding
VCVTSS2SD with VEX.L=1 may encounter unpredictable behavior across
different processor generations.

.SH OPERATION
.SS VCVTSS2SD (EVEX encoded version)
.PP
.RS

.nf
IF k1[0] or *no writemask*
    THEN DEST[63:0] ← Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC2[31:0]);
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[63:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[63:0] = 0
        FI;
FI;
DEST[127:64] ← SRC1[127:64]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VCVTSS2SD (VEX.128 encoded version)
.PP
.RS

.nf
DEST[63:0] ←Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC2[31:0])
DEST[127:64] ←SRC1[127:64]
DEST[MAXVL\-1:128] ←0

.fi
.RE

.SS CVTSS2SD (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[63:0] ←Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[31:0]);
DEST[MAXVL\-1:64] (Unmodified)

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VCVTSS2SD \_\_m128d \_mm\_cvt\_roundss\_sd(\_\_m128d a, \_\_m128 b, int r);

VCVTSS2SD \_\_m128d \_mm\_mask\_cvt\_roundss\_sd(\_\_m128d s, \_\_mmask8 m, \_\_m128d a,\_\_m128 b, int r);

VCVTSS2SD \_\_m128d \_mm\_maskz\_cvt\_roundss\_sd(\_\_mmask8 k, \_\_m128d a, \_\_m128 a, int r);

VCVTSS2SD \_\_m128d \_mm\_mask\_cvtss\_sd(\_\_m128d s, \_\_mmask8 m, \_\_m128d a,\_\_m128 b);

VCVTSS2SD \_\_m128d \_mm\_maskz\_cvtss\_sd(\_\_mmask8 m, \_\_m128d a,\_\_m128 b);

CVTSS2SD \_\_m128d\_mm\_cvtss\_sd(\_\_m128d a, \_\_m128 a);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
Invalid, Denormal

.SH OTHER EXCEPTIONS
.PP
VEX\-encoded instructions, see Exceptions Type 3.

.PP
EVEX\-encoded instructions, see Exceptions Type E3.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
