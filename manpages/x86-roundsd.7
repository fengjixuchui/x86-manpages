.nh
.TH "X86-ROUNDSD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ROUNDSD - ROUND SCALAR DOUBLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode*/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
66 0F 3A 0B /r ib ROUNDSD xmm1, xmm2/m64, imm8
T}
	RMI	V/V	SSE4\_1	T{
Round the low packed double precision floating\-point value in imm8.
T}
T{
VEX.LIG.66.0F3A.WIG 0B /r ib VROUNDSD xmm1, xmm2, xmm3/m64, imm8
T}
	RVMI	V/V	AVX	T{
Round the low packed double precision floating\-point value in xmm1
T}
[
127:64
]
\&.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RMI	ModRM:reg (w)	ModRM:r/m (r)	imm8	NA
RVMI	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	imm8
.TE

.SH DESCRIPTION
.PP
Round the DP FP value in the lower qword of the source operand (second
operand) using the rounding mode specified in the immediate operand
(third operand) and place the result in the destination operand (first
operand). The rounding process rounds a double\-precision floating\-point
input to an integer value and returns the integer result as a double
precision floating\-point value in the lowest position. The upper double
precision floating\-point value in the destination is retained.

.PP
The immediate operand specifies control fields for the rounding
operation, three bit fields are defined and shown in Figure 4\-24. Bit 3
of the immediate byte controls processor behavior for a precision
exception, bit 2 selects the source of rounding mode control. Bits 1:0
specify a non\-sticky rounding\-mode value (Table 4\-17 lists the encoded values for
rounding\-mode field).

.PP
The Precision Floating\-Point Exception is signaled according to the
immediate operand. If any source operand is an SNaN then it will be
converted to a QNaN. If DAZ is set to ‘1 then denormals will be
converted to zero before rounding.

.PP
128\-bit Legacy SSE version: The first source operand and the destination
operand are the same. Bits (MAXVL\-1:64) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: Bits (MAXVL\-1:128) of the destination YMM
register are zeroed.

.SH OPERATION
.PP
.RS

.nf
IF (imm[2] = ‘1)
    THEN // rounding mode is determined by MXCSR.RC
        DEST[63:0] ← ConvertDPFPToInteger\_M(SRC[63:0]);
    ELSE // rounding mode is determined by IMM8.RC
        DEST[63:0] ← ConvertDPFPToInteger\_Imm(SRC[63:0]);
FI;
DEST[127:63] remains unchanged ;

.fi
.RE

.SS ROUNDSD (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[63:0]←RoundToInteger(SRC[63:0], ROUND\_CONTROL)
DEST[MAXVL\-1:64] (Unmodified)

.fi
.RE

.SS VROUNDSD (VEX.128 encoded version)
.PP
.RS

.nf
DEST[63:0]←RoundToInteger(SRC2[63:0], ROUND\_CONTROL)
DEST[127:64] ← SRC1[127:64]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
ROUNDSD: \_\_m128d mm\_round\_sd(\_\_m128d dst, \_\_m128d s1, int iRoundMode);

\_\_m128d mm\_floor\_sd(\_\_m128d dst, \_\_m128d s1);

\_\_m128d mm\_ceil\_sd(\_\_m128d dst, \_\_m128d s1);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
Invalid (signaled only if SRC = SNaN)

.PP
Precision (signaled only if imm[3] = ‘0; if imm[3] = ‘1, then the
Precision Mask in the MXSCSR is ignored and precision exception is not
signaled.)

.PP
Note that Denormal is not signaled by ROUNDSD.

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 3.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
