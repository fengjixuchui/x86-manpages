.nh
.TH "X86-FXAM" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FXAM - EXAMINE FLOATING-POINT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
D9 E5	FXAM	Valid	Valid	T{
Classify value or number in ST(0).
T}
.TE

.SH DESCRIPTION
.PP
Examines the contents of the ST(0) register and sets the condition code
flags C0, C2, and C3 in the FPU status word to indicate the class of
value or number in the register (see the table below).

.TS
allbox;
l l l l 
l l l l .
\fB\fCClass\fR	\fB\fCC3\fR	\fB\fCC2\fR	\fB\fCC0\fR
Unsupported	0	0	0
NaN	0	0	1
Normal finite number	0	1	0
Infinity	0	1	1
Zero	1	0	0
Empty	1	0	1
Denormal number	1	1	0
.TE

.PP
Table 3\-42. FXAM Results .

.PP
The C1 flag is set to the sign of the value in ST(0), regardless of
whether the register is empty or full.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
C1 ← sign bit of ST; (* 0 for positive, 1 for negative *)
CASE (class of value or number in ST(0)) OF
    Unsupported:C3, C2, C0 ← 000;
    NaN:
        C3, C2, C0 ← 001;
    Normal:
        C3, C2, C0 ← 010;
    Infinity:
        C3, C2, C0 ← 011;
    Zero:
        C3, C2, C0 ← 100;
    Empty:
        C3, C2, C0 ← 101;
    Denormal:
        C3, C2, C0 ← 110;
ESAC;

.fi
.RE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
C1	Sign of value in ST(0).
C0, C2, C3	See Table 3\-42.
.TE

.SH FLOATING\-POINT EXCEPTIONS
.PP
None

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
