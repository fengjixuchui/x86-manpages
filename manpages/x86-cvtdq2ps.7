.nh
.TH "X86-CVTDQ2PS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
CVTDQ2PS - CONVERT PACKED DOUBLEWORD INTEGERS TO PACKED SINGLE-PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
NP 0F 5B /r CVTDQ2PS xmm1, xmm2/m128
T}
	A	V/V	SSE2	T{
Convert four packed signed doubleword integers from xmm2/mem to four packed single\-precision floating\-point values in xmm1.
T}
T{
VEX.128.0F.WIG 5B /r VCVTDQ2PS xmm1, xmm2/m128
T}
	A	V/V	AVX	T{
Convert four packed signed doubleword integers from xmm2/mem to four packed single\-precision floating\-point values in xmm1.
T}
T{
VEX.256.0F.WIG 5B /r VCVTDQ2PS ymm1, ymm2/m256
T}
	A	V/V	AVX	T{
Convert eight packed signed doubleword integers from ymm2/mem to eight packed single\-precision floating\-point values in ymm1.
T}
T{
EVEX.128.0F.W0 5B /r VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst
T}
	B	V/V	AVX512VL AVX512F	T{
Convert four packed signed doubleword integers from xmm2/m128/m32bcst to four packed single\-precision floating\-point values in xmm1with writemask k1.
T}
T{
EVEX.256.0F.W0 5B /r VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst
T}
	B	V/V	AVX512VL AVX512F	T{
Convert eight packed signed doubleword integers from ymm2/m256/m32bcst to eight packed single\-precision floating\-point values in ymm1with writemask k1.
T}
T{
EVEX.512.0F.W0 5B /r VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}
T}
	B	V/V	AVX512F	T{
Convert sixteen packed signed doubleword integers from zmm2/m512/m32bcst to sixteen packed single\-precision floating\-point values in zmm1with writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
B	Full	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Converts four, eight or sixteen packed signed doubleword integers in the
source operand to four, eight or sixteen packed single\-precision
floating\-point values in the destination operand.

.PP
EVEX encoded versions: The source operand can be a ZMM/YMM/XMM register,
a 512/256/128\-bit memory location or a 512/256/128\-bit vector
broadcasted from a 32\-bit memory location. The destination operand is a
ZMM/YMM/XMM register conditionally updated with writemask k1.

.PP
VEX.256 encoded version: The source operand is a YMM register or 256\-
bit memory location. The destination operand is a YMM register. Bits
(MAXVL\-1:256) of the corresponding register destination are zeroed.

.PP
VEX.128 encoded version: The source operand is an XMM register or 128\-
bit memory location. The destination operand is a XMM register. The
upper bits (MAXVL\-1:128) of the corresponding register destination are
zeroed.

.PP
128\-bit Legacy SSE version: The source operand is an XMM register or
128\- bit memory location. The destination operand is an XMM register.
The upper Bits (MAXVL\-1:128) of the corresponding register destination
are unmodified.

.PP
VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise
instructions will #UD.

.SH OPERATION
.SS VCVTDQ2PS (EVEX encoded versions) when SRC operand is a register
.PP
.RS

.nf
(KL, VL) = (4, 128), (8, 256), (16, 512)
IF (VL = 512) AND (EVEX.b = 1)
    THEN
        SET\_RM(EVEX.RC); ; refer to Table 15\-4 in the Intel® 64 and IA\-32 Architectures Software Developer’s Manual, Volume 1
    ELSE
        SET\_RM(MXCSR.RM); ; refer to Table 15\-4 in the Intel® 64 and IA\-32 Architectures Software Developer’s Manual, Volume 1
FI;
FOR j←0 TO KL\-1
    i←j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i]←
            Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[i+31:i])
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE ; zeroing\-masking
                    DEST[i+31:i] ← 0
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VCVTDQ2PS (EVEX encoded versions) when SRC operand is a memory source
.PP
.RS

.nf
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j←0 TO KL\-1
    i←j * 32
    IF k1[j] OR *no writemask*
        THEN
            IF (EVEX.b = 1)
                THEN
                    DEST[i+31:i] ←
            Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[31:0])
                ELSE
                    DEST[i+31:i] ←
            Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[i+31:i])
            FI;
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE
                        ; zeroing\-masking
                    DEST[i+31:i] ← 0
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VCVTDQ2PS (VEX.256 encoded version)
.PP
.RS

.nf
DEST[31:0] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[31:0])
DEST[63:32] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[63:32])
DEST[95:64] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[95:64])
DEST[127:96] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[127:96)
DEST[159:128] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[159:128])
DEST[191:160] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[191:160])
DEST[223:192] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[223:192])
DEST[255:224] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[255:224)
DEST[MAXVL\-1:256] ← 0

.fi
.RE

.SS VCVTDQ2PS (VEX.128 encoded version)
.PP
.RS

.nf
DEST[31:0] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[31:0])
DEST[63:32] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[63:32])
DEST[95:64] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[95:64])
DEST[127:96] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[127z:96)
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS CVTDQ2PS (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[31:0] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[31:0])
DEST[63:32] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[63:32])
DEST[95:64] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[95:64])
DEST[127:96] ← Convert\_Integer\_To\_Single\_Precision\_Floating\_Point(SRC[127z:96)
DEST[MAXVL\-1:128] (unmodified)

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VCVTDQ2PS \_\_m512 \_mm512\_cvtepi32\_ps( \_\_m512i a);

VCVTDQ2PS \_\_m512 \_mm512\_mask\_cvtepi32\_ps( \_\_m512 s, \_\_mmask16 k, \_\_m512i a);

VCVTDQ2PS \_\_m512 \_mm512\_maskz\_cvtepi32\_ps( \_\_mmask16 k, \_\_m512i a);

VCVTDQ2PS \_\_m512 \_mm512\_cvt\_roundepi32\_ps( \_\_m512i a, int r);

VCVTDQ2PS \_\_m512 \_mm512\_mask\_cvt\_roundepi\_ps( \_\_m512 s, \_\_mmask16 k, \_\_m512i a, int r);

VCVTDQ2PS \_\_m512 \_mm512\_maskz\_cvt\_roundepi32\_ps( \_\_mmask16 k, \_\_m512i a, int r);

VCVTDQ2PS \_\_m256 \_mm256\_mask\_cvtepi32\_ps( \_\_m256 s, \_\_mmask8 k, \_\_m256i a);

VCVTDQ2PS \_\_m256 \_mm256\_maskz\_cvtepi32\_ps( \_\_mmask8 k, \_\_m256i a);

VCVTDQ2PS \_\_m128 \_mm\_mask\_cvtepi32\_ps( \_\_m128 s, \_\_mmask8 k, \_\_m128i a);

VCVTDQ2PS \_\_m128 \_mm\_maskz\_cvtepi32\_ps( \_\_mmask8 k, \_\_m128i a);

CVTDQ2PS \_\_m256 \_mm256\_cvtepi32\_ps (\_\_m256i src)

CVTDQ2PS \_\_m128 \_mm\_cvtepi32\_ps (\_\_m128i src)

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
Precision

.SH OTHER EXCEPTIONS
.PP
VEX\-encoded instructions, see Exceptions Type 2;

.PP
EVEX\-encoded instructions, see Exceptions Type E2.

.TS
allbox;
l l 
l l .
#UD	T{
If VEX.vvvv != 1111B or EVEX.vvvv != 1111B.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
