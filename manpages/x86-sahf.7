.nh
.TH "X86-SAHF" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
SAHF - STORE AH INTO FLAGS
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode*\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
9E	SAHF	ZO	Invalid*	Valid	T{
Loads SF, ZF, AF, PF, and CF from AH into EFLAGS register.
T}
.TE

.PP
.RS

.PP
* Valid in specific steppings. See Description section.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Loads the SF, ZF, AF, PF, and CF flags of the EFLAGS register with
values from the corresponding bits in the AH register (bits 7, 6, 4, 2,
and 0, respectively). Bits 1, 3, and 5 of register AH are ignored; the
corresponding reserved bits (1, 3, and 5) in the EFLAGS register remain
as shown in the “Operation” section below.

.PP
This instruction executes as described above in compatibility mode and
legacy mode. It is valid in 64\-bit mode only if
CPUID.80000001H:ECX.LAHF\-SAHF[bit 0] = 1.

.SH OPERATION
.PP
.RS

.nf
IF IA\-64 Mode
    THEN
        IF CPUID.80000001H.ECX[0] = 1;
            THEN
                RFLAGS(SF:ZF:0:AF:0:PF:1:CF) ← AH;
            ELSE
                #UD;
        FI
    ELSE
        EFLAGS(SF:ZF:0:AF:0:PF:1:CF) ← AH;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
The SF, ZF, AF, PF, and CF flags are loaded with values from the AH
register. Bits 1, 3, and 5 of the EFLAGS register are unaffected, with
the values remaining 1, 0, and 0, respectively.

.SH PROTECTED MODE EXCEPTIONS
.PP
None.

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
None.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
None.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
None.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If CPUID.80000001H.ECX
[
0
]
 = 0.
	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
