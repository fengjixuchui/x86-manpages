.nh
.TH "X86-LEA" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
LEA - LOAD EFFECTIVE ADDRESS
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
8D /r	LEA r16,m	RM	Valid	Valid	T{
Store effective address for r16.
T}
8D /r	LEA r32,m	RM	Valid	Valid	T{
Store effective address for r32.
T}
REX.W + 8D /r	LEA r64,m	RM	Valid	N.E.	T{
Store effective address for r64.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Computes the effective address of the second operand (the source
operand) and stores it in the first operand (destination operand). The
source operand is a memory address (offset part) specified with one of
the processors addressing modes; the destination operand is a
general\-purpose register. The address\-size and operand\-size attributes
affect the action performed by this instruction, as shown in the
following table. The operand\-size attribute of the instruction is
determined by the chosen register; the address\-size attribute is
determined by the attribute of the code segment.

.TS
allbox;
l l l 
l l l .
\fB\fCOperand Size\fR	\fB\fCAddress Size\fR	\fB\fCAction Performed\fR
16	16	T{
16\-bit effective address is calculated and stored in requested 16\-bit register destination.
T}
16	32	T{
32\-bit effective address is calculated. The lower 16 bits of the address are stored in the requested 16\-bit register destination.
T}
32	16	T{
16\-bit effective address is calculated. The 16\-bit address is zero\-extended and stored in the requested 32\-bit register destination.
T}
32	32	T{
32\-bit effective address is calculated and stored in the requested 32\-bit register destination.
T}
.TE

.PP
Table 3\-54. Non\-64\-bit Mode LEA Operation with Address and Operand Size
Attributes

.PP
Different assemblers may use different algorithms based on the size
attribute and symbolic reference of the source operand.

.PP
In 64\-bit mode, the instruction’s destination operand is governed by
operand size attribute, the default operand size is 32 bits. Address
calculation is governed by address size attribute, the default address
size is 64\-bits. In 64\-bit mode, address size of 16 bits is not
encodable. See Table 3\-55.

.TS
allbox;
l l l 
l l l .
\fB\fCOperand Size\fR	\fB\fCAddress Size\fR	\fB\fCAction Performed\fR
16	32	T{
32\-bit effective address is calculated (using 67H prefix). The lower 16 bits of the address are stored in the requested 16\-bit register destination (using 66H prefix).
T}
16	64	T{
64\-bit effective address is calculated (default address size). The lower 16 bits of the address are stored in the requested 16\-bit register destination (using 66H prefix).
T}
32	32	T{
32\-bit effective address is calculated (using 67H prefix) and stored in the requested 32\-bit register destination.
T}
32	64	T{
64\-bit effective address is calculated (default address size) and the lower 32 bits of the address are stored in the requested 32\-bit register destination.
T}
64	32	T{
32\-bit effective address is calculated (using 67H prefix), zero\-extended to 64\-bits, and stored in the requested 64\-bit register destination (using REX.W).
T}
64	64	T{
64\-bit effective address is calculated (default address size) and all 64\-bits of the address are stored in the requested 64\-bit register destination (using REX.W).
T}
.TE

.PP
Table 3\-55. 64\-bit Mode LEA Operation with Address and Operand Size
Attributes

.SH OPERATION
.PP
.RS

.nf
IF OperandSize = 16 and AddressSize = 16
    THEN
        DEST ← EffectiveAddress(SRC); (* 16\-bit address *)
    ELSE IF OperandSize = 16 and AddressSize = 32
        THEN
            temp ← EffectiveAddress(SRC); (* 32\-bit address *)
            DEST ← temp[0:15]; (* 16\-bit address *)
        FI;
    ELSE IF OperandSize = 32 and AddressSize = 16
        THEN
            temp ← EffectiveAddress(SRC); (* 16\-bit address *)
            DEST ← ZeroExtend(temp); (* 32\-bit address *)
        FI;
    ELSE IF OperandSize = 32 and AddressSize = 32
        THEN
            DEST ← EffectiveAddress(SRC); (* 32\-bit address *)
        FI;
    ELSE IF OperandSize = 16 and AddressSize = 64
        THEN
            temp ← EffectiveAddress(SRC); (* 64\-bit address *)
            DEST ← temp[0:15]; (* 16\-bit address *)
        FI;
    ELSE IF OperandSize = 32 and AddressSize = 64
        THEN
            temp ← EffectiveAddress(SRC); (* 64\-bit address *)
            DEST ← temp[0:31]; (* 16\-bit address *)
        FI;
    ELSE IF OperandSize = 64 and AddressSize = 64
        THEN
            DEST ← EffectiveAddress(SRC); (* 64\-bit address *)
        FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
If source operand is not a memory location.
T}
	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
