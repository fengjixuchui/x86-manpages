.nh
.TH "X86-VFPCLASSSD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VFPCLASSSD - TESTS TYPES OF A SCALAR FLOAT64 VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.LIG.66.0F3A.W1 67 /r ib VFPCLASSSD k2 {k1}, xmm2/m64, imm8
T}
	A	V/V	AVX512DQ	T{
Tests the input for the following categories: NaN, +0, \-0, +Infinity, \-Infinity, denormal, finite negative. The immediate field provides a mask bit for each of these category tests. The masked test results are OR\-ed together to form a mask result.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Tuple1 Scalar	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SS Description
.PP
The FPCLASSSD instruction checks the low double precision floating point
value in the source operand for special categories, specified by the set
bits in the imm8 byte. Each set bit in imm8 specifies a category of
floating\-point values that the input data element is classified against.
The classified results of all specified categories of an input value are
ORed together to form the final boolean result for the input element.
The result is written to the low bit in a mask register k2 according to
the writemask k1. Bits MAX\_KL\-1: 1 of the destination are cleared.

.PP
The classification categories specified by imm8 are shown in Figure
5\-13. The classification test for each category is listed in Table 5\-13\&.

.PP
EVEX.vvvv is reserved and must be 1111b otherwise instructions will
#UD.

.SS Operation
.PP
.RS

.nf
CheckFPClassDP (tsrc[63:0], imm8[7:0]){
    NegNum ←tsrc[63];
    IF (tsrc[62:52]=07FFh) Then ExpAllOnes←1; FI;
    IF (tsrc[62:52]=0h) Then ExpAllZeros←1;
    IF (ExpAllZeros AND MXCSR.DAZ) Then
        MantAllZeros ← 1;
    ELSIF (tsrc[51:0]=0h) Then
        MantAllZeros ← 1;
    FI;
    ZeroNumber←ExpAllZeros AND MantAllZeros
    SignalingBit ← tsrc[51];
    sNaN\_res←ExpAllOnes AND NOT(MantAllZeros) AND NOT(SignalingBit); // sNaN
    qNaN\_res←ExpAllOnes AND NOT(MantAllZeros) AND SignalingBit; // qNaN
    Pzero\_res←NOT(NegNum) AND ExpAllZeros AND MantAllZeros; // +0
    Nzero\_res←NegNum AND ExpAllZeros AND MantAllZeros; // \-0
    PInf\_res←NOT(NegNum) AND ExpAllOnes AND MantAllZeros; // +Inf
    NInf\_res←NegNum AND ExpAllOnes AND MantAllZeros; // \-Inf
    Denorm\_res←ExpAllZeros AND NOT(MantAllZeros); // denorm
    FinNeg\_res←NegNum AND NOT(ExpAllOnes) AND NOT(ZeroNumber); // \-finite
    bResult = ( imm8[0] AND qNaN\_res ) OR (imm8[1] AND Pzero\_res ) OR
            ( imm8[2] AND Nzero\_res ) OR ( imm8[3] AND PInf\_res ) OR
            ( imm8[4] AND NInf\_res ) OR ( imm8[5] AND Denorm\_res ) OR
            ( imm8[6] AND FinNeg\_res ) OR ( imm8[7] AND sNaN\_res );
    Return bResult;
} //* end of CheckFPClassDP() *//

.fi
.RE

.SS VFPCLASSSD (EVEX encoded version)
.PP
.RS

.nf
IF k1[0] OR *no writemask*
    THEN DEST[0]←
        CheckFPClassDP(SRC1[63:0], imm8[7:0])
    ELSE DEST[0]←0 ; zeroing\-masking only
FI;
DEST[MAX\_KL\-1:1] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VFPCLASSSD \_\_mmask8 \_mm\_fpclass\_sd\_mask( \_\_m128d a, int c)

VFPCLASSSD \_\_mmask8 \_mm\_mask\_fpclass\_sd\_mask( \_\_mmask8 m, \_\_m128d a, int c)

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
See Exceptions Type E6

.TS
allbox;
l l 
l l .
#UD	If EVEX.vvvv != 1111B.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
