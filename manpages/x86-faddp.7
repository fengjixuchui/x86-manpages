.nh
.TH "X86-FADD-FADDP-FIADD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FADD-FADDP-FIADD - ADD
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
D8 /0	FADD m32fp	Valid	Valid	T{
Add m32fp to ST(0) and store result in ST(0).
T}
DC /0	FADD m64fp	Valid	Valid	T{
Add m64fp to ST(0) and store result in ST(0).
T}
D8 C0+i	FADD ST(0), ST(i)	Valid	Valid	T{
Add ST(0) to ST(i) and store result in ST(0).
T}
DC C0+i	FADD ST(i), ST(0)	Valid	Valid	T{
Add ST(i) to ST(0) and store result in ST(i).
T}
DE C0+i	FADDP ST(i), ST(0)	Valid	Valid	T{
Add ST(0) to ST(i), store result in ST(i), and pop the register stack.
T}
DE C1	FADDP	Valid	Valid	T{
Add ST(0) to ST(1), store result in ST(1), and pop the register stack.
T}
DA /0	FIADD m32int	Valid	Valid	T{
Add m32int to ST(0) and store result in ST(0).
T}
DE /0	FIADD m16int	Valid	Valid	T{
Add m16int to ST(0) and store result in ST(0).
T}
.TE

.SH DESCRIPTION
.PP
Adds the destination and source operands and stores the sum in the
destination location. The destination operand is always an FPU register;
the source operand can be a register or a memory location. Source
operands in memory can be in single\-precision or double\-precision
floating\-point format or in word or doubleword integer format.

.PP
The no\-operand version of the instruction adds the contents of the ST(0)
register to the ST(1) register. The one\-operand version adds the
contents of a memory location (either a floating\-point or an integer
value) to the contents of the ST(0) register. The two\-operand version,
adds the contents of the ST(0) register to the ST(i) register or vice
versa. The value in ST(0) can be doubled by coding:

.PP
FADD ST(0), ST(0);

.PP
The FADDP instructions perform the additional operation of popping the
FPU register stack after storing the result. To pop the register stack,
the processor marks the ST(0) register as empty and increments the stack
pointer (TOP) by 1. (The no\-operand version of the floating\-point add
instructions always results in the register stack being popped. In some
assemblers, the mnemonic for this instruction is FADD rather than
FADDP.)

.PP
The FIADD instructions convert an integer source operand to double
extended\-precision floating\-point format before performing the addition.

.PP
The table on the following page shows the results obtained when adding
various classes of numbers, assuming that neither overflow nor underflow
occurs.

.PP
When the sum of two operands with opposite signs is 0, the result is +0,
except for the round toward −∞ mode, in which case the result is −0.
When the source operand is an integer 0, it is treated as a +0.

.PP
When both operand are infinities of the same sign, the result is ∞ of
the expected sign. If both operands are infinities of opposite signs, an
invalid\-operation exception is generated. See Table 3\-18.

.PP
DEST

.PP
SRC

.PP
−∞

.PP
−F

.PP
−0

.PP
+0

.PP
+F

.PP
+∞

.PP
NaN

.PP
−∞

.PP
−∞

.PP
−∞

.PP
−∞

.PP
−∞

.PP
−∞

.PP
*

.PP
NaN

.PP
− F or − I

.PP
−∞

.PP
−F

.PP
SRC

.PP
SRC

.PP
± F or ± 0

.PP
+∞

.PP
NaN

.PP
−0

.PP
−∞

.PP
DEST

.PP
−0

.PP
±0

.PP
DEST

.PP
+∞

.PP
NaN

.PP
+0

.PP
−∞

.PP
DEST

.PP
±0

.PP
+0

.PP
DEST

.PP
+∞

.PP
NaN

.PP
+ F or + I

.PP
−∞

.PP
± F or ± 0

.PP
SRC

.PP
SRC

.PP
+F

.PP
+∞

.PP
NaN

.PP
+∞

.PP
*

.PP
+∞

.PP
+∞

.PP
+∞

.PP
+∞

.PP
+∞

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
Table 3\-18. FADD/FADDP/FIADD Results

.PP
.RS

.PP
F Means finite floating\-point value.

.PP
I Means integer.

.PP
* Indicatesfloating\-pointinvalid\-arithmetic\-operand(#IA)exception.

.RE

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
IF Instruction = FIADD
    THEN
        DEST ← DEST + ConvertToDoubleExtendedPrecisionFP(SRC);
    ELSE (* Source operand is floating\-point value *)
        DEST ← DEST + SRC;
FI;
IF Instruction = FADDP
    THEN
        PopRegisterStack;
FI;

.fi
.RE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
C1	T{
Set to 0 if stack underflow occurred.
T}
	T{
Set if result was rounded up; cleared otherwise.
T}
C0, C2, C3	Undefined.
.TE

.SH FLOATING\-POINT EXCEPTIONS
.TS
allbox;
l l 
l l .
#IS	Stack underflow occurred.
#IA	T{
Operand is an SNaN value or unsupported format.
T}
	T{
Operands are infinities of unlike sign.
T}
#D	T{
Source operand is a denormal value.
T}
#U	T{
Result is too small for destination format.
T}
#O	T{
Result is too large for destination format.
T}
#P	T{
Value cannot be represented exactly in destination format.
T}
.TE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
