.nh
.TH "X86-POPF-POPFD-POPFQ" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
POPF-POPFD-POPFQ - POP STACK INTO EFLAGS REGISTER
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
9D	POPF	ZO	Valid	Valid	T{
Pop top of stack into lower 16 bits of EFLAGS.
T}
9D	POPFD	ZO	N.E.	Valid	Pop top of stack into EFLAGS.
9D	POPFQ	ZO	Valid	N.E.	T{
Pop top of stack and zero\-extend into RFLAGS.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Pops a doubleword (POPFD) from the top of the stack (if the current
operand\-size attribute is 32) and stores the value in the EFLAGS
register, or pops a word from the top of the stack (if the operand\-size
attribute is 16) and stores it in the lower 16 bits of the EFLAGS
register (that is, the FLAGS register). These instructions reverse the
operation of the PUSHF/PUSHFD/PUSHFQ instructions.

.PP
The POPF (pop flags) and POPFD (pop flags double) mnemonics reference
the same opcode. The POPF instruction is intended for use when the
operand\-size attribute is 16; the POPFD instruction is intended for use
when the operand\-size attribute is 32. Some assemblers may force the
operand size to 16 for POPF and to 32 for POPFD. Others may treat the
mnemonics as synonyms (POPF/POPFD) and use the setting of the
operand\-size attribute to determine the size of values to pop from the
stack.

.PP
The effect of POPF/POPFD on the EFLAGS register changes, depending on
the mode of operation. See Table 4\-15 and the key below for details.

.PP
When operating in protected, compatibility, or 64\-bit mode at privilege
level 0 (or in real\-address mode, the equivalent to privilege level 0),
all non\-reserved flags in the EFLAGS register except RF1, VIP, VIF, and
VM may be modified. VIP, VIF and VM remain unaffected.

.PP
.RS

.PP
1\&. RF is always zero after the execution of POPF. This is because
POPF, like all instructions, clears RF as it begins to execute.

.RE

.PP
When operating in protected, compatibility, or 64\-bit mode with a
privilege level greater than 0, but less than or equal to IOPL, all
flags can be modified except the IOPL field and RF, IF, VIP, VIF, and
VM; these remain unaffected. The AC and ID flags can only be modified if
the operand\-size attribute is 32. The interrupt flag (IF) is altered
only when executing at a level at least as privileged as the IOPL. If a
POPF/POPFD instruction is executed with insufficient privilege, an
exception does not occur but privileged bits do not change.

.PP
When operating in virtual\-8086 mode (EFLAGS.VM = 1) without the
virtual\-8086 mode extensions (CR4.VME = 0), the POPF/POPFD instructions
can be used only if IOPL = 3; otherwise, a general\-protection exception
(#GP) occurs. If the virtual\-8086 mode extensions are enabled (CR4.VME
= 1), POPF (but not POPFD) can be executed in virtual\-8086 mode with
IOPL \&lt; 3.

.PP
(The protected\-mode virtual\-interrupt feature — enabled by setting
CR4.PVI — affects the CLI and STI instructions in the same manner as the
virtual\-8086 mode extensions. POPF, however, is not affected by
CR4.PVI.)

.PP
In 64\-bit mode, the mnemonic assigned is POPFQ (note that the 32\-bit
operand is not encodable). POPFQ pops 64 bits from the stack. Reserved
bits of RFLAGS (including the upper 32 bits of RFLAGS) are not affected.

.PP
See Chapter 3 of the Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 1, for more information about the EFLAGS
registers.

.PP
Mode

.PP
Operand Size

.PP
CPL

.PP
IOPL

.PP
Flags

.PP
Notes

.PP
21

.PP
20

.PP
19

.PP
18

.PP
17

.PP
16

.PP
14

.PP
13:12

.PP
11

.PP
10

.PP
9

.PP
8

.PP
7

.PP
6

.PP
4

.PP
2

.PP
0

.PP
ID

.PP
VIP

.PP
VIF

.PP
AC

.PP
VM

.PP
RF

.PP
NT

.PP
IOPL

.PP
OF

.PP
DF

.PP
IF

.PP
TF

.PP
SF

.PP
ZF

.PP
AF

.PP
PF

.PP
CF

.PP
Real\-Address Mode (CR0.PE = 0)

.PP
16

.PP
0

.PP
0\-3

.PP
N

.PP
N

.PP
N

.PP
N

.PP
N

.PP
0

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
32

.PP
0

.PP
0\-3

.PP
S

.PP
N

.PP
N

.PP
S

.PP
N

.PP
0

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
Protected, Compatibility, and 64\-Bit Modes (CR0.PE = 1 EFLAGS.VM = 0)

.PP
16

.PP
0

.PP
0\-3

.PP
N

.PP
N

.PP
N

.PP
N

.PP
N

.PP
0

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
16

.PP
1\-3

.PP
\&lt;CPL

.PP
N

.PP
N

.PP
N

.PP
N

.PP
N

.PP
0

.PP
S

.PP
N

.PP
S

.PP
S

.PP
N

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
16

.PP
1\-3

.PP
≥CPL

.PP
N

.PP
N

.PP
N

.PP
N

.PP
N

.PP
0

.PP
S

.PP
N

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
32, 64

.PP
0

.PP
0\-3

.PP
S

.PP
N

.PP
N

.PP
S

.PP
N

.PP
0

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
32, 64

.PP
1\-3

.PP
\&lt;CPL

.PP
S

.PP
N

.PP
N

.PP
S

.PP
N

.PP
0

.PP
S

.PP
N

.PP
S

.PP
S

.PP
N

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
32, 64

.PP
1\-3

.PP
≥CPL

.PP
S

.PP
N

.PP
N

.PP
S

.PP
N

.PP
0

.PP
S

.PP
N

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
Virtual\-8086 (CR0.PE = 1 EFLAGS.VM = 1 CR4.VME = 0)

.PP
16

.PP
3

.PP
0\-2

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
1

.PP
16

.PP
3

.PP
3

.PP
N

.PP
N

.PP
N

.PP
N

.PP
N

.PP
0

.PP
S

.PP
N

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
32

.PP
3

.PP
0\-2

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
1

.PP
32

.PP
3

.PP
3

.PP
S

.PP
N

.PP
N

.PP
S

.PP
N

.PP
0

.PP
S

.PP
N

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
VME (CR0.PE = 1 EFLAGS.VM = 1 CR4.VME = 1)

.PP
16

.PP
3

.PP
0\-2

.PP
N/X

.PP
N/X

.PP
SV/X

.PP
N/X

.PP
N/X

.PP
0/X

.PP
S/X

.PP
N/X

.PP
S/X

.PP
S/X

.PP
N/X

.PP
S/X

.PP
S/X

.PP
S/X

.PP
S/X

.PP
S/X

.PP
S/X

.PP
2,3

.PP
16

.PP
3

.PP
3

.PP
N

.PP
N

.PP
N

.PP
N

.PP
N

.PP
0

.PP
S

.PP
N

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
32

.PP
3

.PP
0\-2

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
X

.PP
1

.PP
32

.PP
3

.PP
3

.PP
S

.PP
N

.PP
N

.PP
S

.PP
N

.PP
0

.PP
S

.PP
N

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
S

.PP
Table 4\-15. Effect of POPF/POPFD on the EFLAGS Register

.PP
.RS

.PP
1\&. #GP fault \- no flag update

.PP
2\&. #GP fault with no flag update if VIP=1 in EFLAGS register and
IF=1 in FLAGS value on stack

.PP
3\&. #GP fault with no flag update if TF=1 in FLAGS value on stack

.RE

.PP
Key

.PP
S

.PP
Updated from stack

.PP
SV

.PP
Updated from IF (bit 9) in FLAGS value on stack

.PP
N

.PP
No change in value

.PP
X

.PP
No EFLAGS update

.PP
0

.PP
Value is cleared

.SH OPERATION
.PP
.RS

.nf
IF EFLAGS.VM = 0 (* Not in Virtual\-8086 Mode *)
    THEN IF CPL = 0 OR CR0.PE = 0
        THEN
            IF OperandSize = 32;
                THEN
                    EFLAGS ← Pop(); (* 32\-bit pop *)
                    (* All non\-reserved flags except RF, VIP, VIF, and VM can be modified;
                    VIP, VIF, VM, and all reserved bits are unaffected. RF is cleared. *)
                ELSE IF (Operandsize = 64)
                    RFLAGS = Pop(); (* 64\-bit pop *)
                    (* All non\-reserved flags except RF, VIP, VIF, and VM can be modified;
                    VIP, VIF, VM, and all reserved bits are unaffected. RF is cleared. *)
                ELSE (* OperandSize = 16 *)
                    EFLAGS[15:0] ← Pop(); (* 16\-bit pop *)
                    (* All non\-reserved flags can be modified. *)
            FI;
        ELSE (* CPL > 0 *)
            IF OperandSize = 32
                THEN
                    IF CPL > IOPL
                        THEN
                            EFLAGS ← Pop(); (* 32\-bit pop *)
                            (* All non\-reserved bits except IF, IOPL, VIP, VIF, VM and RF can be modified;
                            IF, IOPL, VIP, VIF, VM and all reserved bits are unaffected; RF is cleared. *)
                        ELSE
                            EFLAGS ← Pop(); (* 32\-bit pop *)
                            (* All non\-reserved bits except IOPL, VIP, VIF, VM and RF can be modified;
                            IOPL, VIP, VIF, VM and all reserved bits are unaffected; RF is cleared. *)
                    FI;
                ELSE IF (Operandsize = 64)
                    IF CPL > IOPL
                        THEN
                            RFLAGS ← Pop(); (* 64\-bit pop *)
                            (* All non\-reserved bits except IF, IOPL, VIP, VIF, VM and RF can be modified;
                            IF, IOPL, VIP, VIF, VM and all reserved bits are unaffected; RF is cleared. *)
                        ELSE
                            RFLAGS ← Pop(); (* 64\-bit pop *)
                            (* All non\-reserved bits except IOPL, VIP, VIF, VM and RF can be modified;
                            IOPL, VIP, VIF, VM and all reserved bits are unaffected; RF is cleared. *)
                    FI;
                ELSE (* OperandSize = 16 *)
                    EFLAGS[15:0] ← Pop(); (* 16\-bit pop *)
                    (* All non\-reserved bits except IOPL can be modified; IOPL and all
                    reserved bits are unaffected. *)
            FI;
        FI;
    ELSE (* In virtual\-8086 mode *)
        IF IOPL = 3
            THEN
                IF OperandSize = 32
                    THEN
                        EFLAGS ← Pop();
                        (* All non\-reserved bits except IOPL, VIP, VIF, VM, and RF can be modified;
                        VIP, VIF, VM, IOPL and all reserved bits are unaffected. RF is cleared. *)
                    ELSE
                        EFLAGS[15:0] ← Pop(); FI;
                        (* All non\-reserved bits except IOPL can be modified; IOPL and all reserved bits are unaffected. *)
                FI;
            ELSE (* IOPL < 3 *)
                IF (Operandsize = 32) OR (CR4.VME = 0)
                    THEN #GP(0); (* Trap to virtual\-8086 monitor. *)
                    ELSE (* Operandsize = 16 and CR4.VME = 1 *)
                        tempFLAGS ← Pop();
                        IF (EFLAGS.VIP = 1 AND tempFLAGS[9] = 1) OR tempFLAGS[8] = 1
                            THEN #GP(0);
                            ELSE
                                EFLAGS.VIF ← tempFLAGS[9];
                                EFLAGS[15:0] ← tempFLAGS;
                                (* All non\-reserved bits except IOPL and IF can be modified;
                                IOPL, IF, and all reserved bits are unaffected. *)
                        FI;
                FI;
        FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
All flags may be affected; see the Operation section for details.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If the top of stack is not within the stack segment.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If an unaligned memory reference is made while CPL = 3 and alignment checking is enabled.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS	T{
If the top of stack is not within the stack segment.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
#GP(0)

.PP
If IOPL \&lt; 3 and VME is not enabled.

.PP
If IOPL \&lt; 3 and the 32\-bit operand size is used.

.PP
If IOPL \&lt; 3, EFLAGS.VIP = 1, and bit 9 (IF) is set in the FLAGS value
on the stack.

.PP
If IOPL \&lt; 3 and bit 8 (TF) is set in the FLAGS value on the stack.

.PP
If an attempt is made to execute the POPF/POPFD instruction with an
operand\-size override prefix.

.PP
#SS(0)

.PP
If the top of stack is not within the stack segment.

.PP
#PF(fault\-code)

.PP
If a page fault occurs.

.PP
#AC(0)

.PP
If an unaligned memory reference is made while alignment checking is
enabled.

.PP
#UD

.PP
If the LOCK prefix is used.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same as for protected mode exceptions.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#SS(0)	T{
If the stack address is in a non\-canonical form.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
