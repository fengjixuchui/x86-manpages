.nh
.TH "X86-UCOMISS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
UCOMISS - UNORDERED COMPARE SCALAR SINGLE-PRECISION FLOATING-POINT VALUES AND SET EFLAGS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
NP 0F 2E /r UCOMISS xmm1, xmm2/m32
T}
	A	V/V	SSE	T{
Compare low single\-precision floating\-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.
T}
T{
VEX.LIG.0F.WIG 2E /r VUCOMISS xmm1, xmm2/m32
T}
	A	V/V	AVX	T{
Compare low single\-precision floating\-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.
T}
T{
EVEX.LIG.0F.W0 2E /r VUCOMISS xmm1, xmm2/m32{sae}
T}
	B	V/V	AVX512F	T{
Compare low single\-precision floating\-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r)	ModRM:r/m (r)	NA	NA
B	Tuple1 Scalar	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SS Description
.PP
Compares the single\-precision floating\-point values in the low
doublewords of operand 1 (first operand) and operand 2 (second operand),
and sets the ZF, PF, and CF flags in the EFLAGS register according to
the result (unordered, greater than, less than, or equal). The OF, SF
and AF flags in the EFLAGS register are set to 0. The unordered result
is returned if either source operand is a NaN (QNaN or SNaN).

.PP
Operand 1 is an XMM register; operand 2 can be an XMM register or a 32
bit memory location.

.PP
The UCOMISS instruction differs from the COMISS instruction in that it
signals a SIMD floating\-point invalid operation exception (#I) only if
a source operand is an SNaN. The COMISS instruction signals an invalid
numeric exception when a source operand is either a QNaN or SNaN.

.PP
The EFLAGS register is not updated if an unmasked SIMD floating\-point
exception is generated.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise
instructions will #UD.

.PP
Software should ensure VCOMISS is encoded with VEX.L=0. Encoding VCOMISS
with VEX.L=1 may encounter unpredictable behavior across different
processor generations.

.SS Operation
.SS (V)UCOMISS (all versions)
.PP
.RS

.nf
RESULT← UnorderedCompare(DEST[31:0] <> SRC[31:0]) {
(* Set EFLAGS *) CASE (RESULT) OF
    UNORDERED: ZF,PF,CF←111;
    GREATER\_THAN: ZF,PF,CF←000;
    LESS\_THAN: ZF,PF,CF←001;
    EQUAL: ZF,PF,CF←100;
ESAC;
OF, AF, SF←0; }

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VUCOMISS int \_mm\_comi\_round\_ss(\_\_m128 a, \_\_m128 b, int imm, int sae);

UCOMISS int \_mm\_ucomieq\_ss(\_\_m128 a, \_\_m128 b);

UCOMISS int \_mm\_ucomilt\_ss(\_\_m128 a, \_\_m128 b);

UCOMISS int \_mm\_ucomile\_ss(\_\_m128 a, \_\_m128 b);

UCOMISS int \_mm\_ucomigt\_ss(\_\_m128 a, \_\_m128 b);

UCOMISS int \_mm\_ucomige\_ss(\_\_m128 a, \_\_m128 b);

UCOMISS int \_mm\_ucomineq\_ss(\_\_m128 a, \_\_m128 b);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
Invalid (if SNaN Operands), Denormal

.SS Other Exceptions
.PP
VEX\-encoded instructions, see Exceptions Type 3; additionally

.TS
allbox;
l l 
l l .
#UD	If VEX.vvvv != 1111B.
.TE

.PP
EVEX\-encoded instructions, see Exceptions Type E3NF.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
