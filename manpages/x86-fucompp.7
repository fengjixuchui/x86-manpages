.nh
.TH "X86-FUCOM-FUCOMP-FUCOMPP" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FUCOM-FUCOMP-FUCOMPP - UNORDERED COMPARE FLOATING POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
DD E0+i	FUCOM ST(i)	Valid	Valid	Compare ST(0) with ST(i).
DD E1	FUCOM	Valid	Valid	Compare ST(0) with ST(1).
DD E8+i	FUCOMP ST(i)	Valid	Valid	T{
Compare ST(0) with ST(i) and pop register stack.
T}
DD E9	FUCOMP	Valid	Valid	T{
Compare ST(0) with ST(1) and pop register stack.
T}
DA E9	FUCOMPP	Valid	Valid	T{
Compare ST(0) with ST(1) and pop register stack twice.
T}
.TE

.SH DESCRIPTION
.PP
Performs an unordered comparison of the contents of register ST(0) and
ST(i) and sets condition code flags C0, C2, and C3 in the FPU status
word according to the results (see the table below). If no operand is
specified, the contents of registers ST(0) and ST(1) are compared. The
sign of zero is ignored, so that –0.0 is equal to +0.0.

.TS
allbox;
l l l l 
l l l l .
\fB\fCComparison Results*\fR	\fB\fCC3\fR	\fB\fCC2\fR	\fB\fCC0\fR
ST0 \&gt; ST(i)	0	0	0
ST0 \&lt; ST(i)	0	0	1
ST0 = ST(i)	1	0	0
Unordered	1	1	1
.TE

.PP
Table 3\-41. FUCOM/FUCOMP/FUCOMPP Results

.PP
.RS

.PP
*
Flagsnotsetifunmaskedinvalid\-arithmetic\-operand(#IA)exceptionisgenerated.

.RE

.PP
An unordered comparison checks the class of the numbers being compared
(see “FXAM—Examine Floating\-Point” in this chapter). The
FUCOM/FUCOMP/FUCOMPP instructions perform the same operations as the
FCOM/FCOMP/FCOMPP instructions. The only difference is that the
FUCOM/FUCOMP/FUCOMPP instructions raise the invalid\-arithmetic\-operand
exception (#IA) only when either or both operands are an SNaN or are in
an unsupported format; QNaNs cause the condition code flags to be set to
unordered, but do not cause an exception to be generated. The
FCOM/FCOMP/FCOMPP instructions raise an invalid\-operation exception when
either or both of the operands are a NaN value of any kind or are in an
unsupported format.

.PP
As with the FCOM/FCOMP/FCOMPP instructions, if the operation results in
an invalid\-arithmetic\-operand exception being raised, the condition code
flags are set only if the exception is masked.

.PP
The FUCOMP instruction pops the register stack following the comparison
operation and the FUCOMPP instruction pops the register stack twice
following the comparison operation. To pop the register stack, the
processor marks the ST(0) register as empty and increments the stack
pointer (TOP) by 1.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
CASE (relation of operands) OF
    ST > SRC:
                        C3, C2, C0 ← 000;
    ST < SRC:
                        C3, C2, C0 ← 001;
    ST = SRC:
                        C3, C2, C0 ← 100;
ESAC;
IF ST(0) or SRC = QNaN, but not SNaN or unsupported format
    THEN
        C3, C2, C0 ← 111;
    ELSE (* ST(0) or SRC is SNaN or unsupported format *)
            #IA;
        IF FPUControlWord.IM = 1
                THEN
                    C3, C2, C0 ← 111;
        FI;
FI;
IF Instruction = FUCOMP
    THEN
        PopRegisterStack;
FI;
IF Instruction = FUCOMPP
    THEN
        PopRegisterStack;
FI;

.fi
.RE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
C1	T{
Set to 0 if stack underflow occurred.
T}
C0, C2, C3	See Table 3\-41.
.TE

.SH FLOATING\-POINT EXCEPTIONS
.TS
allbox;
l l 
l l .
#IS	Stack underflow occurred.
#IA	T{
One or both operands are SNaN values or have unsupported formats. Detection of a QNaN value in and of itself does not raise an invalid\-operand exception.
T}
#D	T{
One or both operands are denormal values.
T}
.TE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
