.nh
.TH "X86-BOUND" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
BOUND - CHECK ARRAY INDEX AGAINST BOUNDS
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
62 /r	BOUND r16, m16\&16	RM	Invalid	Valid	Check if m16\&16.
62 /r	BOUND r32, m32\&32	RM	Invalid	Valid	Check if m32\&32.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (r)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
BOUND determines if the first operand (array index) is within the bounds
of an array specified the second operand (bounds operand). The array
index is a signed integer located in a register. The bounds operand is a
memory location that contains a pair of signed doubleword\-integers (when
the operand\-size attribute is 32) or a pair of signed word\-integers
(when the operand\-size attribute is 16). The first doubleword (or word)
is the lower bound of the array and the second doubleword (or word) is
the upper bound of the array. The array index must be greater than or
equal to the lower bound and less than or equal to the upper bound plus
the operand size in bytes. If the index is not within bounds, a BOUND
range exceeded exception (#BR) is signaled. When this exception is
generated, the saved return instruction pointer points to the BOUND
instruction.

.PP
The bounds limit data structure (two words or doublewords containing the
lower and upper limits of the array) is usually placed just before the
array itself, making the limits addressable via a constant offset from
the beginning of the array. Because the address of the array already
will be present in a register, this practice avoids extra bus cycles to
obtain the effective address of the array bounds.

.PP
This instruction executes as described in compatibility mode and legacy
mode. It is not valid in 64\-bit mode.

.SH OPERATION
.PP
.RS

.nf
IF 64bit Mode
    THEN
        #UD;
    ELSE
        IF (ArrayIndex < LowerBound OR ArrayIndex > UpperBound) THEN
        (* Below lower bound or above upper bound *)
            IF <equation for PL enabled> THEN BNDSTATUS ← 0
            #BR;
        FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#BR	If the bounds test fails.
#UD	T{
If second operand is not a memory location.
T}
	If the LOCK prefix is used.
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#BR	If the bounds test fails.
#UD	T{
If second operand is not a memory location.
T}
	If the LOCK prefix is used.
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#BR	If the bounds test fails.
#UD	T{
If second operand is not a memory location.
T}
	If the LOCK prefix is used.
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If in 64\-bit mode.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
