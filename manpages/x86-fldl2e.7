.nh
.TH "X86-FLD1-FLDL2T-FLDL2E-FLDPI-FLDLG2-FLDLN2-FLDZ" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FLD1-FLDL2T-FLDL2E-FLDPI-FLDLG2-FLDLN2-FLDZ - LOAD CONSTANT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode*\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
D9 E8	FLD1	Valid	Valid	T{
Push +1.0 onto the FPU register stack.
T}
D9 E9	FLDL2T	Valid	Valid	Push log
2
T{
10 onto the FPU register stack.
T}
D9 EA	FLDL2E	Valid	Valid	Push log
2
e onto the FPU register stack.
D9 EB	FLDPI	Valid	Valid	T{
Push π onto the FPU register stack.
T}
D9 EC	FLDLG2	Valid	Valid	Push log
10
2 onto the FPU register stack.
D9 ED	FLDLN2	Valid	Valid	Push log
e
2 onto the FPU register stack.
D9 EE	FLDZ	Valid	Valid	T{
Push +0.0 onto the FPU register stack.
T}
.TE

.PP
.RS

.PP
* SeeIA\-32ArchitectureCompatibilitysectionbelow.

.RE

.SH DESCRIPTION
.PP
Push one of seven commonly used constants (in double extended\-precision
floating\-point format) onto the FPU register stack. The constants that
can be loaded with these instructions include +1.0, +0.0,
log210, log2e, π, log102, and
loge2. For each constant, an internal 66\-bit constant is
rounded (as specified by the RC field in the FPU control word) to double
extended\-precision floating\-point format. The inexact\-result exception
(#P) is not generated as a result of the rounding, nor is the C1 flag
set in the x87 FPU status word if the value is rounded up.

.PP
See the section titled “Approximation of Pi” in Chapter 8 of the Intel®
64 and IA\-32 Architectures Software Developer’s Manual, Volume 1, for a
description of the π constant.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH IA\-32 ARCHITECTURE COMPATIBILITY
.PP
When the RC field is set to round\-to\-nearest, the FPU produces the same
constants that is produced by the Intel 8087 and Intel 287 math
coprocessors.

.SH OPERATION
.PP
.RS

.nf
TOP ← TOP − 1;
ST(0) ← CONSTANT;

.fi
.RE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
C1	T{
Set to 1 if stack overflow occurred; otherwise, set to 0.
T}
C0, C2, C3	Undefined.
.TE

.SH FLOATING\-POINT EXCEPTIONS
.TS
allbox;
l l 
l l .
#IS	Stack overflow occurred.
.TE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
