.nh
.TH "X86-ADC" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ADC - ADD WITH CARRY
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
14 ib	ADC AL, imm8	I	Valid	Valid	Add with carry imm8 to AL.
15 iw	ADC AX, imm16	I	Valid	Valid	Add with carry imm16 to AX.
15 id	ADC EAX, imm32	I	Valid	Valid	Add with carry imm32 to EAX.
REX.W + 15 id	ADC RAX, imm32	I	Valid	N.E.	T{
Add with carry imm32 sign extended to 64\-bits to RAX.
T}
80 /2 ib	ADC imm8	MI	Valid	Valid	Add with carry r/m8.
REX + 80 /2 ib	ADC imm8	MI	Valid	N.E.	Add with carry r/m8.
81 /2 iw	ADC r/m16, imm16	MI	Valid	Valid	Add with carry r/m16.
81 /2 id	ADC r/m32, imm32	MI	Valid	Valid	Add with CF r/m32.
REX.W + 81 /2 id	ADC r/m64, imm32	MI	Valid	N.E.	Add with CF r/m64.
83 /2 ib	ADC r/m16, imm8	MI	Valid	Valid	T{
Add with CF sign\-extended r/m16.
T}
83 /2 ib	ADC r/m32, imm8	MI	Valid	Valid	T{
Add with CF sign\-extended r/m32.
T}
REX.W + 83 /2 ib	ADC r/m64, imm8	MI	Valid	N.E.	T{
Add with CF sign\-extended r/m64.
T}
10 /r	ADC r/m8, r8	MR	Valid	Valid	T{
Add with carry byte register to r/m8.
T}
REX + 10 /r	ADC r/m8*	MR	Valid	N.E.	T{
Add with carry byte register to r/m64.
T}
11 /r	ADC r/m16, r16	MR	Valid	Valid	Add with carry r/m16.
11 /r	ADC r/m32, r32	MR	Valid	Valid	Add with CF r/m32.
REX.W + 11 /r	ADC r/m64, r64	MR	Valid	N.E.	Add with CF r/m64.
12 /r	ADC r8, r/m8	RM	Valid	Valid	T{
Add with carry r/m8 to byte register.
T}
REX + 12 /r	ADC r8*	RM	Valid	N.E.	T{
Add with carry r/m64 to byte register.
T}
13 /r	ADC r16, r/m16	RM	Valid	Valid	Add with carry r16.
13 /r	ADC r32, r/m32	RM	Valid	Valid	Add with CF r32.
REX.W + 13 /r	ADC r64, r/m64	RM	Valid	N.E.	Add with CF r64.
.TE

.PP
.RS

.PP
*In 64\-bit mode, r/m8 can not be encoded to access the following byte
registers if a REX prefix is used: AH, BH, CH, DH.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
MR	ModRM:r/m (r, w)	ModRM:reg (r)	NA	NA
MI	ModRM:r/m (r, w)	imm8/16/32	NA	NA
I	AL/AX/EAX/RAX	imm8/16/32	NA	NA
.TE

.SH DESCRIPTION
.PP
Adds the destination operand (first operand), the source operand (second
operand), and the carry (CF) flag and stores the result in the
destination operand. The destination operand can be a register or a
memory location; the source operand can be an immediate, a register, or
a memory location. (However, two memory operands cannot be used in one
instruction.) The state of the CF flag represents a carry from a
previous addition. When an immediate value is used as an operand, it is
sign\-extended to the length of the destination operand format.

.PP
The ADC instruction does not distinguish between signed or unsigned
operands. Instead, the processor evaluates the result for both data
types and sets the OF and CF flags to indicate a carry in the signed or
unsigned result, respectively. The SF flag indicates the sign of the
signed result.

.PP
The ADC instruction is usually executed as part of a multibyte or
multiword addition in which an ADD instruction is followed by an ADC
instruction.

.PP
This instruction can be used with a LOCK prefix to allow the instruction
to be executed atomically.

.PP
In 64\-bit mode, the instruction’s default operation size is 32 bits.
Using a REX prefix in the form of REX.R permits access to additional
registers (R8\-R15). Using a REX prefix in the form of REX.W promotes
operation to 64 bits. See the summary chart at the beginning of this
section for encoding data and limits.

.SH OPERATION
.PP
.RS

.nf
DEST ← DEST + SRC + CF;

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
ADC: extern unsigned char \_addcarry\_u8(unsigned char c\_in, unsigned char src1, unsigned char src2, unsigned char *sum\_out);

ADC: extern unsigned char \_addcarry\_u16(unsigned char c\_in, unsigned short src1, unsigned short src2, unsigned short *sum\_out);

ADC: extern unsigned char \_addcarry\_u32(unsigned char c\_in, unsigned int src1, unsigned char int, unsigned int *sum\_out);

ADC: extern unsigned char \_addcarry\_u64(unsigned char c\_in, unsigned \_\_int64 src1, unsigned \_\_int64 src2, unsigned \_\_int64 *sum\_out);

.fi
.RE

.SH FLAGS AFFECTED
.PP
The OF, SF, ZF, AF, CF, and PF flags are set according to the result.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the destination is located in a non\-writable segment.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
