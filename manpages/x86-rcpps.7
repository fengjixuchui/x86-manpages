.nh
.TH "X86-RCPPS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
RCPPS - COMPUTE RECIPROCALS OF PACKED SINGLE-PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode*/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F 53 /xmm2/m128	RM	V/V	SSE	T{
Computes the approximate reciprocals of the packed single\-precision floating\-point values in xmm1.
T}
T{
VEX.128.0F.WIG 53 /r VRCPPS xmm1, xmm2/m128
T}
	RM	V/V	AVX	T{
Computes the approximate reciprocals of packed single\-precision values in xmm1.
T}
T{
VEX.256.0F.WIG 53 /r VRCPPS ymm1, ymm2/m256
T}
	RM	V/V	AVX	T{
Computes the approximate reciprocals of packed single\-precision values in ymm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Performs a SIMD computation of the approximate reciprocals of the four
packed single\-precision floating\-point values in the source operand
(second operand) stores the packed single\-precision floating\-point
results in the destination operand. The source operand can be an XMM
register or a 128\-bit memory location. The destination operand is an XMM
register. See Figure 10\-5 in the
Intel® 64 and IA\-32 Architectures Software Developer’s Manual, Volume 1,
for an illustration of a SIMD single\-precision floating\-point operation.

.PP
The relative error for this approximation is:

.PP
|Relative Error| ≤ 1.5 ∗ 2−12

.PP
The RCPPS instruction is not affected by the rounding control bits in
the MXCSR register. When a source value is a 0.0, an ∞ of the sign of
the source value is returned. A denormal source value is treated as a
0.0 (of the same sign). Tiny results (see Section 4.9.1.5, “Numeric
Underflow Exception (#U)” in Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 1) are always flushed to 0.0, with the sign
of the operand. (Input values greater than or equal to
|1.11111111110100000000000B∗2126| are guaranteed to produce tiny
results, which are in turn flushed to 0.0; and input values in between
this range may or may not produce tiny results, depending on the
implementation.) When a source value is an SNaN or QNaN, the SNaN is
converted to a QNaN or the source QNaN is returned.

.PP
In 64\-bit mode, using a REX prefix in the form of REX.R permits this
instruction to access additional registers (XMM8\-XMM15).

.PP
128\-bit Legacy SSE version: The second source can be an XMM register or
an 128\-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL\-1:128) of the
corresponding YMM register destination are unmodified.

.PP
VEX.128 encoded version: the first source operand is an XMM register or
128\-bit memory location. The destination operand is an XMM register. The
upper bits (MAXVL\-1:128) of the corresponding YMM register destination
are zeroed.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256\-bit memory
location. The destination operand is a YMM register.

.PP
Note: In VEX\-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.

.SH OPERATION
.SS RCPPS (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[31:0] ← APPROXIMATE(1/SRC[31:0])
DEST[63:32] ← APPROXIMATE(1/SRC[63:32])
DEST[95:64] ← APPROXIMATE(1/SRC[95:64])
DEST[127:96] ← APPROXIMATE(1/SRC[127:96])
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS VRCPPS (VEX.128 encoded version)
.PP
.RS

.nf
DEST[31:0] ← APPROXIMATE(1/SRC[31:0])
DEST[63:32] ← APPROXIMATE(1/SRC[63:32])
DEST[95:64] ← APPROXIMATE(1/SRC[95:64])
DEST[127:96] ← APPROXIMATE(1/SRC[127:96])
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VRCPPS (VEX.256 encoded version)
.PP
.RS

.nf
DEST[31:0] ← APPROXIMATE(1/SRC[31:0])
DEST[63:32] ← APPROXIMATE(1/SRC[63:32])
DEST[95:64] ← APPROXIMATE(1/SRC[95:64])
DEST[127:96] ← APPROXIMATE(1/SRC[127:96])
DEST[159:128] ← APPROXIMATE(1/SRC[159:128])
DEST[191:160] ← APPROXIMATE(1/SRC[191:160])
DEST[223:192] ← APPROXIMATE(1/SRC[223:192])
DEST[255:224] ← APPROXIMATE(1/SRC[255:224])

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
RCCPS: \_\_m128 \_mm\_rcp\_ps(\_\_m128 a)

RCPPS: \_\_m256 \_mm256\_rcp\_ps (\_\_m256 a);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None.

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 4; additionally

.TS
allbox;
l l 
l l .
#UD	If VEX.vvvv ≠ 1111B.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
