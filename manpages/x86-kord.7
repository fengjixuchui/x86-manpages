.nh
.TH "X86-KORW-KORB-KORQ-KORD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
KORW-KORB-KORQ-KORD - BITWISE LOGICAL OR MASKS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.L1.0F.W0 45 /r KORW k1, k2, k3
T}
	RVR	V/V	AVX512F	T{
Bitwise OR 16 bits masks k2 and k3 and place result in k1.
T}
T{
VEX.L1.66.0F.W0 45 /r KORB k1, k2, k3
T}
	RVR	V/V	AVX512DQ	T{
Bitwise OR 8 bits masks k2 and k3 and place result in k1.
T}
T{
VEX.L1.0F.W1 45 /r KORQ k1, k2, k3
T}
	RVR	V/V	AVX512BW	T{
Bitwise OR 64 bits masks k2 and k3 and place result in k1.
T}
T{
VEX.L1.66.0F.W1 45 /r KORD k1, k2, k3
T}
	RVR	V/V	AVX512BW	T{
Bitwise OR 32 bits masks k2 and k3 and place result in k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
Op/En	Operand 1	Operand 2	Operand 3
RVR	ModRM:reg (w)	VEX.1vvv (r)	ModRM:r/m (r, ModRM:
[
7:6
]
 must be 11b)
.TE

.SH DESCRIPTION
.PP
Performs a bitwise OR between the vector mask k2 and the vector mask k3,
and writes the result into vector mask k1 (three\-operand form).

.SH OPERATION
.SS KORW
.PP
.RS

.nf
DEST[15:0]←SRC1[15:0] BITWISE OR SRC2[15:0]
DEST[MAX\_KL\-1:16] ← 0

.fi
.RE

.SS KORB
.PP
.RS

.nf
DEST[7:0]←SRC1[7:0] BITWISE OR SRC2[7:0]
DEST[MAX\_KL\-1:8] ← 0

.fi
.RE

.SS KORQ
.PP
.RS

.nf
DEST[63:0]←SRC1[63:0] BITWISE OR SRC2[63:0]
DEST[MAX\_KL\-1:64] ← 0

.fi
.RE

.SS KORD
.PP
.RS

.nf
DEST[31:0]←SRC1[31:0] BITWISE OR SRC2[31:0]
DEST[MAX\_KL\-1:32] ← 0

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
KORW \_\_mmask16 \_mm512\_kor(\_\_mmask16 a, \_\_mmask16 b);

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type K20.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
