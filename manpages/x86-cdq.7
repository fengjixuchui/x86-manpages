.nh
.TH "X86-CWD-CDQ-CQO" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
CWD-CDQ-CQO - CONVERT WORD TO DOUBLEWORD-CONVERT DOUBLEWORD TO QUADWORD
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
99	CWD	ZO	Valid	Valid	DX:AX ← sign\-extend of AX.
99	CDQ	ZO	Valid	Valid	T{
EDX:EAX ← sign\-extend of EAX.
T}
REX.W + 99	CQO	ZO	Valid	N.E.	RDX:RAX← sign\-extend of RAX.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Doubles the size of the operand in register AX, EAX, or RAX (depending
on the operand size) by means of sign extension and stores the result in
registers DX:AX, EDX:EAX, or RDX:RAX, respectively. The CWD instruction
copies the sign (bit 15) of the value in the AX register into every bit
position in the DX register. The CDQ instruction copies the sign (bit
31) of the value in the EAX register into every bit position in the EDX
register. The CQO instruction (available in 64\-bit mode only) copies the
sign (bit 63) of the value in the RAX register into every bit position
in the RDX register.

.PP
The CWD instruction can be used to produce a doubleword dividend from a
word before word division. The CDQ instruction can be used to produce a
quadword dividend from a doubleword before doubleword division. The CQO
instruction can be used to produce a double quadword dividend from a
quadword before a quadword division.

.PP
The CWD and CDQ mnemonics reference the same opcode. The CWD instruction
is intended for use when the operand\-size attribute is 16 and the CDQ
instruction for when the operand\-size attribute is 32. Some assemblers
may force the operand size to 16 when CWD is used and to 32 when CDQ is
used. Others may treat these mnemonics as synonyms (CWD/CDQ) and use the
current setting of the operand\-size attribute to determine the size of
values to be converted, regardless of the mnemonic used.

.PP
In 64\-bit mode, use of the REX.W prefix promotes operation to 64 bits.
The CQO mnemonics reference the same opcode as CWD/CDQ. See the summary
chart at the beginning of this section for encoding data and limits.

.SH OPERATION
.PP
.RS

.nf
IF OperandSize = 16 (* CWD instruction *)
    THEN
        DX ← SignExtend(AX);
    ELSE IF OperandSize = 32 (* CDQ instruction *)
        EDX ← SignExtend(EAX); FI;
    ELSE IF 64\-Bit Mode and OperandSize = 64 (* CQO instruction*)
        RDX ← SignExtend(RAX); FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH EXCEPTIONS (ALL OPERATING MODES)
.PP
#UD If the LOCK prefix is used.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
