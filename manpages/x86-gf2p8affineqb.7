.nh
.TH "X86-GF2P8AFFINEQB" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
GF2P8AFFINEQB - GALOIS FIELD AFFINE TRANSFORMATION
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
66 0F3A CE /r /ib GF2P8AFFINEQB xmm1, xmm2/m128, imm8
T}
	A	V/V	GFNI	T{
Computes affine transformation in the finite field GF(2^8).
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOp/En\fR	\fB\fCTuple\fR	\fB\fCOperand 1\fR	\fB\fCOperand 2\fR	\fB\fCOperand 3\fR	\fB\fCOperand 4\fR
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	imm8 (r)	NA
.TE

.SS Description
.PP
The AFFINEB instruction computes an affine transformation in the Galois
Field 28. For this instruction, an affine transformation is defined by A
* x + b where “A” is an 8 by 8 bit matrix, and “x” and “b” are 8\-bit
vectors. One SIMD register (operand 1) holds “x” as either 16, 32 or 64
8\-bit vectors. A second SIMD (operand 2) register or memory operand
contains 2, 4, or 8 “A” values, which are operated upon by the
correspondingly aligned 8 “x” values in the first register. The “b”
vector is constant for all calculations and contained in the immediate
byte.

.PP
The SSE encoded forms of the instruction require16B alignment on their
memory operations.

.SS Operation
.PP
.RS

.nf
define parity(x):
    t ← 0 // single bit
    FOR i ← 0 to 7:
        t = t xor x.bit[i]
    return t
define affine\_byte(tsrc2qw, src1byte, imm):
    FOR i ← 0 to 7:
        * parity(x) = 1 if x has an odd number of 1s in it, and 0 otherwise.*
        retbyte.bit[i] ← parity(tsrc2qw.byte[7\-i] AND src1byte) XOR imm8.bit[i]
    return retbyte

.fi
.RE

.SS GF2P8AFFINEQB srcdest, src1, imm8 (128b SSE encoded version)
.PP
.RS

.nf
FOR j ← 0 TO 1:
    FOR b ← 0 to 7:
        SRCDEST.qword[j].byte[b] ← affine\_byte(SRC1.qword[j], SRCDEST.qword[j].byte[b], imm8)

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
GF2P8AFFINEQB \_\_m128i \_mm\_gf2p8affine\_epi64\_epi8(\_\_m128i, \_\_m128i, int);

GF2P8AFFINEQB \_\_m128i \_mm\_mask\_gf2p8affine\_epi64\_epi8(\_\_m128i, \_\_mmask16, \_\_m128i, \_\_m128i, int);

GF2P8AFFINEQB \_\_m128i \_mm\_maskz\_gf2p8affine\_epi64\_epi8(\_\_mmask16, \_\_m128i, \_\_m128i, int);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None.

.SS Other Exceptions
.PP
Legacy\-encoded: Exceptions Type 4.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
