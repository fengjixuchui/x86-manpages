.nh
.TH "X86-SHA1NEXTE" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
SHA1NEXTE - CALCULATE SHA1 STATE VARIABLE E AFTER FOUR ROUNDS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
NP 0F 38 C8 /r SHA1NEXTE xmm1, xmm2/m128
T}
	RM	V/V	SHA	T{
Calculates SHA1 state variable E after four rounds of operation from the current SHA1 state variable A in xmm1. The calculated value of the SHA1 state variable E is added to the scheduled dwords in xmm2/m128, and stored with some of the scheduled dwords in xmm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
Op/En	Operand 1	Operand 2	Operand 3
RM	ModRM:reg (r, w)	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
The SHA1NEXTE calculates the SHA1 state variable E after four rounds of
operation from the current SHA1 state variable A in the destination
operand. The calculated value of the SHA1 state variable E is added to
the source operand, which contains the scheduled dwords.

.SS Operation
.SS SHA1NEXTE
.PP
.RS

.nf
TMP←(SRC1[127:96] ROL 30);
DEST[127:96]←SRC2[127:96] + TMP;
DEST[95:64] ← SRC2[95:64];
DEST[63:32] ← SRC2[63:32];
DEST[31:0] ← SRC2[31:0];

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
SHA1NEXTE: \_\_m128i \_mm\_sha1nexte\_epu32(\_\_m128i, \_\_m128i);

.fi
.RE

.SS Flags Affected
.PP
None

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
See Exceptions Type 4.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
