.nh
.TH "X86-CLDEMOTE" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
CLDEMOTE - CACHE LINE DEMOTE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F 1C /0 CLDEMOTE m8	A	V/V	CLDEMOTE	T{
Hint to hardware to move the cache line containing m8 to a more distant level of the cache without writing back to memory.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING1
.PP
.RS

.PP
1\&. The Mod field of the ModR/M byte cannot have value 11B.

.RE

.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOp/En\fR	\fB\fCOperand 1\fR	\fB\fCOperand 2\fR	\fB\fCOperand 3\fR	\fB\fCOperand 4\fR
A	ModRM:r/m (w)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Hints to hardware that the cache line that contains the linear address
specified with the memory operand should be moved (“demoted”) from the
cache(s) closest to the processor core to a level more distant from the
processor core. This may accelerate subsequent accesses to the line by
other cores in the same coherence domain, especially if the line was
written by the core that demotes the line. Moving the line in such a
manner is a performance optimization, i.e., it is a hint which does not
modify architectural state. Hardware may choose which level in the cache
hierarchy to retain the line (e.g., L3 in typical server designs). The
source operand is a byte memory location.

.PP
The availability of the CLDEMOTE instruction is indicated by the
presence of the CPUID feature flag CLDEMOTE (bit 25 of the ECX register
in sub\-leaf 07H, see “CPUID—CPU Identification”). On processors which do
not support the CLDEMOTE instruction (including legacy hardware) the
instruction will be treated as a NOP.

.PP
A CLDEMOTE instruction is ordered with respect to stores to the same
cache line, but unordered with respect to other instructions including
memory fences, CLDEMOTE, CLWB or CLFLUSHOPT instructions to a different
cache line. Since CLDEMOTE will retire in order with respect to stores
to the same cache line, software should ensure that after issuing
CLDEMOTE the line is not accessed again immediately by the same core to
avoid cache data movement penalties.

.PP
The effective memory type of the page containing the affected line
determines the effect; cacheable types are likely to generate a data
movement operation, while uncacheable types may cause the instruction to
be ignored.

.PP
Speculative fetching can occur at any time and is not tied to
instruction execution. The CLDEMOTE instruction is not ordered with
respect to PREFETCHh instructions or any of the speculative fetching
mechanisms. That is, data can be speculatively loaded into a cache line
just before, during, or after the execution of a CLDEMOTE instruction
that references the cache line.

.PP
Unlike CLFLUSH, CLFLUSHOPT and CLWB instructions, CLDEMOTE is not
guaranteed to write back modified data to memory.

.PP
The CLDEMOTE instruction may be ignored by hardware in certain cases and
is not a guarantee.

.PP
The CLDEMOTE instruction can be used at all privilege levels. In certain
processor implementations the CLDEMOTE instruction may set the A bit but
not the D bit in the page tables.

.PP
If the line is not found in the cache, the instruction will be treated
as a NOP.

.PP
In some implementations, the CLDEMOTE instruction may always cause a
transactional abort with Transactional Synchronization Extensions (TSX).
However, programmers must not rely on CLDEMOTE instruction to force a
transactional abort.

.SH OPERATION
.PP
.RS

.nf
Cache\_Line\_Demote(m8);

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
CLDEMOTE void \_cldemote(const void*);

.fi
.RE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in real address mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
