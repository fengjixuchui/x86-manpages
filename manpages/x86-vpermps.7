.nh
.TH "X86-VPERMPS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VPERMPS - PERMUTE SINGLE-PRECISION FLOATING-POINT ELEMENTS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.256.66.0F38.W0 16 /r VPERMPS ymm1, ymm2, ymm3/m256
T}
	A	V/V	AVX2	T{
Permute single\-precision floating\-point elements in ymm3/m256 using indices in ymm2 and store the result in ymm1.
T}
T{
EVEX.256.66.0F38.W0 16 /r VPERMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
T}
	B	V/V	AVX512VL AVX512F	T{
Permute single\-precision floating\-point elements in ymm3/m256/m32bcst using indexes in ymm2 and store the result in ymm1 subject to write mask k1.
T}
T{
EVEX.512.66.0F38.W0 16 /r VPERMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
T}
	B	V/V	AVX512F	T{
Permute single\-precision floating\-point values in zmm3/m512/m32bcst using indices in zmm2 and store the result in zmm1 subject to write mask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
B	Full	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
Copies doubleword elements of single\-precision floating\-point values
from the second source operand (the third operand) to the destination
operand (the first operand) according to the indices in the first source
operand (the second operand). Note that this instruction permits a
doubleword in the source operand to be copied to more than one location
in the destination operand.

.PP
VEX.256 versions: The first and second operands are YMM registers, the
third operand can be a YMM register or memory location. Bits
(MAXVL\-1:256) of the corresponding destination register are zeroed.

.PP
EVEX encoded version: The first and second operands are ZMM registers,
the third operand can be a ZMM register, a 512\-bit memory location or a
512\-bit vector broadcasted from a 32\-bit memory location. The elements
in the destination are updated using the writemask k1.

.PP
If VPERMPS is encoded with VEX.L= 0, an attempt to execute the
instruction encoded with VEX.L= 0 will cause an #UD exception.

.SS Operation
.SS VPERMPS (EVEX forms)
.PP
.RS

.nf
(KL, VL) (8, 256),= (16, 512)
FOR j←0 TO KL\-1
    i←j * 64
    IF (EVEX.b = 1) AND (SRC2 *is memory*)
        THEN TMP\_SRC2[i+31:i]←SRC2[31:0];
        ELSE TMP\_SRC2[i+31:i]←SRC2[i+31:i];
    FI;
ENDFOR;
IF VL = 256
    TMP\_DEST[31:0]←(TMP\_SRC2[255:0] >> (SRC1[2:0] * 32))[31:0];
    TMP\_DEST[63:32]←(TMP\_SRC2[255:0] >> (SRC1[34:32] * 32))[31:0];
    TMP\_DEST[95:64]←(TMP\_SRC2[255:0] >> (SRC1[66:64] * 32))[31:0];
    TMP\_DEST[127:96]←(TMP\_SRC2[255:0] >> (SRC1[98:96] * 32))[31:0];
    TMP\_DEST[159:128]←(TMP\_SRC2[255:0] >> (SRC1[130:128] * 32))[31:0];
    TMP\_DEST[191:160]←(TMP\_SRC2[255:0] >> (SRC1[162:160] * 32))[31:0];
    TMP\_DEST[223:192]←(TMP\_SRC2[255:0] >> (SRC1[193:192] * 32))[31:0];
    TMP\_DEST[255:224]←(TMP\_SRC2[255:0] >> (SRC1[226:224] * 32))[31:0];
FI;
IF VL = 512
    TMP\_DEST[31:0]←(TMP\_SRC2[511:0] >> (SRC1[3:0] * 32))[31:0];
    TMP\_DEST[63:32]←(TMP\_SRC2[511:0] >> (SRC1[35:32] * 32))[31:0];
    TMP\_DEST[95:64]←(TMP\_SRC2[511:0] >> (SRC1[67:64] * 32))[31:0];
    TMP\_DEST[127:96]←(TMP\_SRC2[511:0] >> (SRC1[99:96] * 32))[31:0];
    TMP\_DEST[159:128]←(TMP\_SRC2[511:0] >> (SRC1[131:128] * 32))[31:0];
    TMP\_DEST[191:160]←(TMP\_SRC2[511:0] >> (SRC1[163:160] * 32))[31:0];
    TMP\_DEST[223:192]←(TMP\_SRC2[511:0] >> (SRC1[195:192] * 32))[31:0];
    TMP\_DEST[255:224]←(TMP\_SRC2[511:0] >> (SRC1[227:224] * 32))[31:0];
    TMP\_DEST[287:256]←(TMP\_SRC2[511:0] >> (SRC1[259:256] * 32))[31:0];
    TMP\_DEST[319:288]←(TMP\_SRC2[511:0] >> (SRC1[291:288] * 32))[31:0];
    TMP\_DEST[351:320]←(TMP\_SRC2[511:0] >> (SRC1[323:320] * 32))[31:0];
    TMP\_DEST[383:352]←(TMP\_SRC2[511:0] >> (SRC1[355:352] * 32))[31:0];
    TMP\_DEST[415:384]←(TMP\_SRC2[511:0] >> (SRC1[387:384] * 32))[31:0];
    TMP\_DEST[447:416]←(TMP\_SRC2[511:0] >> (SRC1[419:416] * 32))[31:0];
    TMP\_DEST[479:448]←(TMP\_SRC2[511:0] >> (SRC1[451:448] * 32))[31:0];
    TMP\_DEST[511:480]←(TMP\_SRC2[511:0] >> (SRC1[483:480] * 32))[31:0];
FI;
FOR j←0 TO KL\-1
    i←j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i]←TMP\_DEST[i+31:i]
        ELSE
            IF *merging\-masking*
                THEN *DEST[i+31:i] remains unchanged*
                ELSE
                        ; zeroing\-masking
                    DEST[i+31:i] ← 0
                            ;zeroing\-masking
            FI;
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VPERMPS (VEX.256 encoded version)
.PP
.RS

.nf
DEST[31:0]←(SRC2[255:0] >> (SRC1[2:0] * 32))[31:0];
DEST[63:32]←(SRC2[255:0] >> (SRC1[34:32] * 32))[31:0];
DEST[95:64]←(SRC2[255:0] >> (SRC1[66:64] * 32))[31:0];
DEST[127:96]←(SRC2[255:0] >> (SRC1[98:96] * 32))[31:0];
DEST[159:128]←(SRC2[255:0] >> (SRC1[130:128] * 32))[31:0];
DEST[191:160]←(SRC2[255:0] >> (SRC1[162:160] * 32))[31:0];
DEST[223:192]←(SRC2[255:0] >> (SRC1[194:192] * 32))[31:0];
DEST[255:224]←(SRC2[255:0] >> (SRC1[226:224] * 32))[31:0];
DEST[MAXVL\-1:256] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VPERMPS \_\_m512 \_mm512\_permutexvar\_ps(\_\_m512i i, \_\_m512 a);

VPERMPS \_\_m512 \_mm512\_mask\_permutexvar\_ps(\_\_m512 s, \_\_mmask16 k, \_\_m512i i, \_\_m512 a);

VPERMPS \_\_m512 \_mm512\_maskz\_permutexvar\_ps( \_\_mmask16 k, \_\_m512i i, \_\_m512 a);

VPERMPS \_\_m256 \_mm256\_permutexvar\_ps(\_\_m256 i, \_\_m256 a);

VPERMPS \_\_m256 \_mm256\_mask\_permutexvar\_ps(\_\_m256 s, \_\_mmask8 k, \_\_m256 i, \_\_m256 a);

VPERMPS \_\_m256 \_mm256\_maskz\_permutexvar\_ps( \_\_mmask8 k, \_\_m256 i, \_\_m256 a);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 4; additionally

.TS
allbox;
l l 
l l .
#UD	If VEX.L = 0.
.TE

.PP
EVEX\-encoded instruction, see Exceptions Type E4NF.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
