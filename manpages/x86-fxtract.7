.nh
.TH "X86-FXTRACT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FXTRACT - EXTRACT EXPONENT AND SIGNIFICAND
.TS
allbox;
l l l l 
l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
D9 F4 FXTRACT	Valid	Valid	T{
Separate value in ST(0) into exponent and significand, store exponent in ST(0), and push the significand onto the register stack.
T}
.TE

.SH DESCRIPTION
.PP
Separates the source value in the ST(0) register into its exponent and
significand, stores the exponent in ST(0), and pushes the significand
onto the register stack. Following this operation, the new top\-of\-stack
register ST(0) contains the value of the original significand expressed
as a floating\-point value. The sign and significand of this value are
the same as those found in the source operand, and the exponent is 3FFFH
(biased value for a true exponent of zero). The ST(1) register contains
the value of the original operand’s true (unbiased) exponent expressed
as a floating\-point value. (The operation performed by this instruction
is a superset of the IEEE\-recommended logb(x) function.)

.PP
This instruction and the F2XM1 instruction are useful for performing
power and range scaling operations. The FXTRACT instruction is also
useful for converting numbers in double extended\-precision
floating\-point format to decimal representations (e.g., for printing or
displaying).

.PP
If the floating\-point zero\-divide exception (#Z) is masked and the
source operand is zero, an exponent value of –∞ is stored in register
ST(1) and 0 with the sign of the source operand is stored in register
ST(0).

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
TEMP ← Significand(ST(0));
ST(0) ← Exponent(ST(0));
TOP← TOP − 1;
ST(0) ← TEMP;

.fi
.RE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
C1	T{
Set to 0 if stack underflow occurred; set to 1 if stack overflow occurred.
T}
C0, C2, C3	Undefined.
.TE

.SH FLOATING\-POINT EXCEPTIONS
.TS
allbox;
l l 
l l .
#IS	T{
Stack underflow or overflow occurred.
T}
#IA	T{
Source operand is an SNaN value or unsupported format.
T}
#Z	ST(0) operand is ±0.
#D	T{
Source operand is a denormal value.
T}
.TE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
