.nh
.TH "X86-BLSMSK" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
BLSMSK - GET MASK UP TO LOWEST SET BIT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 \-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.LZ.0F38.W0 F3 /2 BLSMSK r32, r/m32
T}
	VM	V/V	BMI1	T{
Set all lower bits in r32 to “1” starting from bit 0 to lowest set bit in r/m32.
T}
T{
VEX.LZ.0F38.W1 F3 /2 BLSMSK r64, r/m64
T}
	VM	V/N.E.	BMI1	T{
Set all lower bits in r64 to “1” starting from bit 0 to lowest set bit in r/m64.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
VM	VEX.vvvv (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Sets all the lower bits of the destination operand to “1” up to and
including lowest set bit (=1) in the source operand. If source operand
is zero, BLSMSK sets all bits of the destination operand to 1 and also
sets CF to 1.

.PP
This instruction is not supported in real mode and virtual\-8086 mode.
The operand size is always 32 bits if not in 64\-bit mode. In 64\-bit mode
operand size 64 requires VEX.W1. VEX.W1 is ignored in non\-64\-bit modes.
An attempt to execute this instruction with VEX.L not equal to 0 will
cause #UD.

.SH OPERATION
.PP
.RS

.nf
temp ← (SRC\-1) XOR (SRC) ;
SF ← temp[OperandSize \-1];
ZF ← 0;
IF SRC = 0
    CF ← 1;
ELSE
    CF ← 0;
FI
DEST ← temp;

.fi
.RE

.SH FLAGS AFFECTED
.PP
SF is updated based on the result. CF is set if the source if zero. ZF
and OF flags are cleared. AF and PF flag are undefined.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
BLSMSK: unsigned \_\_int32 \_blsmsk\_u32(unsigned \_\_int32 src);

BLSMSK: unsigned \_\_int64 \_blsmsk\_u64(unsigned \_\_int64 src);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 13.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
