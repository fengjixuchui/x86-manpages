.nh
.TH "X86-AESIMC" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
AESIMC - PERFORM THE AES INVMIXCOLUMN TRANSFORMATION
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32\-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
66 0F 38 DB /r AESIMC xmm1, xmm2/m128
T}
	RM	V/V	AES	T{
Perform the InvMixColumn transformation on a 128\-bit round key from xmm2/m128 and store the result in xmm1.
T}
T{
VEX.128.66.0F38.WIG DB /r VAESIMC xmm1, xmm2/m128
T}
	RM	V/V	Both AES and AVX flags	T{
Perform the InvMixColumn transformation on a 128\-bit round key from xmm2/m128 and store the result in xmm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand2	Operand3	Operand4
RM	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Perform the InvMixColumns transformation on the source operand and store
the result in the destination operand. The destination operand is an XMM
register. The source operand can be an XMM register or a 128\-bit memory
location.

.PP
Note: the AESIMC instruction should be applied to the expanded AES round
keys (except for the first and last round key) in order to prepare them
for decryption using the “Equivalent Inverse Cipher” (defined in FIPS
197).

.PP
128\-bit Legacy SSE version: Bits (MAXVL\-1:128) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: Bits (MAXVL\-1:128) of the destination YMM
register are zeroed.

.PP
Note: In VEX\-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.

.SH OPERATION
.SS AESIMC
.PP
.RS

.nf
DEST[127:0] ← InvMixColumns( SRC );
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS VAESIMC
.PP
.RS

.nf
DEST[127:0]←InvMixColumns( SRC );
DEST[MAXVL\-1:128] ← 0;

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
(V)AESIMC: \_\_m128i \_mm\_aesimc (\_\_m128i)

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 4; additionally

.TS
allbox;
l l 
l l .
#UD	If VEX.vvvv ≠ 1111B.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
