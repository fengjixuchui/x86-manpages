.nh
.TH "X86-WBINVD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
WBINVD - WRITE BACK AND INVALIDATE CACHE
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
0F 09	WBINVD	ZO	Valid	Valid	T{
Write back and flush Internal caches; initiate writing\-back and flushing of external caches.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Writes back all modified cache lines in the processor’s internal cache
to main memory and invalidates (flushes) the internal caches. The
instruction then issues a special\-function bus cycle that directs
external caches to also write back modified data and another bus cycle
to indicate that the external caches should be invalidated.

.PP
After executing this instruction, the processor does not wait for the
external caches to complete their write\-back and flushing operations
before proceeding with instruction execution. It is the responsibility
of hardware to respond to the cache write\-back and flush signals. The
amount of time or cycles for WBINVD to complete will vary due to size
and other factors of different cache hierarchies. As a consequence, the
use of the WBINVD instruction can have an impact on logical processor
interrupt/event response time. Additional information of WBINVD behavior
in a cache hierarchy with hierarchical sharing topology can be found in
Chapter 2 of the Intel® 64 and IA\-32 Architectures Software Developer’s
Manual, Volume 3A.

.PP
The WBINVD instruction is a privileged instruction. When the processor
is running in protected mode, the CPL of a program or procedure must be
0 to execute this instruction. This instruction is also a serializing
instruction (see “Serializing Instructions” in Chapter 8 of the Intel®
64 and IA\-32 Architectures Software Developer’s Manual, Volume 3A).

.PP
In situations where cache coherency with main memory is not a concern,
software can use the INVD instruction.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH IA\-32 ARCHITECTURE COMPATIBILITY
.PP
The WBINVD instruction is implementation dependent, and its function may
be implemented differently on future Intel 64 and IA\-32 processors. The
instruction is not supported on IA\-32 processors earlier than the
Intel486 processor.

.SH OPERATION
.PP
.RS

.nf
WriteBack(InternalCaches);
Flush(InternalCaches);
SignalWriteBack(ExternalCaches);
SignalFlush(ExternalCaches);
Continue; (* Continue execution *)

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
WBINVD void \_wbinvd(void);

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the current privilege level is not 0.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
WBINVD cannot be executed at the virtual\-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
