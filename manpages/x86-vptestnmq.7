.nh
.TH "X86-VPTESTNMB-VPTESTNMW-VPTESTNMD-VPTESTNMQ" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VPTESTNMB-VPTESTNMW-VPTESTNMD-VPTESTNMQ - LOGICAL NAND AND SET
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID\fR	\fB\fCDescription\fR
T{
EVEX.128.F3.0F38.W0 26 /r VPTESTNMB k2 {k1}, xmm2, xmm3/m128
T}
	A	V/V	AVX512VL AVX512BW	T{
Bitwise NAND of packed byte integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.256.F3.0F38.W0 26 /r VPTESTNMB k2 {k1}, ymm2, ymm3/m256
T}
	A	V/V	AVX512VL AVX512BW	T{
Bitwise NAND of packed byte integers in ymm2 and ymm3/m256 and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.512.F3.0F38.W0 26 /r VPTESTNMB k2 {k1}, zmm2, zmm3/m512
T}
	A	V/V	AVX512F AVX512BW	T{
Bitwise NAND of packed byte integers in zmm2 and zmm3/m512 and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.128.F3.0F38.W1 26 /r VPTESTNMW k2 {k1}, xmm2, xmm3/m128
T}
	A	V/V	AVX512VL AVX512BW	T{
Bitwise NAND of packed word integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.256.F3.0F38.W1 26 /r VPTESTNMW k2 {k1}, ymm2, ymm3/m256
T}
	A	V/V	AVX512VL AVX512BW	T{
Bitwise NAND of packed word integers in ymm2 and ymm3/m256 and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.512.F3.0F38.W1 26 /r VPTESTNMW k2 {k1}, zmm2, zmm3/m512
T}
	A	V/V	AVX512F AVX512BW	T{
Bitwise NAND of packed word integers in zmm2 and zmm3/m512 and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.128.F3.0F38.W0 27 /r VPTESTNMD k2 {k1}, xmm2, xmm3/m128/m32bcst
T}
	B	V/V	AVX512VL AVX512F	T{
Bitwise NAND of packed doubleword integers in xmm2 and xmm3/m128/m32bcst and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.256.F3.0F38.W0 27 /r VPTESTNMD k2 {k1}, ymm2, ymm3/m256/m32bcst
T}
	B	V/V	AVX512VL AVX512F	T{
Bitwise NAND of packed doubleword integers in ymm2 and ymm3/m256/m32bcst and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.512.F3.0F38.W0 27 /r VPTESTNMD k2 {k1}, zmm2, zmm3/m512/m32bcst
T}
	B	V/V	AVX512F	T{
Bitwise NAND of packed doubleword integers in zmm2 and zmm3/m512/m32bcst and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.128.F3.0F38.W1 27 /r VPTESTNMQ k2 {k1}, xmm2, xmm3/m128/m64bcst
T}
	B	V/V	AVX512VL AVX512F	T{
Bitwise NAND of packed quadword integers in xmm2 and xmm3/m128/m64bcst and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.256.F3.0F38.W1 27 /r VPTESTNMQ k2 {k1}, ymm2, ymm3/m256/m64bcst
T}
	B	V/V	AVX512VL AVX512F	T{
Bitwise NAND of packed quadword integers in ymm2 and ymm3/m256/m64bcst and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
T{
EVEX.512.F3.0F38.W1 27 /r VPTESTNMQ k2 {k1}, zmm2, zmm3/m512/m64bcst
T}
	B	V/V	AVX512F	T{
Bitwise NAND of packed quadword integers in zmm2 and zmm3/m512/m64bcst and set mask k2 to reflect the zero/non\-zero status of each element of the result, under writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Full Mem	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
B	Full	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
Performs a bitwise logical NAND operation on the
byte/word/doubleword/quadword element of the first source operand (the
second operand) with the corresponding element of the second source
operand (the third operand) and stores the logical comparison result
into each bit of the destination operand (the first operand) according
to the writemask k1. Each bit of the result is set to 1 if the bitwise
AND of the corresponding elements of the first and second src operands
is zero; otherwise it is set to 0.

.PP
EVEX encoded VPTESTNMD/Q: The first source operand is a ZMM/YMM/XMM
registers. The second source operand can be a ZMM/YMM/XMM register, a
512/256/128\-bit memory location, or a 512/256/128\-bit vector broadcasted
from a 32/64\-bit memory location. The destination is updated according
to the writemask.

.PP
EVEX encoded VPTESTNMB/W: The first source operand is a ZMM/YMM/XMM
registers. The second source operand can be a ZMM/YMM/XMM register, a
512/256/128\-bit memory location. The destination is updated according to
the writemask.

.SS Operation
.SS VPTESTNMB
.PP
.RS

.nf
(KL, VL) = (16, 128), (32, 256), (64, 512)
FOR j ← 0 TO KL\-1
    i ← j*8
    IF MaskBit(j) OR *no writemask*
        THEN
            DEST[j] ← (SRC1[i+7:i] BITWISE AND SRC2[i+7:i] == 0)? 1 : 0
        ELSE DEST[j] ← 0; zeroing masking only
    FI
ENDFOR
DEST[MAX\_KL\-1:KL] ← 0

.fi
.RE

.SS VPTESTNMW
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j ← 0 TO KL\-1
    i ← j*16
    IF MaskBit(j) OR *no writemask*
        THEN
            DEST[j] ← (SRC1[i+15:i] BITWISE AND SRC2[i+15:i] == 0)? 1 : 0
        ELSE DEST[j] ← 0; zeroing masking only
    FI
ENDFOR
DEST[MAX\_KL\-1:KL] ← 0

.fi
.RE

.SS VPTESTNMD
.PP
.RS

.nf
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j←0 TO KL\-1
    i←j*32
    IF MaskBit(j) OR *no writemask*
        THEN
            IF (EVEX.b = 1) AND (SRC2 *is memory*)
                THEN DEST[i+31:i]←(SRC1[i+31:i] BITWISE AND SRC2[31:0] == 0)? 1 : 0
                ELSE DEST[j]←(SRC1[i+31:i] BITWISE AND SRC2[i+31:i] == 0)? 1 : 0
            FI
        ELSE DEST[j]←0; zeroing masking only
    FI
ENDFOR
DEST[MAX\_KL\-1:KL] ← 0

.fi
.RE

.SS VPTESTNMQ
.PP
.RS

.nf
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL\-1
    i←j*64
    IF MaskBit(j) OR *no writemask*
        THEN
            IF (EVEX.b = 1) AND (SRC2 *is memory*)
                THEN DEST[j]←(SRC1[i+63:i] BITWISE AND SRC2[63:0] != 0)? 1 : 0;
                ELSE DEST[j]←(SRC1[i+63:i] BITWISE AND SRC2[i+63:i] != 0)? 1 : 0;
            FI;
        ELSE DEST[j]←0; zeroing masking only
    FI
ENDFOR
DEST[MAX\_KL\-1:KL] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VPTESTNMB \_\_mmask64 \_mm512\_testn\_epi8\_mask( \_\_m512i a, \_\_m512i b);

VPTESTNMB \_\_mmask64 \_mm512\_mask\_testn\_epi8\_mask(\_\_mmask64, \_\_m512i a, \_\_m512i b);

VPTESTNMB \_\_mmask32 \_mm256\_testn\_epi8\_mask(\_\_m256i a, \_\_m256i b);

VPTESTNMB \_\_mmask32 \_mm256\_mask\_testn\_epi8\_mask(\_\_mmask32, \_\_m256i a, \_\_m256i b);

VPTESTNMB \_\_mmask16 \_mm\_testn\_epi8\_mask(\_\_m128i a, \_\_m128i b);

VPTESTNMB \_\_mmask16 \_mm\_mask\_testn\_epi8\_mask(\_\_mmask16, \_\_m128i a, \_\_m128i b);

VPTESTNMW \_\_mmask32 \_mm512\_testn\_epi16\_mask( \_\_m512i a, \_\_m512i b);

VPTESTNMW \_\_mmask32 \_mm512\_mask\_testn\_epi16\_mask(\_\_mmask32, \_\_m512i a, \_\_m512i b);

VPTESTNMW \_\_mmask16 \_mm256\_testn\_epi16\_mask(\_\_m256i a, \_\_m256i b);

VPTESTNMW \_\_mmask16 \_mm256\_mask\_testn\_epi16\_mask(\_\_mmask16, \_\_m256i a, \_\_m256i b);

VPTESTNMW \_\_mmask8 \_mm\_testn\_epi16\_mask(\_\_m128i a, \_\_m128i b);

VPTESTNMW \_\_mmask8 \_mm\_mask\_testn\_epi16\_mask(\_\_mmask8, \_\_m128i a, \_\_m128i b);

VPTESTNMD \_\_mmask16 \_mm512\_testn\_epi32\_mask( \_\_m512i a, \_\_m512i b);

VPTESTNMD \_\_mmask16 \_mm512\_mask\_testn\_epi32\_mask(\_\_mmask16, \_\_m512i a, \_\_m512i b);

VPTESTNMD \_\_mmask8 \_mm256\_testn\_epi32\_mask(\_\_m256i a, \_\_m256i b);

VPTESTNMD \_\_mmask8 \_mm256\_mask\_testn\_epi32\_mask(\_\_mmask8, \_\_m256i a, \_\_m256i b);

VPTESTNMD \_\_mmask8 \_mm\_testn\_epi32\_mask(\_\_m128i a, \_\_m128i b);

VPTESTNMD \_\_mmask8 \_mm\_mask\_testn\_epi32\_mask(\_\_mmask8, \_\_m128i a, \_\_m128i b);

VPTESTNMQ \_\_mmask8 \_mm512\_testn\_epi64\_mask(\_\_m512i a, \_\_m512i b);

VPTESTNMQ \_\_mmask8 \_mm512\_mask\_testn\_epi64\_mask(\_\_mmask8, \_\_m512i a, \_\_m512i b);

VPTESTNMQ \_\_mmask8 \_mm256\_testn\_epi64\_mask(\_\_m256i a, \_\_m256i b);

VPTESTNMQ \_\_mmask8 \_mm256\_mask\_testn\_epi64\_mask(\_\_mmask8, \_\_m256i a, \_\_m256i b);

VPTESTNMQ \_\_mmask8 \_mm\_testn\_epi64\_mask(\_\_m128i a, \_\_m128i b);

VPTESTNMQ \_\_mmask8 \_mm\_mask\_testn\_epi64\_mask(\_\_mmask8, \_\_m128i a, \_\_m128i b);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
VPTESTNMD/VPTESTNMQ: See Exceptions Type E4.

.PP
VPTESTNMB/VPTESTNMW: See Exceptions Type E4.nb.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
