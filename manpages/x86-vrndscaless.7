.nh
.TH "X86-VRNDSCALESS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VRNDSCALESS - ROUND SCALAR FLOAT32 VALUE TO INCLUDE A GIVEN NUMBER OF FRACTION BITS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.LIG.66.0F3A.W0 0A /r ib VRNDSCALESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8
T}
	A	V/V	AVX512F	T{
Rounds scalar single\-precision floating\-point value in xmm3/m32 to a number of fraction bits specified by the imm8 field. Stores the result in xmm1 register under writemask.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
Rounds the single\-precision floating\-point value in the low doubleword
element of the second source operand (the third operand) by the rounding
mode specified in the immediate operand (see Figure 5\-29) and places the
result in the corresponding element of the destination operand (the
first operand) according to the writemask. The double\-word elements at
bits 127:32 of the destination are copied from the first source operand
(the second operand).

.PP
The destination and first source operands are XMM registers, the 2nd
source operand can be an XMM register or memory location. Bits
MAXVL\-1:128 of the destination register are cleared.

.PP
The rounding process rounds the input to an integral value, plus number
bits of fraction that are specified by imm8[7:4] (to be included in
the result) and returns the result as a single\-precision floating\-point
value.

.PP
It should be noticed that no overflow is induced while executing this
instruction (although the source is scaled by the imm8[7:4] value).

.PP
The immediate operand also specifies control fields for the rounding
operation, three bit fields are defined and shown in the “Immediate
Control Description” figure below. Bit 3 of the immediate byte controls
the processor behavior for a precision exception, bit 2 selects the
source of rounding mode control. Bits 1:0 specify a non\-sticky
rounding\-mode value (Immediate control tables below lists the encoded
values for rounding\-mode field).

.PP
The Precision Floating\-Point Exception is signaled according to the
immediate operand. If any source operand is an SNaN then it will be
converted to a QNaN. If DAZ is set to ‘1 then denormals will be
converted to zero before rounding.

.PP
The sign of the result of this instruction is preserved, including the
sign of zero.

.PP
The formula of the operation for VRNDSCALESS is

.PP
ROUND(x) = 2M, round\_ctrl),

.PP
round\_ctrl = imm[3:0];

.PP
M=imm[7:4];

.PP
The operation of x*2M is computed as if the exponent range is unlimited
(i.e. no overflow ever occurs).

.PP
VRNDSCALESS is a more general form of the VEX\-encoded VROUNDSS
instruction. In VROUNDSS, the formula of the operation on each element
is

.PP
ROUND(x) = Round\_to\_INT(x, round\_ctrl),

.PP
round\_ctrl = imm[3:0];

.PP
EVEX encoded version: The source operand is a XMM register or a 32\-bit
memory location. The destination operand is a XMM register.

.PP
Handling of special case of input values are listed in Table 5\-25.

.SS Operation
.PP
.RS

.nf
RoundToIntegerSP(SRC[31:0], imm8[7:0]) {
    if (imm8[2] = 1)
        rounding\_direction←MXCSR:RC
                    ; get round control from MXCSR
    else
        rounding\_direction←imm8[1:0]
    M←imm8[7:4] ; get the scaling factor
    case (rounding\_direction)
    00: TMP[31:0]←round\_to\_nearest\_even\_integer(2M*SRC[31:0])
    01: TMP[31:0]←round\_to\_equal\_or\_smaller\_integer(2M*SRC[31:0])
    10: TMP[31:0]←round\_to\_equal\_or\_larger\_integer(2M*SRC[31:0])
    11: TMP[31:0]←round\_to\_nearest\_smallest\_magnitude\_integer(2M*SRC[31:0])
    ESAC;
    Dest[31:0]←2\-M
    if (imm8[3] = 0) Then ; check SPE
        if (SRC[31:0] != Dest[31:0]) Then
                    ; check precision lost
            set\_precision() ; set #PE
        FI;
    FI;
    return(Dest[31:0])
}
VRNDSCALESS (EVEX encoded version)
IF k1[0] or *no writemask*
    THEN DEST[31:0]←RoundToIntegerSP(SRC2[31:0], Zero\_upper\_imm[7:0])
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[31:0]←0
        FI;
FI;
DEST[127:32] ← SRC1[127:32]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VRNDSCALESS \_\_m128 \_mm\_roundscale\_ss ( \_\_m128 a, \_\_m128 b, int imm);

VRNDSCALESS \_\_m128 \_mm\_roundscale\_round\_ss ( \_\_m128 a, \_\_m128 b, int imm, int sae);

VRNDSCALESS \_\_m128 \_mm\_mask\_roundscale\_ss (\_\_m128 s, \_\_mmask8 k, \_\_m128 a, \_\_m128 b, int imm);

VRNDSCALESS \_\_m128 \_mm\_mask\_roundscale\_round\_ss (\_\_m128 s, \_\_mmask8 k, \_\_m128 a, \_\_m128 b, int imm, int sae);

VRNDSCALESS \_\_m128 \_mm\_maskz\_roundscale\_ss ( \_\_mmask8 k, \_\_m128 a, \_\_m128 b, int imm);

VRNDSCALESS \_\_m128 \_mm\_maskz\_roundscale\_round\_ss ( \_\_mmask8 k, \_\_m128 a, \_\_m128 b, int imm, int sae);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
Invalid, Precision

.PP
If SPE is enabled, precision exception is not reported (regardless of
MXCSR exception mask).

.SS Other Exceptions
.PP
See Exceptions Type E3.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
