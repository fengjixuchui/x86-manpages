.nh
.TH "X86-WAIT-FWAIT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
WAIT-FWAIT - WAIT
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
9B	WAIT	ZO	Valid	Valid	T{
Check pending unmasked floating\-point exceptions.
T}
9B	FWAIT	ZO	Valid	Valid	T{
Check pending unmasked floating\-point exceptions.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Causes the processor to check for and handle pending, unmasked,
floating\-point exceptions before proceeding. (FWAIT is an alternate
mnemonic for WAIT.)

.PP
This instruction is useful for synchronizing exceptions in critical
sections of code. Coding a WAIT instruction after a floating\-point
instruction ensures that any unmasked floating\-point exceptions the
instruction may raise are handled before the processor can modify the
instruction’s results. See the section titled “Floating\-Point Exception
Synchronization” in Chapter 8 of the Intel® 64 and IA\-32 Architectures
Software Developer’s Manual, Volume 1, for more information on using the
WAIT/FWAIT instruction.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
CheckForPendingUnmaskedFloatingPointExceptions;

.fi
.RE

.SH FPU FLAGS AFFECTED
.PP
The C0, C1, C2, and C3 flags are undefined.

.SH FLOATING\-POINT EXCEPTIONS
.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#NM	If CR0.MP
[
bit 1
]
 = 1 and CR0.TS
[
bit 3
]
 = 1.
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
