.nh
.TH "X86-KTESTW-KTESTB-KTESTQ-KTESTD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
KTESTW-KTESTB-KTESTQ-KTESTD - PACKED BIT TEST MASKS AND SET FLAGS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.L0.0F.W0 99 /r KTESTW k1, k2
T}
	RR	V/V	AVX512DQ	T{
Set ZF and CF depending on sign bit AND and ANDN of 16 bits mask register sources.
T}
T{
VEX.L0.66.0F.W0 99 /r KTESTB k1, k2
T}
	RR	V/V	AVX512DQ	T{
Set ZF and CF depending on sign bit AND and ANDN of 8 bits mask register sources.
T}
T{
VEX.L0.0F.W1 99 /r KTESTQ k1, k2
T}
	RR	V/V	AVX512BW	T{
Set ZF and CF depending on sign bit AND and ANDN of 64 bits mask register sources.
T}
T{
VEX.L0.66.0F.W1 99 /r KTESTD k1, k2
T}
	RR	V/V	AVX512BW	T{
Set ZF and CF depending on sign bit AND and ANDN of 32 bits mask register sources.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l 
l l l .
Op/En	Operand 1	Operand2
RR	ModRM:reg (r)	ModRM:r/m (r, ModRM:
[
7:6
]
 must be 11b)
.TE

.SH DESCRIPTION
.PP
Performs a bitwise comparison of the bits of the first source operand
and corresponding bits in the second source operand. If the AND
operation produces all zeros, the ZF is set else the ZF is clear. If the
bitwise AND operation of the inverted first source operand with the
second source operand produces all zeros the CF is set else the CF is
clear. Only the EFLAGS register is updated.

.PP
Note: In VEX\-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.

.SH OPERATION
.SS KTESTW
.PP
.RS

.nf
TEMP[15:0]←SRC2[15:0] AND SRC1[15:0]
IF (TEMP[15:0] = = 0)
    THEN ZF←1;
    ELSE ZF←0;
FI;
TEMP[15:0]←SRC2[15:0] AND NOT SRC1[15:0]
IF (TEMP[15:0] = = 0)
    THEN CF←1;
    ELSE CF←0;
FI;
AF←OF←PF←SF←0;

.fi
.RE

.SS KTESTB
.PP
.RS

.nf
TEMP[7:0]←SRC2[7:0] AND SRC1[7:0]
IF (TEMP[7:0] = = 0)
    THEN ZF←1;
    ELSE ZF←0;
FI;
TEMP[7:0]←SRC2[7:0] AND NOT SRC1[7:0]
IF (TEMP[7:0] = = 0)
    THEN CF←1;
    ELSE CF←0;
FI;
AF←OF←PF←SF←0;

.fi
.RE

.SS KTESTQ
.PP
.RS

.nf
TEMP[63:0]←SRC2[63:0] AND SRC1[63:0]
IF (TEMP[63:0] = = 0)
    THEN ZF←1;
    ELSE ZF←0;
FI;
TEMP[63:0]←SRC2[63:0] AND NOT SRC1[63:0]
IF (TEMP[63:0] = = 0)
    THEN CF←1;
    ELSE CF←0;
FI;
AF←OF←PF←SF←0;

.fi
.RE

.SS KTESTD
.PP
.RS

.nf
TEMP[31:0]←SRC2[31:0] AND SRC1[31:0]
IF (TEMP[31:0] = = 0)
    THEN ZF ←1;
    ELSE ZF←0;
FI;
TEMP[31:0]←SRC2[31:0] AND NOT SRC1[31:0]
IF (TEMP[31:0] = = 0)
    THEN CF←1;
    ELSE CF←0;
FI;
AF←OF←PF←SF←0;

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type K20.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
