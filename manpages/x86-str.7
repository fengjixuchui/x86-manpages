.nh
.TH "X86-STR" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
STR - STORE TASK REGISTER
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
0F 00 /1	STR r/m16	M	Valid	Valid	T{
Stores segment selector from TR in r/m16.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
M	ModRM:r/m (w)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Stores the segment selector from the task register (TR) in the
destination operand. The destination operand can be a general\-purpose
register or a memory location. The segment selector stored with this
instruction points to the task state segment (TSS) for the currently
running task.

.PP
When the destination operand is a 32\-bit register, the 16\-bit segment
selector is copied into the lower 16 bits of the register and the upper
16 bits of the register are cleared. When the destination operand is a
memory location, the segment selector is written to memory as a 16\-bit
quantity, regardless of operand size.

.PP
In 64\-bit mode, operation is the same. The size of the memory operand is
fixed at 16 bits. In register stores, the 2\-byte TR is zero extended if
stored to a 64\-bit register.

.PP
The STR instruction is useful only in operating\-system software. It can
only be executed in protected mode.

.SH OPERATION
.PP
.RS

.nf
DEST ← TR(SegmentSelector);

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the destination is a memory operand that is located in a non\-writable segment or if the effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
	If CR4.UMIP = 1 and CPL 
\&gt;
 0.
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The STR instruction is not recognized in real\-address mode.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The STR instruction is not recognized in virtual\-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
	If CR4.UMIP = 1 and CPL 
\&gt;
 0.
#SS(0)	T{
If the stack address is in a non\-canonical form.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
