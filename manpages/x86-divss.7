.nh
.TH "X86-DIVSS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
DIVSS - DIVIDE SCALAR SINGLE-PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
F3 0F 5E /r DIVSS xmm1, xmm2/m32
T}
	A	V/V	SSE	T{
Divide low single\-precision floating\-point value in xmm1 by low single\-precision floating\-point value in xmm2/m32.
T}
T{
VEX.LIG.F3.0F.WIG 5E /r VDIVSS xmm1, xmm2, xmm3/m32
T}
	B	V/V	AVX	T{
Divide low single\-precision floating\-point value in xmm2 by low single\-precision floating\-point value in xmm3/m32.
T}
T{
EVEX.LIG.F3.0F.W0 5E /r VDIVSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}
T}
	C	V/V	AVX512F	T{
Divide low single\-precision floating\-point value in xmm2 by low single\-precision floating\-point value in xmm3/m32.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv	ModRM:r/m (r)	NA
C	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Divides the low single\-precision floating\-point value in the first
source operand by the low single\-precision floating\-point value in the
second source operand, and stores the single\-precision floating\-point
result in the destination operand. The second source operand can be an
XMM register or a 32\-bit memory location.

.PP
128\-bit Legacy SSE version: The first source operand and the destination
operand are the same. Bits (MAXVL\-1:32) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: The first source operand is an xmm register
encoded by VEX.vvvv. The three high\-order doublewords of the destination
operand are copied from the first source operand. Bits (MAXVL\-1:128) of
the destination register are zeroed.

.PP
EVEX.128 encoded version: The first source operand is an xmm register
encoded by EVEX.vvvv. The doubleword elements of the destination operand
at bits 127:32 are copied from the first source operand. Bits
(MAXVL\-1:128) of the destination register are zeroed.

.PP
EVEX version: The low doubleword element of the destination is updated
according to the writemask.

.PP
Software should ensure VDIVSS is encoded with VEX.L=0. Encoding VDIVSS
with VEX.L=1 may encounter unpredictable behavior across different
processor generations.

.SH OPERATION
.SS VDIVSS (EVEX encoded version)
.PP
.RS

.nf
IF (EVEX.b = 1) AND SRC2 *is a register*
    THEN
        SET\_RM(EVEX.RC);
    ELSE
        SET\_RM(MXCSR.RM);
FI;
IF k1[0] or *no writemask*
    THEN DEST[31:0]←SRC1[31:0] / SRC2[31:0]
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[31:0]←0
        FI;
FI;
DEST[127:32] ← SRC1[127:32]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VDIVSS (VEX.128 encoded version)
.PP
.RS

.nf
DEST[31:0]←SRC1[31:0] / SRC2[31:0]
DEST[127:32] ←SRC1[127:32]
DEST[MAXVL\-1:128] ←0

.fi
.RE

.SS DIVSS (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[31:0]←DEST[31:0] / SRC[31:0]
DEST[MAXVL\-1:32] (Unmodified)

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VDIVSS \_\_m128 \_mm\_mask\_div\_ss(\_\_m128 s, \_\_mmask8 k, \_\_m128 a, \_\_m128 b);

VDIVSS \_\_m128 \_mm\_maskz\_div\_ss( \_\_mmask8 k, \_\_m128 a, \_\_m128 b);

VDIVSS \_\_m128 \_mm\_div\_round\_ss( \_\_m128 a, \_\_m128 b, int);

VDIVSS \_\_m128 \_mm\_mask\_div\_round\_ss(\_\_m128 s, \_\_mmask8 k, \_\_m128 a, \_\_m128 b, int);

VDIVSS \_\_m128 \_mm\_maskz\_div\_round\_ss( \_\_mmask8 k, \_\_m128 a, \_\_m128 b, int);

DIVSS \_\_m128 \_mm\_div\_ss(\_\_m128 a, \_\_m128 b);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
Overflow, Underflow, Invalid, Divide\-by\-Zero, Precision, Denormal

.SH OTHER EXCEPTIONS
.PP
VEX\-encoded instructions, see Exceptions Type 3.

.PP
EVEX\-encoded instructions, see Exceptions Type E3.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
