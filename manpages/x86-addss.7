.nh
.TH "X86-ADDSS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ADDSS - ADD SCALAR SINGLE-PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
F3 0F 58 /r ADDSS xmm1, xmm2/m32
T}
	A	V/V	SSE	T{
Add the low single\-precision floating\-point value from xmm2/mem to xmm1 and store the result in xmm1.
T}
T{
VEX.LIG.F3.0F.WIG 58 /r VADDSS xmm1,xmm2, xmm3/m32
T}
	B	V/V	AVX	T{
Add the low single\-precision floating\-point value from xmm3/mem to xmm2 and store the result in xmm1.
T}
T{
EVEX.LIG.F3.0F.W0 58 /r VADDSS xmm1{k1}{z}, xmm2, xmm3/m32{er}
T}
	C	V/V	AVX512F	T{
Add the low single\-precision floating\-point value from xmm3/m32 to xmm2 and store the result in xmm1with writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv	ModRM:r/m (r)	NA
C	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Adds the low single\-precision floating\-point values from the second
source operand and the first source operand, and stores the
double\-precision floating\-point result in the destination operand.

.PP
The second source operand can be an XMM register or a 64\-bit memory
location. The first source and destination operands are XMM registers.

.PP
128\-bit Legacy SSE version: The first source and destination operands
are the same. Bits (MAXVL\-1:32) of the corresponding the destination
register remain unchanged.

.PP
EVEX and VEX.128 encoded version: The first source operand is encoded by
EVEX.vvvv/VEX.vvvv. Bits (127:32) of the XMM register destination are
copied from corresponding bits in the first source operand. Bits
(MAXVL\-1:128) of the destination register are zeroed.

.PP
EVEX version: The low doubleword element of the destination is updated
according to the writemask.

.PP
Software should ensure VADDSS is encoded with VEX.L=0. Encoding VADDSS
with VEX.L=1 may encounter unpredictable behavior across different
processor generations.

.SH OPERATION
.SS VADDSS (EVEX encoded versions)
.PP
.RS

.nf
IF (EVEX.b = 1) AND SRC2 *is a register*
    THEN
        SET\_RM(EVEX.RC);
    ELSE
        SET\_RM(MXCSR.RM);
FI;
IF k1[0] or *no writemask*
    THEN DEST[31:0]←SRC1[31:0] + SRC2[31:0]
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[31:0]←0
        FI;
FI;
DEST[127:32] ← SRC1[127:32]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VADDSS DEST, SRC1, SRC2 (VEX.128 encoded version)
.PP
.RS

.nf
DEST[31:0]←SRC1[31:0] + SRC2[31:0]
DEST[127:32] ←SRC1[127:32]
DEST[MAXVL\-1:128] ←0

.fi
.RE

.SS ADDSS DEST, SRC (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[31:0]←DEST[31:0] + SRC[31:0]
DEST[MAXVL\-1:32] (Unmodified)

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VADDSS \_\_m128 \_mm\_mask\_add\_ss (\_\_m128 s, \_\_mmask8 k, \_\_m128 a, \_\_m128 b);

VADDSS \_\_m128 \_mm\_maskz\_add\_ss (\_\_mmask8 k, \_\_m128 a, \_\_m128 b);

VADDSS \_\_m128 \_mm\_add\_round\_ss (\_\_m128 a, \_\_m128 b, int);

VADDSS \_\_m128 \_mm\_mask\_add\_round\_ss (\_\_m128 s, \_\_mmask8 k, \_\_m128 a, \_\_m128 b, int);

VADDSS \_\_m128 \_mm\_maskz\_add\_round\_ss (\_\_mmask8 k, \_\_m128 a, \_\_m128 b, int);

ADDSS \_\_m128 \_mm\_add\_ss (\_\_m128 a, \_\_m128 b);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
Overflow, Underflow, Invalid, Precision, Denormal

.SH OTHER EXCEPTIONS
.PP
VEX\-encoded instruction, see Exceptions Type 3.

.PP
EVEX\-encoded instruction, see Exceptions Type E3.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
