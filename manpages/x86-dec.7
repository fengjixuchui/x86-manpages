.nh
.TH "X86-DEC" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
DEC - DECREMENT BY 1
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
FE /1	DEC r/m8	M	Valid	Valid	Decrement r/m8 by 1.
REX + FE /1	DEC r/m8*	M	Valid	N.E.	Decrement r/m8 by 1.
FF /1	DEC r/m16	M	Valid	Valid	Decrement r/m16 by 1.
FF /1	DEC r/m32	M	Valid	Valid	Decrement r/m32 by 1.
REX.W + FF /1	DEC r/m64	M	Valid	N.E.	Decrement r/m64 by 1.
48+rw	DEC r16	O	N.E.	Valid	Decrement r16 by 1.
48+rd	DEC r32	O	N.E.	Valid	Decrement r32 by 1.
.TE

.PP
.RS

.PP
*
In64\-bitmode,r/m8cannotbeencodedtoaccessthefollowingbyteregistersifaREXprefixisused:AH,BH,CH,DH.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
M	ModRM:r/m (r, w)	NA	NA	NA
O	opcode + rd (r, w)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Subtracts 1 from the destination operand, while preserving the state of
the CF flag. The destination operand can be a register or a memory
location. This instruction allows a loop counter to be updated without
disturbing the CF flag. (To perform a decrement operation that updates
the CF flag, use a SUB instruction with an immediate operand of 1.)

.PP
This instruction can be used with a LOCK prefix to allow the instruction
to be executed atomically.

.PP
In 64\-bit mode, DEC r16 and DEC r32 are not encodable (because opcodes
48H through 4FH are REX prefixes). Otherwise, the instruction’s 64\-bit
mode default operation size is 32 bits. Use of the REX.R prefix permits
access to additional registers (R8\-R15). Use of the REX.W prefix
promotes operation to 64 bits.

.PP
See the summary chart at the beginning of this section for encoding data
and limits.

.SH OPERATION
.PP
.RS

.nf
DEST ← DEST – 1;

.fi
.RE

.SH FLAGS AFFECTED
.PP
The CF flag is not affected. The OF, SF, ZF, AF, and PF flags are set
according to the result.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the destination operand is located in a non\-writable segment.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
