.nh
.TH "X86-EDBGRD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
EDBGRD - READ FROM A DEBUG ENCLAVE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
EAX = 04H ENCLS[EDBGRD]	IR	V/V	SGX1	T{
This leaf function reads a dword/quadword from a debug enclave.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
Op/En	EAX	RBX	RCX
IR	EDBGRD (In)	T{
Data read from a debug enclave (Out)
T}
	T{
Address of source memory in the EPC (In)
T}
.TE

.SS Description
.PP
This leaf function copies a quadword/doubleword from an EPC page
belonging to a debug enclave into the RBX register. Eight bytes are read
in 64\-bit mode, four bytes are read in non\-64\-bit modes. The size of
data read cannot be overridden.

.PP
The effective address of the source location inside the EPC is provided
in the register RCX.

.SH EDBGRD MEMORY PARAMETER SEMANTICS
.TS
allbox;
l 
l .
EPCQW
T{
Read access permitted by Enclave
T}
.TE

.PP
The error codes are:

.TS
allbox;
l l 
l l .
\fB\fCError Code (see Table 40\-4)\fR	\fB\fCDescription\fR
No Error	EDBGRD successful.
SGX\_PAGE\_NOT\_DEBUGGABLE	T{
The EPC page cannot be accessed because it is in the PENDING or MODIFIED state.
T}
.TE

.PP
Table 40\-17\&. EDBGRD Return Value in
RAX

.PP
The instruction faults if any of the following:

.SH EDBGRD FAULTING CONDITIONS
.TS
allbox;
l 
l .
T{
RCX points into a page that is an SECS. RCX does not resolve to a naturally aligned linear address. RCX points to a page that does not belong to an RCX points to a location inside a TCS that is beyond the architectural size of the enclave that is in debug mode. TCS (SGX
T}
\_
TCS
\_
T{
LIMIT). An operand causing any segment violation. May page fault. CPL 
T}
\&gt;
 0.
.TE

.PP
This instruction ignores the EPCM RWX attributes on the enclave page.
Consequently, violation of EPCM RWX attributes via EDBGRD does not
result in a #GP.

.SS Concurrency Restrictions
.PP
Leaf

.PP
Parameter

.PP
Base Concurrency Restrictions

.PP
Access

.PP
On Conflict

.PP
SGX\_CONFLICT VM Exit Qualification

.PP
EDBGRD

.PP
Target [DS:RCX]

.PP
Shared

.PP
#GP

.PP
Table 40\-18\&. Base Concurrency
Restrictions of EDBGRD

.PP
Leaf

.PP
Parameter

.PP
Additional Concurrency Restrictions

.PP
vs. EACCEPT, EACCEPTCOPY, EMODPE, EMODPR, EMODT

.PP
vs. EADD, EEXTEND, EINIT

.PP
vs. ETRACK, ETRACKC

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
Access

.PP
On Conflict

.PP
EDBGRD

.PP
Target [DS:RCX]

.PP
Concurrent

.PP
Concurrent

.PP
Concurrent

.PP
Table 40\-19\&. Additional Concurrency
Restrictions of EDBGRD

.SS Operation
.SH TEMP VARIABLES IN EDBGRD OPERATIONAL FLOW
.TS
allbox;
l l l l 
l l l l .
\fB\fCName\fR	\fB\fCType\fR	\fB\fCSize (Bits)\fR	\fB\fCDescription\fR
TMP\_MODE64	Binary	1	((IA32
\_
EFER.LMA = 1) \&\& (CS.L = 1))
TMP\_SECS		64	T{
Physical address of SECS of the enclave to which source operand belongs.
T}
.TE

.PP
TMP\_MODE64←((IA32\_EFER.LMA = 1) \&\& (CS.L = 1));

.PP
IF ( (TMP\_MODE64 = 1) and (DS:RCX is not 8Byte Aligned) )

.PP
THEN #GP(0); FI;

.PP
IF ( (TMP\_MODE64 = 0) and (DS:RCX is not 4Byte Aligned) )

.PP
THEN #GP(0); FI;

.PP
IF (DS:RCX does not resolve within an EPC)

.PP
THEN #PF(DS:RCX); FI;

.PP
(* make sure no other Intel SGX instruction is accessing EPCM *)

.PP
IF (Other EPCM modifying instructions executing)

.PP
THEN #GP(0); FI;

.PP
IF (EPCM(DS:RCX). VALID = 0)

.PP
THEN #PF(DS:RCX); FI;

.PP
(* make sure that DS:RCX (SOURCE) is pointing to a PT\_REG or PT\_TCS
or PT\_VA *)

.PP
IF ( (EPCM(DS:RCX).PT ≠ PT\_REG) and (EPCM(DS:RCX).PT ≠ PT\_TCS) and
(EPCM(DS:RCX).PT ≠ PT\_VA))

.PP
THEN #PF(DS:RCX); FI;

.PP
(* make sure that DS:RCX points to an accessible EPC page *)

.PP
IF (EPCM(DS:RCX).PENDING is not 0 or (EPCM(DS:RCX).MODIFIED is not 0) )

.PP
THEN

.PP
RFLAGS.ZF ← 1;

.PP
RAX ← SGX\_PAGE\_NOT\_DEBUGGABLE;

.PP
GOTO DONE;

.PP
FI;

.PP
(* If source is a TCS, then make sure that the offset into the page is
not beyond the TCS size*) IF ( ( EPCM(DS:RCX). PT = PT\_TCS) and
((DS:RCX) \& FFFH ≥ SGX\_TCS\_LIMIT) ) THEN #GP(0); FI;

.PP
(* make sure the enclave owning the PT\_REG or PT\_TCS page allow debug
*)

.PP
IF ( (EPCM(DS:RCX).PT = PT\_REG) or (EPCM(DS:RCX).PT = PT\_TCS) )

.PP
THEN

.PP
TMP\_SECS ← GET\_SECS\_ADDRESS;

.PP
IF (TMP\_SECS.ATTRIBUTES.DEBUG = 0)

.PP
THEN #GP(0); FI;

.PP
IF ( (TMP\_MODE64 = 1) )

.PP
THEN RBX[63:0]←(DS:RCX)[63:0];

.PP
ELSE EBX[31:0]←(DS:RCX)[31:0];

.PP
FI;

.PP
ELSE

.PP
TMP\_64BIT\_VAL[63:0]←(DS:RCX)[63:0] \& (\~07H); // Read contents from
VA slot

.PP
IF (TMP\_MODE64 = 1)

.PP
THEN

.PP
IF (TMP\_64BIT\_VAL ≠ 0H)

.PP
THEN RBX[63:0]←0FFFFFFFFFFFFFFFFH;

.PP
ELSE RBX[63:0]←0H;

.PP
FI;

.PP
ELSE

.PP
IF (TMP\_64BIT\_VAL ≠ 0H)

.PP
THEN EBX[31:0]←0FFFFFFFFH;

.PP
ELSE EBX[31:0]←0H;

.PP
FI;

.PP
FI;

.PP
(* clear EAX and ZF to indicate successful completion *)

.PP
RAX←0;

.PP
RFLAGS.ZF ← 0;

.PP
DONE:

.PP
(* clear flags *)

.PP
RFLAGS.CF,PF,AF,OF,SF ← 0;

.SS Flags Affected
.PP
None

.SS Protected Mode Exceptions
.PP
#GP(0)

.PP
If the address in RCS violates DS limit or access rights.

.PP
If DS segment is unusable.

.PP
If RCX points to a memory location not 4Byte\-aligned.

.PP
If the address in RCX points to a page belonging to a non\-debug enclave.

.PP
If the address in RCX points to a page which is not PT\_TCS, PT\_REG or
PT\_VA.

.PP
If the address in RCX points to a location inside TCS that is beyond
SGX\_TCS\_LIMIT.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.PP
If the address in RCX points to a non\-EPC page.

.PP
If the address in RCX points to an invalid EPC page.

.SS 64\-Bit Mode Exceptions
.PP
#GP(0)

.PP
If RCX is non\-canonical form.

.PP
If RCX points to a memory location not 8Byte\-aligned.

.PP
If the address in RCX points to a page belonging to a non\-debug enclave.

.PP
If the address in RCX points to a page which is not PT\_TCS, PT\_REG or
PT\_VA.

.PP
If the address in RCX points to a location inside TCS that is beyond
SGX\_TCS\_LIMIT.

.PP
#PF(error

.PP
code) If a page fault occurs in accessing memory operands.

.PP
If the address in RCX points to a non\-EPC page.

.PP
If the address in RCX points to an invalid EPC page.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
