.nh
.TH "X86-MOVNTDQ" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
MOVNTDQ - STORE PACKED INTEGERS USING NON-TEMPORAL HINT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
66 0F E7 /r MOVNTDQ m128, xmm1	A	V/V	SSE2	T{
Move packed integer values in xmm1 to m128 using non\-temporal hint.
T}
T{
VEX.128.66.0F.WIG E7 /r VMOVNTDQ m128, xmm1
T}
	A	V/V	AVX	T{
Move packed integer values in xmm1 to m128 using non\-temporal hint.
T}
T{
VEX.256.66.0F.WIG E7 /r VMOVNTDQ m256, ymm1
T}
	A	V/V	AVX	T{
Move packed integer values in ymm1 to m256 using non\-temporal hint.
T}
T{
EVEX.128.66.0F.W0 E7 /r VMOVNTDQ m128, xmm1
T}
	B	V/V	AVX512VL AVX512F	T{
Move packed integer values in xmm1 to m128 using non\-temporal hint.
T}
T{
EVEX.256.66.0F.W0 E7 /r VMOVNTDQ m256, ymm1
T}
	B	V/V	AVX512VL AVX512F	T{
Move packed integer values in zmm1 to m256 using non\-temporal hint.
T}
T{
EVEX.512.66.0F.W0 E7 /r VMOVNTDQ m512, zmm1
T}
	B	V/V	AVX512F	T{
Move packed integer values in zmm1 to m512 using non\-temporal hint.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING1
.PP
.RS

.PP
1\&. ModRM.MOD != 011B

.RE

.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:r/m (w)	ModRM:reg (r)	NA	NA
B	Full Mem	ModRM:r/m (w)	ModRM:reg (r)	NA	NA
.TE

.SS Description
.PP
Moves the packed integers in the source operand (second operand) to the
destination operand (first operand) using a non\-temporal hint to prevent
caching of the data during the write to memory. The source operand is an
XMM register, YMM register or ZMM register, which is assumed to contain
integer data (packed bytes, words, double\-words, or quadwords). The
destination operand is a 128\-bit, 256\-bit or 512\-bit memory location.
The memory operand must be aligned on a 16\-byte (128\-bit version),
32\-byte (VEX.256 encoded version) or 64\-byte (512\-bit version) boundary
otherwise a general\-protection exception (#GP) will be generated.

.PP
The non\-temporal hint is implemented by using a write combining (WC)
memory type protocol when writing the data to memory. Using this
protocol, the processor does not write the data into the cache
hierarchy, nor does it fetch the corresponding cache line from memory
into the cache hierarchy. The memory type of the region being written to
can override the non\-temporal hint, if the memory address specified for
the non\-temporal store is in an uncacheable (UC) or write protected (WP)
memory region. For more information on non\-temporal stores, see “Caching
of Temporal vs. Non\-Temporal Data” in Chapter 10 in the IA\-32 Intel
Architecture Software Developer’s Manual, Volume 1.

.PP
Because the WC protocol uses a weakly\-ordered memory consistency model,
a fencing operation implemented with the SFENCE or MFENCE instruction
should be used in conjunction with VMOVNTDQ instructions if multiple
processors might use different memory types to read/write the
destination memory locations.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, VEX.L must
be 0; otherwise instructions will #UD.

.SS Operation
.SS VMOVNTDQ(EVEX encoded versions)
.PP
.RS

.nf
VL = 128, 256, 512
DEST[VL\-1:0] ← SRC[VL\-1:0]
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS MOVNTDQ (Legacy and VEX versions)
.PP
.RS

.nf
DEST ← SRC

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VMOVNTDQ void \_mm512\_stream\_si512(void * p, \_\_m512i a);

VMOVNTDQ void \_mm256\_stream\_si256 (\_\_m256i * p, \_\_m256i a);

MOVNTDQ void \_mm\_stream\_si128 (\_\_m128i * p, \_\_m128i a);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type1.SSE2;

.PP
EVEX\-encoded instruction, see Exceptions Type E1NF.

.TS
allbox;
l l 
l l .
#UD	T{
If VEX.vvvv != 1111B or EVEX.vvvv != 1111B.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
