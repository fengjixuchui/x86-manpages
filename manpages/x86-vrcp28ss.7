.nh
.TH "X86-VRCP28SS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VRCP28SS - APPROXIMATION TO THE RECIPROCAL OF SCALAR SINGLE-PRECISION FLOATING-POINT VALUE WITH LESS THAN 2^-28 RELATIVE ERROR
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.LIG.66.0F38.W0 CB /r VRCP28SS xmm1 {k1}{z}, xmm2, xmm3/m32 {sae}
T}
	A	V/V	AVX512ER	T{
Computes the approximate reciprocal ( 
T}
\&lt;
T{
 2^\-28 relative error) of the scalar single\-precision floating\-point value in xmm3/m32 and stores the results in xmm1. Under writemask. Also, upper 3 single\-precision floating\-point values (bits
T}
[
127:32
]
) from xmm2 is copied to xmm1
[
127:32
]
\&.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
Computes the reciprocal approximation of the low float32 value in the
second source operand (the third operand) and store the result to the
destination operand (the first operand). The approximate reciprocal is
evaluated with less than 2^\-28 of maximum relative error prior to final
rounding. The final result is rounded to \&lt; 2^\-23 relative error
before written into the low float32 element of the destination according
to writemask k1. Bits 127:32 of the destination is copied from the
corresponding bits of the first source operand (the second operand).

.PP
A denormal input value is treated as zero and does not signal #DE,
irrespective of MXCSR.DAZ. A denormal result is flushed to zero and does
not signal #UE, irrespective of MXCSR.FTZ.

.PP
If any source element is NaN, the quietized NaN source value is returned
for that element. If any source element is ±∞, ±0.0 is returned for that
element. Also, if any source element is ±0.0, ±∞ is returned for that
element.

.PP
The first source operand is an XMM register. The second source operand
is an XMM register or a 32\-bit memory location. The destination operand
is a XMM register, conditionally updated using writemask k1.

.SS A numerically exact implementation of VRCP28xx can be found at https://software.intel.com/en\-us/articles/refer\-
.SS ence\-implementations\-for\-IA\-approximation\-instructions\-vrcp14\-vrsqrt14\-vrcp28\-vrsqrt28\-vexp2.
.SS Operation
.SS VRCP28SS ((EVEX encoded versions)
.PP
.RS

.nf
IF k1[0] OR *no writemask* THEN
        DEST[31: 0]←RCP\_28\_SP(1.0/SRC2[31: 0]);
ELSE
    IF *merging\-masking* ; merging\-masking
        THEN *DEST[31: 0] remains unchanged*
        ELSE ; zeroing\-masking
            DEST[31: 0]←0
    FI;
FI;
ENDFOR;
DEST[127:32]←SRC1[127: 32]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.TS
allbox;
l l l 
l l l .
\fB\fCInput value\fR	\fB\fCResult value\fR	\fB\fCComments\fR
NAN	QNAN(input)	If (SRC = SNaN) then 
#
I
0\\ ≤\\ X\\ \&lt;\\ 2\-126	INF	T{
Positive input denormal or zero; 
T}
#
Z
\-2\-126 \&lt; X ≤ \-0	\-INF	T{
Negative input denormal or zero; 
T}
#
Z
X \&gt; 2126	+0.0f	X \&lt; \-2126	\-0.0f	X = +∞	+0.0f	X = \-∞	\-0.0f	X\\ =\\ 2\-n	2n	T{
Exact result (unless input/output is a denormal)
T}
X = \-2\-n	\-2n	T{
Exact result (unless input/output is a denormal)
T}
.TE

.PP
Table 6\-38. VRCP28SS Special Cases

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VRCP28SS \_\_m128 \_mm\_rcp28\_round\_ss ( \_\_m128 a, \_\_m128 b, int sae);

VRCP28SS \_\_m128 \_mm\_mask\_rcp28\_round\_ss(\_\_m128 s, \_\_mmask8 m, \_\_m128 a, \_\_m128 b, int sae);

VRCP28SS \_\_m128 \_mm\_maskz\_rcp28\_round\_ss(\_\_mmask8 m, \_\_m128 a, \_\_m128 b, int sae);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
Invalid (if SNaN input), Divide\-by\-zero

.SS Other Exceptions
.PP
See Exceptions Type E3.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
