.nh
.TH "X86-XABORT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
XABORT - TRANSACTIONAL ABORT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
C6 F8 ib XABORT imm8	A	V/V	RTM	T{
Causes an RTM abort if in RTM execution
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand2	Operand3	Operand4
A	imm8	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
XABORT forces an RTM abort. Following an RTM abort, the logical
processor resumes execution at the fallback address computed through the
outermost XBEGIN instruction. The EAX register is updated to reflect an
XABORT instruction caused the abort, and the imm8 argument will be
provided in bits 31:24 of EAX.

.SH OPERATION
.SS XABORT
.PP
.RS

.nf
IF RTM\_ACTIVE = 0
    THEN
        Treat as NOP;
    ELSE
        GOTO RTM\_ABORT\_PROCESSING;
FI;
(* For any RTM abort condition encountered during RTM execution *)
RTM\_ABORT\_PROCESSING:
    Restore architectural register state;
    Discard memory updates performed in transaction;
    Update EAX with status and XABORT argument;
    RTM\_NEST\_COUNT ← 0;
    RTM\_ACTIVE ← 0;
    IF 64\-bit Mode
        THEN
            RIP ← fallbackRIP;
        ELSE
            EIP ← fallbackEIP;
    FI;
END

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
XABORT: void \_xabort( unsigned int);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	CPUID.(EAX=7, ECX=0):EBX.RTM
[
bit 11
]
 = 0.
	If LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
