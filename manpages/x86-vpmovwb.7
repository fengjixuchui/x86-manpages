.nh
.TH "X86-VPMOVWB-VPMOVSWB-VPMOVUSWB" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VPMOVWB-VPMOVSWB-VPMOVUSWB - DOWN CONVERT WORD TO BYTE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp / En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.128.F3.0F38.W0 30 /xmm1/m64 {k1}{z}, xmm2
T}
	A	V/V	AVX512VL AVX512BW	T{
Converts 8 packed word integers from xmm1/m64 with truncation under writemask k1.
T}
T{
EVEX.128.F3.0F38.W0 20 /xmm1/m64 {k1}{z}, xmm2
T}
	A	V/V	AVX512VL AVX512BW	T{
Converts 8 packed signed word integers from xmm1/m64 using signed saturation under writemask k1.
T}
T{
EVEX.128.F3.0F38.W0 10 /xmm1/m64 {k1}{z}, xmm2
T}
	A	V/V	AVX512VL AVX512BW	T{
Converts 8 packed unsigned word integers from 8mm1/m64 using unsigned saturation under writemask k1.
T}
T{
EVEX.256.F3.0F38.W0 30 /xmm1/m128 {k1}{z}, ymm2
T}
	A	V/V	AVX512VL AVX512BW	T{
Converts 16 packed word integers from xmm1/m128 with truncation under writemask k1.
T}
T{
EVEX.256.F3.0F38.W0 20 /xmm1/m128 {k1}{z}, ymm2
T}
	A	V/V	AVX512VL AVX512BW	T{
Converts 16 packed signed word integers from xmm1/m128 using signed saturation under writemask k1.
T}
T{
EVEX.256.F3.0F38.W0 10 /xmm1/m128 {k1}{z}, ymm2
T}
	A	V/V	AVX512VL AVX512BW	T{
Converts 16 packed unsigned word integers from xmm1/m128 using unsigned saturation under writemask k1.
T}
T{
EVEX.512.F3.0F38.W0 30 /ymm1/m256 {k1}{z}, zmm2
T}
	A	V/V	AVX512BW	T{
Converts 32 packed word integers from ymm1/m256 with truncation under writemask k1.
T}
T{
EVEX.512.F3.0F38.W0 20 /ymm1/m256 {k1}{z}, zmm2
T}
	A	V/V	AVX512BW	T{
Converts 32 packed signed word integers from ymm1/m256 using signed saturation under writemask k1.
T}
T{
EVEX.512.F3.0F38.W0 10 /ymm1/m256 {k1}{z}, zmm2
T}
	A	V/V	AVX512BW	T{
Converts 32 packed unsigned word integers from ymm1/m256 using unsigned saturation under writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Half Mem	ModRM:r/m (w)	ModRM:reg (r)	NA	NA
.TE

.SS Description
.PP
VPMOVWB down converts 16\-bit integers into packed bytes using
truncation. VPMOVSWB converts signed 16\-bit integers into packed signed
bytes using signed saturation. VPMOVUSWB convert unsigned word values
into unsigned byte values using unsigned saturation.

.PP
The source operand is a ZMM/YMM/XMM register. The destination operand is
a YMM/XMM/XMM register or a 256/128/64\-bit memory location.

.PP
Down\-converted byte elements are written to the destination operand (the
first operand) from the least\-significant byte. Byte elements of the
destination operand are updated according to the writemask. Bits
(MAXVL\-1:256/128/64) of the register destination are zeroed.

.PP
Note: EVEX.vvvv is reserved and must be 1111b otherwise instructions
will #UD.

.SS Operation
.SS VPMOVWB instruction (EVEX encoded versions) when dest is a register
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO Kl\-1
    i←j * 8
    m←j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i]←TruncateWordToByte (SRC[m+15:m])
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+7:i] remains unchanged*
                ELSE *zeroing\-masking*
                        ; zeroing\-masking
                    DEST[i+7:i] = 0
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL/2] ← 0;

.fi
.RE

.SS VPMOVWB instruction (EVEX encoded versions) when dest is memory
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO Kl\-1
    i←j * 8
    m←j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i]←TruncateWordToByte (SRC[m+15:m])
        ELSE
            *DEST[i+7:i] remains unchanged* ; merging\-masking
    FI;
ENDFOR

.fi
.RE

.SS VPMOVSWB instruction (EVEX encoded versions) when dest is a register
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO Kl\-1
    i←j * 8
    m←j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i]←SaturateSignedWordToByte (SRC[m+15:m])
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+7:i] remains unchanged*
                ELSE *zeroing\-masking*
                        ; zeroing\-masking
                    DEST[i+7:i] = 0
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL/2] ← 0;

.fi
.RE

.SS VPMOVSWB instruction (EVEX encoded versions) when dest is memory
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO Kl\-1
    i←j * 8
    m←j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i]←SaturateSignedWordToByte (SRC[m+15:m])
        ELSE
            *DEST[i+7:i] remains unchanged* ; merging\-masking
    FI;
ENDFOR

.fi
.RE

.SS VPMOVUSWB instruction (EVEX encoded versions) when dest is a register
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO Kl\-1
    i←j * 8
    m←j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i]←SaturateUnsignedWordToByte (SRC[m+15:m])
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+7:i] remains unchanged*
                ELSE *zeroing\-masking*
                        ; zeroing\-masking
                    DEST[i+7:i] = 0
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL/2] ← 0;

.fi
.RE

.SS VPMOVUSWB instruction (EVEX encoded versions) when dest is memory
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO Kl\-1
    i←j * 8
    m←j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i]←SaturateUnsignedWordToByte (SRC[m+15:m])
        ELSE
            *DEST[i+7:i] remains unchanged* ; merging\-masking
    FI;
ENDFOR

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalents
.PP
.RS

.nf
VPMOVUSWB \_\_m256i \_mm512\_cvtusepi16\_epi8(\_\_m512i a);

VPMOVUSWB \_\_m256i \_mm512\_mask\_cvtusepi16\_epi8(\_\_m256i a, \_\_mmask32 k, \_\_m512i b);

VPMOVUSWB \_\_m256i \_mm512\_maskz\_cvtusepi16\_epi8( \_\_mmask32 k, \_\_m512i b);

VPMOVUSWB void \_mm512\_mask\_cvtusepi16\_storeu\_epi8(void * , \_\_mmask32 k, \_\_m512i b);

VPMOVSWB \_\_m256i \_mm512\_cvtsepi16\_epi8(\_\_m512i a);

VPMOVSWB \_\_m256i \_mm512\_mask\_cvtsepi16\_epi8(\_\_m256i a, \_\_mmask32 k, \_\_m512i b);

VPMOVSWB \_\_m256i \_mm512\_maskz\_cvtsepi16\_epi8( \_\_mmask32 k, \_\_m512i b);

VPMOVSWB void \_mm512\_mask\_cvtsepi16\_storeu\_epi8(void * , \_\_mmask32 k, \_\_m512i b);

VPMOVWB \_\_m256i \_mm512\_cvtepi16\_epi8(\_\_m512i a);

VPMOVWB \_\_m256i \_mm512\_mask\_cvtepi16\_epi8(\_\_m256i a, \_\_mmask32 k, \_\_m512i b);

VPMOVWB \_\_m256i \_mm512\_maskz\_cvtepi16\_epi8( \_\_mmask32 k, \_\_m512i b);

VPMOVWB void \_mm512\_mask\_cvtepi16\_storeu\_epi8(void * , \_\_mmask32 k, \_\_m512i b);

VPMOVUSWB \_\_m128i \_mm256\_cvtusepi16\_epi8(\_\_m256i a);

VPMOVUSWB \_\_m128i \_mm256\_mask\_cvtusepi16\_epi8(\_\_m128i a, \_\_mmask16 k, \_\_m256i b);

VPMOVUSWB \_\_m128i \_mm256\_maskz\_cvtusepi16\_epi8( \_\_mmask16 k, \_\_m256i b);

VPMOVUSWB void \_mm256\_mask\_cvtusepi16\_storeu\_epi8(void * , \_\_mmask16 k, \_\_m256i b);

VPMOVUSWB \_\_m128i \_mm\_cvtusepi16\_epi8(\_\_m128i a);

VPMOVUSWB \_\_m128i \_mm\_mask\_cvtusepi16\_epi8(\_\_m128i a, \_\_mmask8 k, \_\_m128i b);

VPMOVUSWB \_\_m128i \_mm\_maskz\_cvtusepi16\_epi8( \_\_mmask8 k, \_\_m128i b);

VPMOVUSWB void \_mm\_mask\_cvtusepi16\_storeu\_epi8(void * , \_\_mmask8 k, \_\_m128i b);

VPMOVSWB \_\_m128i \_mm256\_cvtsepi16\_epi8(\_\_m256i a);

VPMOVSWB \_\_m128i \_mm256\_mask\_cvtsepi16\_epi8(\_\_m128i a, \_\_mmask16 k, \_\_m256i b);

VPMOVSWB \_\_m128i \_mm256\_maskz\_cvtsepi16\_epi8( \_\_mmask16 k, \_\_m256i b);

VPMOVSWB void \_mm256\_mask\_cvtsepi16\_storeu\_epi8(void * , \_\_mmask16 k, \_\_m256i b);

VPMOVSWB \_\_m128i \_mm\_cvtsepi16\_epi8(\_\_m128i a);

VPMOVSWB \_\_m128i \_mm\_mask\_cvtsepi16\_epi8(\_\_m128i a, \_\_mmask8 k, \_\_m128i b);

VPMOVSWB \_\_m128i \_mm\_maskz\_cvtsepi16\_epi8( \_\_mmask8 k, \_\_m128i b);

VPMOVSWB void \_mm\_mask\_cvtsepi16\_storeu\_epi8(void * , \_\_mmask8 k, \_\_m128i b);

VPMOVWB \_\_m128i \_mm256\_cvtepi16\_epi8(\_\_m256i a);

VPMOVWB \_\_m128i \_mm256\_mask\_cvtepi16\_epi8(\_\_m128i a, \_\_mmask16 k, \_\_m256i b);

VPMOVWB \_\_m128i \_mm256\_maskz\_cvtepi16\_epi8( \_\_mmask16 k, \_\_m256i b);

VPMOVWB void \_mm256\_mask\_cvtepi16\_storeu\_epi8(void * , \_\_mmask16 k, \_\_m256i b);

VPMOVWB \_\_m128i \_mm\_cvtepi16\_epi8(\_\_m128i a);

VPMOVWB \_\_m128i \_mm\_mask\_cvtepi16\_epi8(\_\_m128i a, \_\_mmask8 k, \_\_m128i b);

VPMOVWB \_\_m128i \_mm\_maskz\_cvtepi16\_epi8( \_\_mmask8 k, \_\_m128i b);

VPMOVWB void \_mm\_mask\_cvtepi16\_storeu\_epi8(void * , \_\_mmask8 k, \_\_m128i b);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
EVEX\-encoded instruction, see Exceptions Type E6.

.TS
allbox;
l l 
l l .
#UD	If EVEX.vvvv != 1111B.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
