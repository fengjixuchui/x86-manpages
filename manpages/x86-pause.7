.nh
.TH "X86-PAUSE" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
PAUSE - SPIN LOOP HINT
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
F3 90	PAUSE	ZO	Valid	Valid	T{
Gives hint to processor that improves performance of spin\-wait loops.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Improves the performance of spin\-wait loops. When executing a “spin\-wait
loop,” processors will suffer a severe performance penalty when exiting
the loop because it detects a possible memory order violation. The PAUSE
instruction provides a hint to the processor that the code sequence is a
spin\-wait loop. The processor uses this hint to avoid the memory order
violation in most situations, which greatly improves processor
performance. For this reason, it is recommended that a PAUSE instruction
be placed in all spin\-wait loops.

.PP
An additional function of the PAUSE instruction is to reduce the power
consumed by a processor while executing a spin loop. A processor can
execute a spin\-wait loop extremely quickly, causing the processor to
consume a lot of power while it waits for the resource it is spinning on
to become available. Inserting a pause instruction in a spin\-wait loop
greatly reduces the processor’s power consumption.

.PP
This instruction was introduced in the Pentium 4 processors, but is
backward compatible with all IA\-32 processors. In earlier IA\-32
processors, the PAUSE instruction operates like a NOP instruction. The
Pentium 4 and Intel Xeon processors implement the PAUSE instruction as a
delay. The delay is finite and can be zero for some processors. This
instruction does not change the architectural state of the processor
(that is, it performs essentially a delaying no\-op operation).

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
Execute\_Next\_Instruction(DELAY);

.fi
.RE

.SH NUMERIC EXCEPTIONS
.PP
None.

.SH EXCEPTIONS (ALL OPERATING MODES)
.PP
#UD If the LOCK prefix is used.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
