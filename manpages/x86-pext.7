.nh
.TH "X86-PEXT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
PEXT - PARALLEL BITS EXTRACT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 \-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.LZ.F3.0F38.W0 F5 /r PEXT r32a, r32b, r/m32
T}
	RVM	V/V	BMI2	T{
Parallel extract of bits from r32a.
T}
T{
VEX.LZ.F3.0F38.W1 F5 /r PEXT r64a, r64b, r/m64
T}
	RVM	V/N.E.	BMI2	T{
Parallel extract of bits from r64a.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RVM	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
PEXT uses a mask in the second source operand (the third operand) to
transfer either contiguous or non\-contiguous bits in the first source
operand (the second operand) to contiguous low order bit positions in
the destination (the first operand). For each bit set in the MASK, PEXT
extracts the corresponding bits from the first source operand and writes
them into contiguous lower bits of destination operand. The remaining
upper bits of destination are zeroed.

.PP
SRC1S31S30S29S28S27S7S6S5S4S3S2S1S0SRC20000000100(mask)S200000000S7S5DESTS28bit
0bit 31

.PP
Figure 4\-9. PEXT Example

.PP
This instruction is not supported in real mode and virtual\-8086 mode.
The operand size is always 32 bits if not in 64\-bit mode. In 64\-bit mode
operand size 64 requires VEX.W1. VEX.W1 is ignored in non\-64\-bit modes.
An attempt to execute this instruction with VEX.L not equal to 0 will
cause #UD.

.SH OPERATION
.PP
.RS

.nf
TEMP ← SRC1;
MASK ← SRC2;
DEST ← 0 ;
m← 0, k← 0;
DO WHILE m< OperandSize
    IF MASK[ m] = 1 THEN
        DEST[ k] ← TEMP[ m];
        k ← k+ 1;
    FI
    m ← m+ 1;
OD

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
PEXT: unsigned \_\_int32 \_pext\_u32(unsigned \_\_int32 src, unsigned \_\_int32 mask);

PEXT: unsigned \_\_int64 \_pext\_u64(unsigned \_\_int64 src, unsigned \_\_int32 mask);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 13.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
