.nh
.TH "X86-VRCP28PD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VRCP28PD - APPROXIMATION TO THE RECIPROCAL OF PACKED DOUBLE-PRECISION FLOATING-POINT VALUES WITH LESS THAN 2^-28 RELATIVE ERROR
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
EVEX.512.66.0F38.W1 CA /r VRCP28PD zmm1 {k1}{z}, zmm2/m512/m64bcst {sae}
T}
	A	V/V	AVX512ER	T{
Computes the approximate reciprocals ( 
T}
\&lt;
T{
 2^\-28 relative error) of the packed double\-precision floating\-point values in zmm2/m512/m64bcst and stores the results in zmm1. Under writemask.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Full	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SS Description
.PP
Computes the reciprocal approximation of the float64 values in the
source operand (the second operand) and store the results to the
destination operand (the first operand). The approximate reciprocal is
evaluated with less than 2^\-28 of maximum relative error.

.PP
Denormal input values are treated as zeros and do not signal #DE,
irrespective of MXCSR.DAZ. Denormal results are flushed to zeros and do
not signal #UE, irrespective of MXCSR.FTZ.

.PP
If any source element is NaN, the quietized NaN source value is returned
for that element. If any source element is ±∞, ±0.0 is returned for that
element. Also, if any source element is ±0.0, ±∞ is returned for that
element.

.PP
The source operand is a ZMM register, a 512\-bit memory location or a
512\-bit vector broadcasted from a 64\-bit memory location. The
destination operand is a ZMM register, conditionally updated using
writemask k1.

.PP
EVEX.vvvv is reserved and must be 1111b otherwise instructions will
#UD.

.SS A numerically exact implementation of VRCP28xx can be found at https://software.intel.com/en\-us/articles/refer\-
.SS ence\-implementations\-for\-IA\-approximation\-instructions\-vrcp14\-vrsqrt14\-vrcp28\-vrsqrt28\-vexp2.
.SS Operation
.SS VRCP28PD (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (8, 512)
FOR j←0 TO KL\-1
    i←j * 64
    IF k1[j] OR *no writemask* THEN
            IF (EVEX.b = 1) AND (SRC *is memory*)
                THEN DEST[i+63:i]←RCP\_28\_DP(1.0/SRC[63:0]);
                ELSE DEST[i+63:i]←RCP\_28\_DP(1.0/SRC[i+63:i]);
            FI;
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[i+63:i] remains unchanged*
            ELSE ; zeroing\-masking
                DEST[i+63:i] ← 0
        FI;
    FI;
ENDFOR;

.fi
.RE

.TS
allbox;
l l l 
l l l .
\fB\fCInput value\fR	\fB\fCResult value\fR	\fB\fCComments\fR
NAN	QNAN(input)	If (SRC = SNaN) then 
#
I
0\\ ≤\\ X\\ \&lt;\\ 2\-1022	INF	T{
Positive input denormal or zero; 
T}
#
Z
\-2\-1022 \&lt; X ≤ \-0	\-INF	T{
Negative input denormal or zero; 
T}
#
Z
X\\ \&gt;\\ 21022	+0.0f	X\\ \&lt;\\ \-21022	\-0.0f	X = +∞	+0.0f	X = \-∞	\-0.0f	X\\ =\\ 2\-n	2n	T{
Exact result (unless input/output is a denormal)
T}
X = \-2\-n	\-2n	T{
Exact result (unless input/output is a denormal)
T}
.TE

.PP
Table 6\-35. VRCP28PD Special Cases

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VRCP28PD \_\_m512d \_mm512\_rcp28\_round\_pd ( \_\_m512d a, int sae);

VRCP28PD \_\_m512d \_mm512\_mask\_rcp28\_round\_pd(\_\_m512d a, \_\_mmask8 m, \_\_m512d b, int sae);

VRCP28PD \_\_m512d \_mm512\_maskz\_rcp28\_round\_pd( \_\_mmask8 m, \_\_m512d b, int sae);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
Invalid (if SNaN input), Divide\-by\-zero

.SS Other Exceptions
.PP
See Exceptions Type E2.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
