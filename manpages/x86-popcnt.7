.nh
.TH "X86-POPCNT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
POPCNT - RETURN THE COUNT OF NUMBER OF BITS SET TO 1
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
F3 0F B8 /r	POPCNT r16, r/m16	RM	Valid	Valid	POPCNT on r/m16
F3 0F B8 /r	POPCNT r32, r/m32	RM	Valid	Valid	POPCNT on r/m32
F3 REX.W 0F B8 /r	POPCNT r64, r/m64	RM	Valid	N.E.	POPCNT on r/m64
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
This instruction calculates the number of bits set to 1 in the second
operand (source) and returns the count in the first operand (a
destination register).

.SH OPERATION
.PP
.RS

.nf
Count = 0;
For (i=0; i < OperandSize; i++)
{ IF (SRC[ i] = 1) // i’th bit
    THEN Count++; FI;
}
DEST ← Count;

.fi
.RE

.SH FLAGS AFFECTED
.PP
OF, SF, ZF, AF, CF, PF are all cleared. ZF is set if SRC = 0, otherwise
ZF is cleared.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
POPCNT: int \_mm\_popcnt\_u32(unsigned int a);

POPCNT: int64\_t \_mm\_popcnt\_u64(unsigned \_\_int64 a);

.fi
.RE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS or GS segments.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF	(fault\-code) For a page fault.
#AC(0)	T{
If an unaligned memory reference is made while the current privilege level is 3 and alignment checking is enabled.
T}
#UD	If CPUID.01H:ECX.POPCNT 
[
Bit 23
]
 = 0.
	If LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If any part of the operand lies outside of the effective address space from 0 to 0FFFFH.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If CPUID.01H:ECX.POPCNT 
[
Bit 23
]
 = 0.
	If LOCK prefix is used.
.TE

.SH VIRTUAL 8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If any part of the operand lies outside of the effective address space from 0 to 0FFFFH.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF	(fault\-code) For a page fault.
#AC(0)	T{
If an unaligned memory reference is made while alignment checking is enabled.
T}
#UD	If CPUID.01H:ECX.POPCNT 
[
Bit 23
]
 = 0.
	If LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in Protected Mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#PF	(fault\-code) For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If CPUID.01H:ECX.POPCNT 
[
Bit 23
]
 = 0.
	If LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
