.nh
.TH "X86-RDTSC" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
RDTSC - READ TIME-STAMP COUNTER
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode*\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
0F 31	RDTSC	ZO	Valid	Valid	T{
Read time\-stamp counter into EDX:EAX.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Reads the current value of the processor’s time\-stamp counter (a 64\-bit
MSR) into the EDX:EAX registers. The EDX register is loaded with the
high\-order 32 bits of the MSR and the EAX register is loaded with the
low\-order 32 bits. (On processors that support the Intel 64
architecture, the high\-order 32 bits of each of RAX and RDX are
cleared.)

.PP
The processor monotonically increments the time\-stamp counter MSR every
clock cycle and resets it to 0 whenever the processor is reset. See
“Time Stamp Counter” in Chapter 17 of the Intel® 64 and IA\-32
Architectures Software Developer’s Manual, Volume 3B, for specific
details of the time stamp counter behavior.

.PP
The time stamp disable (TSD) flag in register CR4 restricts the use of
the RDTSC instruction as follows. When the flag is clear, the RDTSC
instruction can be executed at any privilege level; when the flag is
set, the instruction can only be executed at privilege level 0.

.PP
The time\-stamp counter can also be read with the RDMSR instruction, when
executing at privilege level 0.

.PP
The RDTSC instruction is not a serializing instruction. It does not
necessarily wait until all previous instructions have been executed
before reading the counter. Similarly, subsequent instructions may begin
execution before the read operation is performed. The following items
may guide software seeking to order executions of RDTSC:

.RS
.IP \(bu 2
If software requires RDTSC to be executed only after all previous
instructions have executed and all previous loads are globally
visible,1 it can execute LFENCE immediately before RDTSC.
.IP \(bu 2
If software requires RDTSC to be executed only after all previous
instructions have executed and all previous loads and stores are
globally visible, it can execute the sequence MFENCE;LFENCE
immediately before RDTSC.
.IP \(bu 2
If software requires RDTSC to be executed prior to execution of any
subsequent instruction (including any memory accesses), it can
execute the sequence LFENCE immediately after RDTSC.

.RE

.PP
.RS

.PP
1\&. A load is considered to become globally visible when the value to
be loaded is determined.

.RE

.PP
This instruction was introduced by the Pentium processor.

.PP
See “Changes to Instruction Behavior in VMX Non\-Root Operation” in
Chapter 25 of the Intel® 64 and IA\-32 Architectures Software Developer’s
Manual, Volume 3C, for more information about the behavior of this
instruction in VMX non\-root operation.

.SH OPERATION
.PP
.RS

.nf
IF (CR4.TSD = 0) or (CPL = 0) or (CR0.PE = 0)
    THEN EDX:EAX ← TimeStampCounter;
    ELSE (* CR4.TSD = 1 and (CPL = 1, 2, or 3) and CR0.PE = 1 *)
        #GP(0);
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the TSD flag in register CR4 is set and the CPL is greater than 0.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the TSD flag in register CR4 is set.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
