.nh
.TH "X86-FMUL-FMULP-FIMUL" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
FMUL-FMULP-FIMUL - MULTIPLY
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
D8 /1	FMUL m32fp	Valid	Valid	T{
Multiply ST(0) by m32fp and store result in ST(0).
T}
DC /1	FMUL m64fp	Valid	Valid	T{
Multiply ST(0) by m64fp and store result in ST(0).
T}
D8 C8+i	FMUL ST(0), ST(i)	Valid	Valid	T{
Multiply ST(0) by ST(i) and store result in ST(0).
T}
DC C8+i	FMUL ST(i), ST(0)	Valid	Valid	T{
Multiply ST(i) by ST(0) and store result in ST(i).
T}
DE C8+i	FMULP ST(i), ST(0)	Valid	Valid	T{
Multiply ST(i) by ST(0), store result in ST(i), and pop the register stack.
T}
DE C9	FMULP	Valid	Valid	T{
Multiply ST(1) by ST(0), store result in ST(1), and pop the register stack.
T}
DA /1	FIMUL m32int	Valid	Valid	T{
Multiply ST(0) by m32int and store result in ST(0).
T}
DE /1	FIMUL m16int	Valid	Valid	T{
Multiply ST(0) by m16int and store result in ST(0).
T}
.TE

.SH DESCRIPTION
.PP
Multiplies the destination and source operands and stores the product in
the destination location. The destination operand is always an FPU data
register; the source operand can be an FPU data register or a memory
location. Source operands in memory can be in single\-precision or
double\-precision floating\-point format or in word or doubleword integer
format.

.PP
The no\-operand version of the instruction multiplies the contents of the
ST(1) register by the contents of the ST(0) register and stores the
product in the ST(1) register. The one\-operand version multiplies the
contents of the ST(0) register by the contents of a memory location
(either a floating point or an integer value) and stores the product in
the ST(0) register. The two\-operand version, multiplies the contents of
the ST(0) register by the contents of the ST(i) register, or vice versa,
with the result being stored in the register specified with the first
operand (the destination operand).

.PP
The FMULP instructions perform the additional operation of popping the
FPU register stack after storing the product. To pop the register stack,
the processor marks the ST(0) register as empty and increments the stack
pointer (TOP) by 1. The no\-operand version of the floating\-point
multiply instructions always results in the register stack being popped.
In some assemblers, the mnemonic for this instruction is FMUL rather
than FMULP.

.PP
The FIMUL instructions convert an integer source operand to double
extended\-precision floating\-point format before performing the
multiplication.

.PP
The sign of the result is always the exclusive\-OR of the source signs,
even if one or more of the values being multiplied is 0 or ∞. When the
source operand is an integer 0, it is treated as a +0.

.PP
The following table shows the results obtained when multiplying various
classes of numbers, assuming that neither overflow nor underflow occurs.

.PP
DEST

.PP
SRC

.PP
−∞

.PP
−F

.PP
−0

.PP
+0

.PP
+F

.PP
+∞

.PP
NaN

.PP
−∞

.PP
+∞

.PP
+∞

.PP
*

.PP
*

.PP
−∞

.PP
−∞

.PP
NaN

.PP
−F

.PP
+∞

.PP
+F

.PP
+0

.PP
−0

.PP
−F

.PP
−∞

.PP
NaN

.PP
−I

.PP
+∞

.PP
+F

.PP
+0

.PP
−0

.PP
−F

.PP
−∞

.PP
NaN

.PP
−0

.PP
*

.PP
+0

.PP
+0

.PP
−0

.PP
−0

.PP
*

.PP
NaN

.PP
+0

.PP
*

.PP
−0

.PP
−0

.PP
+0

.PP
+0

.PP
*

.PP
NaN

.PP
+I

.PP
−∞

.PP
−F

.PP
−0

.PP
+0

.PP
+F

.PP
+∞

.PP
NaN

.PP
+F

.PP
−∞

.PP
−F

.PP
−0

.PP
+0

.PP
+F

.PP
+∞

.PP
NaN

.PP
+∞

.PP
−∞

.PP
−∞

.PP
*

.PP
*

.PP
+∞

.PP
+∞

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
NaN

.PP
Table 3\-29. FMUL/FMULP/FIMUL Results

.PP
.RS

.PP
F Meansfinitefloating\-pointvalue.

.PP
I Means Integer.

.PP
* Indicatesinvalid\-arithmetic\-operand(#IA)exception.

.RE

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.SH OPERATION
.PP
.RS

.nf
IF Instruction = FIMUL
    THEN
        DEST ← DEST ∗ ConvertToDoubleExtendedPrecisionFP(SRC);
    ELSE (* Source operand is floating\-point value *)
        DEST ← DEST ∗ SRC;
FI;
IF Instruction = FMULP
    THEN
        PopRegisterStack;
FI;

.fi
.RE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
C1	T{
Set to 0 if stack underflow occurred.
T}
	T{
Set if result was rounded up; cleared otherwise.
T}
C0, C2, C3	Undefined.
.TE

.SH FLOATING\-POINT EXCEPTIONS
.TS
allbox;
l l 
l l .
#IS	Stack underflow occurred.
#IA	T{
Operand is an SNaN value or unsupported format.
T}
	T{
One operand is ±0 and the other is ±∞.
T}
#D	T{
Source operand is a denormal value.
T}
#U	T{
Result is too small for destination format.
T}
#O	T{
Result is too large for destination format.
T}
#P	T{
Value cannot be represented exactly in destination format.
T}
.TE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#NM	CR0.EM
[
bit 2
]
 or CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
