.nh
.TH "X86-PACKSSWB-PACKSSDW" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
PACKSSWB-PACKSSDW - PACK WITH SIGNED SATURATION
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
NP 0F 63 /r1 PACKSSWB mm1, mm2/m64
T}
	A	V/V	MMX	T{
Converts 4 packed signed word integers from .
T}
66 0F 63 /xmm1, xmm2/m128	A	V/V	SSE2	T{
Converts 8 packed signed word integers from xxm1 using signed saturation.
T}
NP 0F 6B /mm1, mm2/m64	A	V/V	MMX	T{
Converts 2 packed signed doubleword integers from mm1 using signed saturation.
T}
66 0F 6B /xmm1, xmm2/m128	A	V/V	SSE2	T{
Converts 4 packed signed doubleword integers from xxm1 using signed saturation.
T}
T{
VEX.128.66.0F.WIG 63 /r VPACKSSWB xmm1,xmm2, xmm3/m128
T}
	B	V/V	AVX	T{
Converts 8 packed signed word integers from xmm1 using signed saturation.
T}
T{
VEX.128.66.0F.WIG 6B /r VPACKSSDW xmm1,xmm2, xmm3/m128
T}
	B	V/V	AVX	T{
Converts 4 packed signed doubleword integers from xmm1 using signed saturation.
T}
T{
VEX.256.66.0F.WIG 63 /r VPACKSSWB ymm1, ymm2, ymm3/m256
T}
	B	V/V	AVX2	T{
Converts 16 packed signed word integers from ymm1 using signed saturation.
T}
T{
VEX.256.66.0F.WIG 6B /r VPACKSSDW ymm1, ymm2, ymm3/m256
T}
	B	V/V	AVX2	T{
Converts 8 packed signed doubleword integers from ymm1using signed saturation.
T}
T{
EVEX.128.66.0F.WIG 63 /xmm1 {k1}{z}, xmm2, xmm3/m128
T}
	C	V/V	AVX512VL AVX512BW	T{
Converts packed signed word integers from xmm1 using signed saturation under writemask k1.
T}
T{
EVEX.256.66.0F.WIG 63 /ymm1 {k1}{z}, ymm2, ymm3/m256
T}
	C	V/V	AVX512VL AVX512BW	T{
Converts packed signed word integers from ymm1 using signed saturation under writemask k1.
T}
T{
EVEX.512.66.0F.WIG 63 /zmm1 {k1}{z}, zmm2, zmm3/m512
T}
	C	V/V	AVX512BW	T{
Converts packed signed word integers from zmm1 using signed saturation under writemask k1.
T}
T{
EVEX.128.66.0F.W0 6B /r VPACKSSDW xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
T}
	D	V/V	AVX512VL AVX512BW	T{
Converts packed signed doubleword integers from xmm2 and from xmm3/m128/m32bcst into packed signed word integers in xmm1 using signed saturation under writemask k1.
T}
.TE

.TS
allbox;
l l l l l 
l l l l l .
T{
EVEX.256.66.0F.W0 6B /r VPACKSSDW ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
T}
	D	V/V	AVX512VL AVX512BW	T{
Converts packed signed doubleword integers from ymm2 and from ymm3/m256/m32bcst into packed signed word integers in ymm1 using signed saturation under writemask k1.
T}
T{
EVEX.512.66.0F.W0 6B /r VPACKSSDW zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
T}
	D	V/V	AVX512BW	T{
Converts packed signed doubleword integers from zmm2 and from zmm3/m512/m32bcst into packed signed word integers in zmm1 using signed saturation under writemask k1.
T}
.TE

.PP
.RS

.PP
1\&. See note in Section 2.4, “AVX and SSE Instruction Exception
Specification” in the Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 3A.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
C	Full Mem	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
D	Full	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Converts packed signed word integers into packed signed byte integers
(PACKSSWB) or converts packed signed doubleword integers into packed
signed word integers (PACKSSDW), using saturation to handle overflow
conditions. See Figure 4\-6 for an example of the packing operation.

.PP
64\-Bit SRC64\-Bit DESTCBDAB’C’D’A’64\-Bit DEST

.PP
Figure 4\-6. Operation of the PACKSSDW Instruction Using 64\-bit Operands

.PP
PACKSSWB converts packed signed word integers in the first and second
source operands into packed signed byte integers using signed saturation
to handle overflow conditions beyond the range of signed byte integers.
If the signed word value is beyond the range of a signed byte value
(i.e., greater than 7FH or less than 80H), the saturated signed byte
integer value of 7FH or 80H, respectively, is stored in the destination.
PACKSSDW converts packed signed doubleword integers in the first and
second source operands into packed signed word integers using signed
saturation to handle overflow conditions beyond 7FFFH and 8000H.

.PP
EVEX encoded PACKSSWB: The first source operand is a ZMM/YMM/XMM
register. The second source operand is a ZMM/YMM/XMM register or a
512/256/128\-bit memory location. The destination operand is a
ZMM/YMM/XMM register, updated conditional under the writemask k1.

.PP
EVEX encoded PACKSSDW: The first source operand is a ZMM/YMM/XMM
register. The second source operand is a ZMM/YMM/XMM register, a
512/256/128\-bit memory location, or a 512/256/128\-bit vector broadcasted
from a 32\-bit memory location. The destination operand is a ZMM/YMM/XMM
register, updated conditional under the writemask k1.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand is a YMM register or a 256\-bit memory location.
The destination operand is a YMM register. The upper bits (MAXVL\-1:256)
of the corresponding ZMM register destination are zeroed.

.PP
VEX.128 encoded version: The first source operand is an XMM register.
The second source operand is an XMM register or 128\-bit memory location.
The destination operand is an XMM register. The upper bits (MAXVL\-1:128)
of the corresponding ZMM register destination are zeroed.

.PP
128\-bit Legacy SSE version: The first source operand is an XMM register.
The second operand can be an XMM register or an 128\-bit memory location.
The destination is not distinct from the first source XMM register and
the upper bits (MAXVL\-1:128) of the corresponding ZMM destination
register destination are unmodified.

.SS Operation
.SS PACKSSWB instruction (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[7:0]←SaturateSignedWordToSignedByte (DEST[15:0]);
DEST[15:8]←SaturateSignedWordToSignedByte (DEST[31:16]);
DEST[23:16]←SaturateSignedWordToSignedByte (DEST[47:32]);
DEST[31:24]←SaturateSignedWordToSignedByte (DEST[63:48]);
DEST[39:32]←SaturateSignedWordToSignedByte (DEST[79:64]);
DEST[47:40]←SaturateSignedWordToSignedByte (DEST[95:80]);
DEST[55:48]←SaturateSignedWordToSignedByte (DEST[111:96]);
DEST[63:56]←SaturateSignedWordToSignedByte (DEST[127:112]);
DEST[71:64]←SaturateSignedWordToSignedByte (SRC[15:0]);
DEST[79:72]←SaturateSignedWordToSignedByte (SRC[31:16]);
DEST[87:80]←SaturateSignedWordToSignedByte (SRC[47:32]);
DEST[95:88]←SaturateSignedWordToSignedByte (SRC[63:48]);
DEST[103:96]←SaturateSignedWordToSignedByte (SRC[79:64]);
DEST[111:104]←SaturateSignedWordToSignedByte (SRC[95:80]);
DEST[119:112]←SaturateSignedWordToSignedByte (SRC[111:96]);
DEST[127:120]←SaturateSignedWordToSignedByte (SRC[127:112]);
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS PACKSSDW instruction (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[15:0]←SaturateSignedDwordToSignedWord (DEST[31:0]);
DEST[31:16]←SaturateSignedDwordToSignedWord (DEST[63:32]);
DEST[47:32]←SaturateSignedDwordToSignedWord (DEST[95:64]);
DEST[63:48]←SaturateSignedDwordToSignedWord (DEST[127:96]);
DEST[79:64]←SaturateSignedDwordToSignedWord (SRC[31:0]);
DEST[95:80]←SaturateSignedDwordToSignedWord (SRC[63:32]);
DEST[111:96]←SaturateSignedDwordToSignedWord (SRC[95:64]);
DEST[127:112]←SaturateSignedDwordToSignedWord (SRC[127:96]);
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS VPACKSSWB instruction (VEX.128 encoded version)
.PP
.RS

.nf
DEST[7:0]←SaturateSignedWordToSignedByte (SRC1[15:0]);
DEST[15:8]←SaturateSignedWordToSignedByte (SRC1[31:16]);
DEST[23:16]←SaturateSignedWordToSignedByte (SRC1[47:32]);
DEST[31:24]←SaturateSignedWordToSignedByte (SRC1[63:48]);
DEST[39:32]←SaturateSignedWordToSignedByte (SRC1[79:64]);
DEST[47:40]←SaturateSignedWordToSignedByte (SRC1[95:80]);
DEST[55:48]←SaturateSignedWordToSignedByte (SRC1[111:96]);
DEST[63:56]←SaturateSignedWordToSignedByte (SRC1[127:112]);
DEST[71:64]←SaturateSignedWordToSignedByte (SRC2[15:0]);
DEST[79:72]←SaturateSignedWordToSignedByte (SRC2[31:16]);
DEST[87:80]←SaturateSignedWordToSignedByte (SRC2[47:32]);
DEST[95:88]←SaturateSignedWordToSignedByte (SRC2[63:48]);
DEST[103:96]←SaturateSignedWordToSignedByte (SRC2[79:64]);
DEST[111:104]←SaturateSignedWordToSignedByte (SRC2[95:80]);
DEST[119:112]←SaturateSignedWordToSignedByte (SRC2[111:96]);
DEST[127:120]←SaturateSignedWordToSignedByte (SRC2[127:112]);
DEST[MAXVL\-1:128] ← 0;

.fi
.RE

.SS VPACKSSDW instruction (VEX.128 encoded version)
.PP
.RS

.nf
DEST[15:0]←SaturateSignedDwordToSignedWord (SRC1[31:0]);
DEST[31:16]←SaturateSignedDwordToSignedWord (SRC1[63:32]);
DEST[47:32]←SaturateSignedDwordToSignedWord (SRC1[95:64]);
DEST[63:48]←SaturateSignedDwordToSignedWord (SRC1[127:96]);
DEST[79:64]←SaturateSignedDwordToSignedWord (SRC2[31:0]);
DEST[95:80]←SaturateSignedDwordToSignedWord (SRC2[63:32]);
DEST[111:96]←SaturateSignedDwordToSignedWord (SRC2[95:64]);
DEST[127:112]←SaturateSignedDwordToSignedWord (SRC2[127:96]);
DEST[MAXVL\-1:128] ← 0;

.fi
.RE

.SS VPACKSSWB instruction (VEX.256 encoded version)
.PP
.RS

.nf
DEST[7:0]←SaturateSignedWordToSignedByte (SRC1[15:0]);
DEST[15:8]←SaturateSignedWordToSignedByte (SRC1[31:16]);
DEST[23:16]←SaturateSignedWordToSignedByte (SRC1[47:32]);
DEST[31:24]←SaturateSignedWordToSignedByte (SRC1[63:48]);
DEST[39:32]←SaturateSignedWordToSignedByte (SRC1[79:64]);
DEST[47:40]←SaturateSignedWordToSignedByte (SRC1[95:80]);
DEST[55:48]←SaturateSignedWordToSignedByte (SRC1[111:96]);
DEST[63:56]←SaturateSignedWordToSignedByte (SRC1[127:112]);
DEST[71:64]←SaturateSignedWordToSignedByte (SRC2[15:0]);
DEST[79:72]←SaturateSignedWordToSignedByte (SRC2[31:16]);
DEST[87:80]←SaturateSignedWordToSignedByte (SRC2[47:32]);
DEST[95:88]←SaturateSignedWordToSignedByte (SRC2[63:48]);
DEST[103:96]←SaturateSignedWordToSignedByte (SRC2[79:64]);
DEST[111:104]←SaturateSignedWordToSignedByte (SRC2[95:80]);
DEST[119:112]←SaturateSignedWordToSignedByte (SRC2[111:96]);
DEST[127:120]←SaturateSignedWordToSignedByte (SRC2[127:112]);
DEST[135:128]←SaturateSignedWordToSignedByte (SRC1[143:128]);
DEST[143:136]←SaturateSignedWordToSignedByte (SRC1[159:144]);
DEST[151:144]←SaturateSignedWordToSignedByte (SRC1[175:160]);
DEST[159:152]←SaturateSignedWordToSignedByte (SRC1[191:176]);
DEST[167:160]←SaturateSignedWordToSignedByte (SRC1[207:192]);
DEST[175:168]←SaturateSignedWordToSignedByte (SRC1[223:208]);
DEST[183:176]←SaturateSignedWordToSignedByte (SRC1[239:224]);
DEST[191:184]←SaturateSignedWordToSignedByte (SRC1[255:240]);
DEST[199:192]←SaturateSignedWordToSignedByte (SRC2[143:128]);
DEST[207:200]←SaturateSignedWordToSignedByte (SRC2[159:144]);
DEST[215:208]←SaturateSignedWordToSignedByte (SRC2[175:160]);
DEST[223:216]←SaturateSignedWordToSignedByte (SRC2[191:176]);
DEST[231:224]←SaturateSignedWordToSignedByte (SRC2[207:192]);
DEST[239:232]←SaturateSignedWordToSignedByte (SRC2[223:208]);
DEST[247:240]←SaturateSignedWordToSignedByte (SRC2[239:224]);
DEST[255:248]←SaturateSignedWordToSignedByte (SRC2[255:240]);
DEST[MAXVL\-1:256] ← 0;

.fi
.RE

.SS VPACKSSDW instruction (VEX.256 encoded version)
.PP
.RS

.nf
DEST[15:0]←SaturateSignedDwordToSignedWord (SRC1[31:0]);
DEST[31:16]←SaturateSignedDwordToSignedWord (SRC1[63:32]);
DEST[47:32]←SaturateSignedDwordToSignedWord (SRC1[95:64]);
DEST[63:48]←SaturateSignedDwordToSignedWord (SRC1[127:96]);
DEST[79:64]←SaturateSignedDwordToSignedWord (SRC2[31:0]);
DEST[95:80]←SaturateSignedDwordToSignedWord (SRC2[63:32]);
DEST[111:96]←SaturateSignedDwordToSignedWord (SRC2[95:64]);
DEST[127:112]←SaturateSignedDwordToSignedWord (SRC2[127:96]);
DEST[143:128]←SaturateSignedDwordToSignedWord (SRC1[159:128]);
DEST[159:144]←SaturateSignedDwordToSignedWord (SRC1[191:160]);
DEST[175:160]←SaturateSignedDwordToSignedWord (SRC1[223:192]);
DEST[191:176]←SaturateSignedDwordToSignedWord (SRC1[255:224]);
DEST[207:192]←SaturateSignedDwordToSignedWord (SRC2[159:128]);
DEST[223:208]←SaturateSignedDwordToSignedWord (SRC2[191:160]);
DEST[239:224]←SaturateSignedDwordToSignedWord (SRC2[223:192]);
DEST[255:240]←SaturateSignedDwordToSignedWord (SRC2[255:224]);
DEST[MAXVL\-1:256] ← 0;

.fi
.RE

.SS VPACKSSWB (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (16, 128), (32, 256), (64, 512)
TMP\_DEST[7:0]←SaturateSignedWordToSignedByte (SRC1[15:0]);
TMP\_DEST[15:8]←SaturateSignedWordToSignedByte (SRC1[31:16]);
TMP\_DEST[23:16]←SaturateSignedWordToSignedByte (SRC1[47:32]);
TMP\_DEST[31:24]←SaturateSignedWordToSignedByte (SRC1[63:48]);
TMP\_DEST[39:32]←SaturateSignedWordToSignedByte (SRC1[79:64]);
TMP\_DEST[47:40]←SaturateSignedWordToSignedByte (SRC1[95:80]);
TMP\_DEST[55:48]←SaturateSignedWordToSignedByte (SRC1[111:96]);
TMP\_DEST[63:56]←SaturateSignedWordToSignedByte (SRC1[127:112]);
TMP\_DEST[71:64]←SaturateSignedWordToSignedByte (SRC2[15:0]);
TMP\_DEST[79:72]←SaturateSignedWordToSignedByte (SRC2[31:16]);
TMP\_DEST[87:80]←SaturateSignedWordToSignedByte (SRC2[47:32]);
TMP\_DEST[95:88]←SaturateSignedWordToSignedByte (SRC2[63:48]);
TMP\_DEST[103:96]←SaturateSignedWordToSignedByte (SRC2[79:64]);
TMP\_DEST[111:104]←SaturateSignedWordToSignedByte (SRC2[95:80]);
TMP\_DEST[119:112]←SaturateSignedWordToSignedByte (SRC2[111:96]);
TMP\_DEST[127:120]←SaturateSignedWordToSignedByte (SRC2[127:112]);
IF VL >= 256
    TMP\_DEST[135:128]←SaturateSignedWordToSignedByte (SRC1[143:128]);
    TMP\_DEST[143:136]←SaturateSignedWordToSignedByte (SRC1[159:144]);
    TMP\_DEST[151:144]←SaturateSignedWordToSignedByte (SRC1[175:160]);
    TMP\_DEST[159:152]←SaturateSignedWordToSignedByte (SRC1[191:176]);
    TMP\_DEST[167:160]←SaturateSignedWordToSignedByte (SRC1[207:192]);
    TMP\_DEST[175:168]←SaturateSignedWordToSignedByte (SRC1[223:208]);
    TMP\_DEST[183:176]←SaturateSignedWordToSignedByte (SRC1[239:224]);
    TMP\_DEST[191:184]←SaturateSignedWordToSignedByte (SRC1[255:240]);
    TMP\_DEST[199:192]←SaturateSignedWordToSignedByte (SRC2[143:128]);
    TMP\_DEST[207:200]←SaturateSignedWordToSignedByte (SRC2[159:144]);
    TMP\_DEST[215:208]←SaturateSignedWordToSignedByte (SRC2[175:160]);
    TMP\_DEST[223:216]←SaturateSignedWordToSignedByte (SRC2[191:176]);
    TMP\_DEST[231:224]←SaturateSignedWordToSignedByte (SRC2[207:192]);
    TMP\_DEST[239:232]←SaturateSignedWordToSignedByte (SRC2[223:208]);
    TMP\_DEST[247:240]←SaturateSignedWordToSignedByte (SRC2[239:224]);
    TMP\_DEST[255:248]←SaturateSignedWordToSignedByte (SRC2[255:240]);
FI;
IF VL >= 512
    TMP\_DEST[263:256]←SaturateSignedWordToSignedByte (SRC1[271:256]);
    TMP\_DEST[271:264]←SaturateSignedWordToSignedByte (SRC1[287:272]);
    TMP\_DEST[279:272]←SaturateSignedWordToSignedByte (SRC1[303:288]);
    TMP\_DEST[287:280]←SaturateSignedWordToSignedByte (SRC1[319:304]);
    TMP\_DEST[295:288]←SaturateSignedWordToSignedByte (SRC1[335:320]);
    TMP\_DEST[303:296]←SaturateSignedWordToSignedByte (SRC1[351:336]);
    TMP\_DEST[311:304]←SaturateSignedWordToSignedByte (SRC1[367:352]);
    TMP\_DEST[319:312]←SaturateSignedWordToSignedByte (SRC1[383:368]);
    TMP\_DEST[327:320]←SaturateSignedWordToSignedByte (SRC2[271:256]);
    TMP\_DEST[335:328]←SaturateSignedWordToSignedByte (SRC2[287:272]);
    TMP\_DEST[343:336]←SaturateSignedWordToSignedByte (SRC2[303:288]);
    TMP\_DEST[351:344]←SaturateSignedWordToSignedByte (SRC2[319:304]);
    TMP\_DEST[359:352]←SaturateSignedWordToSignedByte (SRC2[335:320]);
    TMP\_DEST[367:360]←SaturateSignedWordToSignedByte (SRC2[351:336]);
    TMP\_DEST[375:368]←SaturateSignedWordToSignedByte (SRC2[367:352]);
    TMP\_DEST[383:376]←SaturateSignedWordToSignedByte (SRC2[383:368]);
    TMP\_DEST[391:384]←SaturateSignedWordToSignedByte (SRC1[399:384]);
    TMP\_DEST[399:392]←SaturateSignedWordToSignedByte (SRC1[415:400]);
    TMP\_DEST[407:400]←SaturateSignedWordToSignedByte (SRC1[431:416]);
    TMP\_DEST[415:408]←SaturateSignedWordToSignedByte (SRC1[447:432]);
    TMP\_DEST[423:416]←SaturateSignedWordToSignedByte (SRC1[463:448]);
    TMP\_DEST[431:424]←SaturateSignedWordToSignedByte (SRC1[479:464]);
    TMP\_DEST[439:432]←SaturateSignedWordToSignedByte (SRC1[495:480]);
    TMP\_DEST[447:440]←SaturateSignedWordToSignedByte (SRC1[511:496]);
    TMP\_DEST[455:448]←SaturateSignedWordToSignedByte (SRC2[399:384]);
    TMP\_DEST[463:456]←SaturateSignedWordToSignedByte (SRC2[415:400]);
    TMP\_DEST[471:464]←SaturateSignedWordToSignedByte (SRC2[431:416]);
    TMP\_DEST[479:472]←SaturateSignedWordToSignedByte (SRC2[447:432]);
    TMP\_DEST[487:480]←SaturateSignedWordToSignedByte (SRC2[463:448]);
    TMP\_DEST[495:488]←SaturateSignedWordToSignedByte (SRC2[479:464]);
    TMP\_DEST[503:496]←SaturateSignedWordToSignedByte (SRC2[495:480]);
    TMP\_DEST[511:504]←SaturateSignedWordToSignedByte (SRC2[511:496]);
FI;
FOR j←0 TO KL\-1
    i←j * 8
    IF k1[j] OR *no writemask*
        THEN
            DEST[i+7:i] ← TMP\_DEST[i+7:i]
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+7:i] remains unchanged*
                ELSE *zeroing\-masking*
                        ; zeroing\-masking
                    DEST[i+7:i] ← 0
            FI
    FI;
ENDFOR;
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VPACKSSDW (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO ((KL/2) \- 1)
    i←j * 32
    IF (EVEX.b == 1) AND (SRC2 *is memory*)
        THEN
            TMP\_SRC2[i+31:i] ← SRC2[31:0]
        ELSE
            TMP\_SRC2[i+31:i] ← SRC2[i+31:i]
    FI;
ENDFOR;
TMP\_DEST[15:0]←SaturateSignedDwordToSignedWord (SRC1[31:0]);
TMP\_DEST[31:16]←SaturateSignedDwordToSignedWord (SRC1[63:32]);
TMP\_DEST[47:32]←SaturateSignedDwordToSignedWord (SRC1[95:64]);
TMP\_DEST[63:48]←SaturateSignedDwordToSignedWord (SRC1[127:96]);
TMP\_DEST[79:64]←SaturateSignedDwordToSignedWord (TMP\_SRC2[31:0]);
TMP\_DEST[95:80]←SaturateSignedDwordToSignedWord (TMP\_SRC2[63:32]);
TMP\_DEST[111:96]←SaturateSignedDwordToSignedWord (TMP\_SRC2[95:64]);
TMP\_DEST[127:112]←SaturateSignedDwordToSignedWord (TMP\_SRC2[127:96]);
IF VL >= 256
    TMP\_DEST[143:128]←SaturateSignedDwordToSignedWord (SRC1[159:128]);
    TMP\_DEST[159:144]←SaturateSignedDwordToSignedWord (SRC1[191:160]);
    TMP\_DEST[175:160]←SaturateSignedDwordToSignedWord (SRC1[223:192]);
    TMP\_DEST[191:176]←SaturateSignedDwordToSignedWord (SRC1[255:224]);
    TMP\_DEST[207:192]←SaturateSignedDwordToSignedWord (TMP\_SRC2[159:128]);
    TMP\_DEST[223:208]←SaturateSignedDwordToSignedWord (TMP\_SRC2[191:160]);
    TMP\_DEST[239:224]←SaturateSignedDwordToSignedWord (TMP\_SRC2[223:192]);
    TMP\_DEST[255:240]←SaturateSignedDwordToSignedWord (TMP\_SRC2[255:224]);
FI;
IF VL >= 512
    TMP\_DEST[271:256]←SaturateSignedDwordToSignedWord (SRC1[287:256]);
    TMP\_DEST[287:272]←SaturateSignedDwordToSignedWord (SRC1[319:288]);
    TMP\_DEST[303:288]←SaturateSignedDwordToSignedWord (SRC1[351:320]);
    TMP\_DEST[319:304]←SaturateSignedDwordToSignedWord (SRC1[383:352]);
    TMP\_DEST[335:320]←SaturateSignedDwordToSignedWord (TMP\_SRC2[287:256]);
    TMP\_DEST[351:336]←SaturateSignedDwordToSignedWord (TMP\_SRC2[319:288]);
    TMP\_DEST[367:352]←SaturateSignedDwordToSignedWord (TMP\_SRC2[351:320]);
    TMP\_DEST[383:368]←SaturateSignedDwordToSignedWord (TMP\_SRC2[383:352]);
    TMP\_DEST[399:384]←SaturateSignedDwordToSignedWord (SRC1[415:384]);
    TMP\_DEST[415:400]←SaturateSignedDwordToSignedWord (SRC1[447:416]);
    TMP\_DEST[431:416]←SaturateSignedDwordToSignedWord (SRC1[479:448]);
    TMP\_DEST[447:432]←SaturateSignedDwordToSignedWord (SRC1[511:480]);
    TMP\_DEST[463:448]←SaturateSignedDwordToSignedWord (TMP\_SRC2[415:384]);
    TMP\_DEST[479:464]←SaturateSignedDwordToSignedWord (TMP\_SRC2[447:416]);
    TMP\_DEST[495:480]←SaturateSignedDwordToSignedWord (TMP\_SRC2[479:448]);
    TMP\_DEST[511:496]←SaturateSignedDwordToSignedWord (TMP\_SRC2[511:480]);
FI;
FOR j←0 TO KL\-1
    i←j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+15:i]←TMP\_DEST[i+15:i]
        ELSE
            IF *merging\-masking*
                        ; merging\-masking
                THEN *DEST[i+15:i] remains unchanged*
                ELSE *zeroing\-masking*
                            ; zeroing\-masking
                    DEST[i+15:i] ← 0
            FI
    FI;
ENDFOR;
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalents
.PP
.RS

.nf
VPACKSSDW\_\_m512i \_mm512\_packs\_epi32(\_\_m512i m1, \_\_m512i m2);

VPACKSSDW\_\_m512i \_mm512\_mask\_packs\_epi32(\_\_m512i s, \_\_mmask32 k, \_\_m512i m1, \_\_m512i m2);

VPACKSSDW\_\_m512i \_mm512\_maskz\_packs\_epi32( \_\_mmask32 k, \_\_m512i m1, \_\_m512i m2);

VPACKSSDW\_\_m256i \_mm256\_mask\_packs\_epi32( \_\_m256i s, \_\_mmask16 k, \_\_m256i m1, \_\_m256i m2);

VPACKSSDW\_\_m256i \_mm256\_maskz\_packs\_epi32( \_\_mmask16 k, \_\_m256i m1, \_\_m256i m2);

VPACKSSDW\_\_m128i \_mm\_mask\_packs\_epi32( \_\_m128i s, \_\_mmask8 k, \_\_m128i m1, \_\_m128i m2);

VPACKSSDW\_\_m128i \_mm\_maskz\_packs\_epi32( \_\_mmask8 k, \_\_m128i m1, \_\_m128i m2);

VPACKSSWB\_\_m512i \_mm512\_packs\_epi16(\_\_m512i m1, \_\_m512i m2);

VPACKSSWB\_\_m512i \_mm512\_mask\_packs\_epi16(\_\_m512i s, \_\_mmask32 k, \_\_m512i m1, \_\_m512i m2);

VPACKSSWB\_\_m512i \_mm512\_maskz\_packs\_epi16( \_\_mmask32 k, \_\_m512i m1, \_\_m512i m2);

VPACKSSWB\_\_m256i \_mm256\_mask\_packs\_epi16( \_\_m256i s, \_\_mmask16 k, \_\_m256i m1, \_\_m256i m2);

VPACKSSWB\_\_m256i \_mm256\_maskz\_packs\_epi16( \_\_mmask16 k, \_\_m256i m1, \_\_m256i m2);

VPACKSSWB\_\_m128i \_mm\_mask\_packs\_epi16( \_\_m128i s, \_\_mmask8 k, \_\_m128i m1, \_\_m128i m2);

VPACKSSWB\_\_m128i \_mm\_maskz\_packs\_epi16( \_\_mmask8 k, \_\_m128i m1, \_\_m128i m2);

PACKSSWB \_\_m128i \_mm\_packs\_epi16(\_\_m128i m1, \_\_m128i m2)

PACKSSDW \_\_m128i \_mm\_packs\_epi32(\_\_m128i m1, \_\_m128i m2)

VPACKSSWB \_\_m256i \_mm256\_packs\_epi16(\_\_m256i m1, \_\_m256i m2)

VPACKSSDW \_\_m256i \_mm256\_packs\_epi32(\_\_m256i m1, \_\_m256i m2)

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 4.

.PP
EVEX\-encoded VPACKSSDW, see Exceptions Type E4NF.

.PP
EVEX\-encoded VPACKSSWB, see Exceptions Type E4NF.nb.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
