.nh
.TH "X86-XSETBV" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
XSETBV - SET EXTENDED CONTROL REGISTER
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
NP 0F 01 D1	XSETBV	ZO	Valid	Valid	T{
Write the value in EDX:EAX to the XCR specified by ECX.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Writes the contents of registers EDX:EAX into the 64\-bit extended
control register (XCR) specified in the ECX register. (On processors
that support the Intel 64 architecture, the high\-order 32 bits of RCX
are ignored.) The contents of the EDX register are copied to high\-order
32 bits of the selected XCR and the contents of the EAX register are
copied to low\-order 32 bits of the XCR. (On processors that support the
Intel 64 architecture, the high\-order 32 bits of each of RAX and RDX are
ignored.) Undefined or reserved bits in an XCR should be set to values
previously read.

.PP
This instruction must be executed at privilege level 0 or in
real\-address mode; otherwise, a general protection exception #GP(0) is
generated. Specifying a reserved or unimplemented XCR in ECX will also
cause a general protection exception. The processor will also generate a
general protection exception if software attempts to write to reserved
bits in an XCR.

.PP
Currently, only XCR0 is supported. Thus, all other values of ECX are
reserved and will cause a #GP(0). Note that bit 0 of XCR0
(corresponding to x87 state) must be set to 1; the instruction will
cause a #GP(0) if an attempt is made to clear this bit. In addition,
the instruction causes a #GP(0) if an attempt is made to set XCR0[2]
(AVX state) while clearing XCR0[1] (SSE state); it is necessary to set
both bits to use AVX instructions; Section 13.3, “Enabling the XSAVE
Feature Set and XSAVE\-Enabled Features,” of Intel® 64 and IA\-32
Architectures Software Developer’s Manual, Volume 1.

.SH OPERATION
.PP
.RS

.nf
XCR[ECX] ← EDX:EAX;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
XSETBV: void \_xsetbv( unsigned int, unsigned \_\_int64);

.fi
.RE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the current privilege level is not 0.
T}
	T{
If an invalid XCR is specified in ECX.
T}
	T{
If the value in EDX:EAX sets bits that are reserved in the XCR specified by ECX.
T}
	T{
If an attempt is made to clear bit 0 of XCR0.
T}
	T{
If an attempt is made to set XCR0
T}
[
2:1
]
 to 10b.
#UD	If CPUID.01H:ECX.XSAVE
[
bit 26
]
 = 0.
	If CR4.OSXSAVE
[
bit 18
]
 = 0.
	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If an invalid XCR is specified in ECX.
T}
	T{
If the value in EDX:EAX sets bits that are reserved in the XCR specified by ECX.
T}
	T{
If an attempt is made to clear bit 0 of XCR0.
T}
	T{
If an attempt is made to set XCR0
T}
[
2:1
]
 to 10b.
#UD	If CPUID.01H:ECX.XSAVE
[
bit 26
]
 = 0.
	If CR4.OSXSAVE
[
bit 18
]
 = 0.
	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
The XSETBV instruction is not recognized in virtual\-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
