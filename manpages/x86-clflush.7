.nh
.TH "X86-CLFLUSH" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
CLFLUSH - FLUSH CACHE LINE
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode / Instruction\fR	\fB\fCOp/En\fR	\fB\fC64\-bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
NP 0F AE /7 CLFLUSH m8	M	Valid	Valid	T{
Flushes cache line containing m8.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
M	ModRM:r/m (w)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Invalidates from every level of the cache hierarchy in the cache
coherence domain the cache line that contains the linear address
specified with the memory operand. If that cache line contains modified
data at any level of the cache hierarchy, that data is written back to
memory. The source operand is a byte memory location.

.PP
The availability of CLFLUSH is indicated by the presence of the CPUID
feature flag CLFSH (CPUID.01H:EDX[bit 19]). The aligned cache line
size affected is also indicated with the CPUID instruction (bits 8
through 15 of the EBX register when the initial value in the EAX
register is 1).

.PP
The memory attribute of the page containing the affected line has no
effect on the behavior of this instruction. It should be noted that
processors are free to speculatively fetch and cache data from system
memory regions assigned a memory\-type allowing for speculative reads
(such as, the WB, WC, and WT memory types). PREFETCHh instructions or
any of the speculative fetching mechanisms (that is, data can be
speculatively loaded into a cache line just before, during, or after the
execution of a CLFLUSH instruction that references the cache line).

.PP
Executions of the CLFLUSH instruction are ordered with respect to each
other and with respect to writes, locked read\-modify\-write instructions,
fence instructions, and executions of CLFLUSHOPT to the same cache
line.1 They are not ordered with respect to executions of CLFLUSHOPT to
different cache lines.

.PP
.RS

.PP
1\&. Earlier versions of this manual specified that executions of the
CLFLUSH instruction were ordered only by the MFENCE instruction. All
processors implementing the CLFLUSH instruction also order it relative
to the other operations enumerated above.

.RE

.PP
The CLFLUSH instruction can be used at all privilege levels and is
subject to all permission checking and faults associated with a byte
load (and in addition, a CLFLUSH instruction is allowed to flush a
linear address in an execute\-only segment). Like a load, the CLFLUSH
instruction sets the A bit but not the D bit in the page tables.

.PP
In some implementations, the CLFLUSH instruction may always cause
transactional abort with Transactional Synchronization Extensions (TSX).
The CLFLUSH instruction is not expected to be commonly used inside
typical transactional regions. However, programmers must not rely on
CLFLUSH instruction to force a transactional abort, since whether they
cause transactional abort is implementation dependent.

.PP
The CLFLUSH instruction was introduced with the SSE2 extensions;
however, because it has its own CPUID feature flag, it can be
implemented in IA\-32 processors that do not include the SSE2 extensions.
Also, detecting the presence of the SSE2 extensions with the CPUID
instruction does not guarantee that the CLFLUSH instruction is
implemented in the processor.

.PP
CLFLUSH operation is the same in non\-64\-bit modes and 64\-bit mode.

.SH OPERATION
.PP
.RS

.nf
Flush\_Cache\_Line(SRC);

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENTS
.PP
.RS

.nf
CLFLUSH: void \_mm\_clflush(void const *p)

.fi
.RE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.
T}
#SS(0)	T{
For an illegal address in the SS segment.
T}
#PF(fault\-code)	For a page fault.
#UD	If CPUID.01H:EDX.CLFSH
[
bit 19
]
 = 0.
	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If any part of the operand lies outside the effective address space from 0 to FFFFH.
T}
#UD	If CPUID.01H:EDX.CLFSH
[
bit 19
]
 = 0.
	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in real address mode.

.TS
allbox;
l l 
l l .
#PF(fault\-code)	For a page fault.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#PF(fault\-code)	For a page fault.
#UD	If CPUID.01H:EDX.CLFSH
[
bit 19
]
 = 0.
	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
