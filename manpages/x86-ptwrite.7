.nh
.TH "X86-PTWRITE" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
PTWRITE - WRITE DATA TO A PROCESSOR TRACE PACKET
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
F3 REX.W 0F AE /4 PTWRITE r64/m64
T}
	RM	V/N.E		T{
Reads the data from r64/m64 to encode into a PTW packet if dependencies are met (see details below).
T}
F3 0F AE /4 PTWRITE r32/m32	RM	V/V		T{
Reads the data from r32/m32 to encode into a PTW packet if dependencies are met (see details below).
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:rm (r)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
This instruction reads data in the source operand and sends it to the
Intel Processor Trace hardware to be encoded in a PTW packet if
TriggerEn, ContextEn, FilterEn, and PTWEn are all set to 1. For more
details on these values, see Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 3C, Section 35.2.2, “Software Trace
Instrumentation with PTWRITE”. The size of data is 64\-bit if using REX.W
in 64\-bit mode, otherwise 32\-bits of data are copied from the source
operand.

.PP
Note: The instruction will #UD if prefix 66H is used.

.SH OPERATION
.PP
.RS

.nf
IF (IA32\_RTIT\_STATUS.TriggerEn \& IA32\_RTIT\_STATUS.ContextEn \& IA32\_RTIT\_STATUS.FilterEn \& IA32\_RTIT\_CTL.PTWEn) = 1
    PTW.PayloadBytes ← Encoded payload size;
    PTW.IP ← IA32\_RTIT\_CTL.FUPonPTW
    IF IA32\_RTIT\_CTL.FUPonPTW = 1
        Insert FUP packet with IP of PTWRITE;
    FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH OTHER EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS or GS segments.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF	(fault\-code) For a page fault.
#AC(0)	T{
If an unaligned memory reference is made while the current privilege level is 3 and alignment checking is enabled.
T}
#UD	T{
If CPUID.(EAX=14H, ECX=0):EBX.PTWRITE 
T}
[
Bit 4
]
 = 0.
	If LOCK prefix is used.
	If 66H prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If any part of the operand lies outside of the effective address space from 0 to 0FFFFH.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	T{
If CPUID.(EAX=14H, ECX=0):EBX.PTWRITE 
T}
[
Bit 4
]
 = 0.
	If LOCK prefix is used.
	If 66H prefix is used.
.TE

.SH VIRTUAL 8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If any part of the operand lies outside of the effective address space from 0 to 0FFFFH.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF	(fault\-code) For a page fault.
#AC(0)	T{
If an unaligned memory reference is made while alignment checking is enabled.
T}
#UD	T{
If CPUID.(EAX=14H, ECX=0):EBX.PTWRITE 
T}
[
Bit 4
]
 = 0.
	If LOCK prefix is used.
	If 66H prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in Protected Mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#PF	(fault\-code) For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	T{
If CPUID.(EAX=14H, ECX=0):EBX.PTWRITE 
T}
[
Bit 4
]
 = 0.
	If LOCK prefix is used.
	If 66H prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
