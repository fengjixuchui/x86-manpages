.nh
.TH "X86-CVTPS2PD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
CVTPS2PD - CONVERT PACKED SINGLE-PRECISION FLOATING-POINT VALUES TO PACKED DOUBLE-PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
NP 0F 5A /r CVTPS2PD xmm1, xmm2/m64
T}
	A	V/V	SSE2	T{
Convert two packed single\-precision floating\-point values in xmm2/m64 to two packed double\-precision floating\-point values in xmm1.
T}
T{
VEX.128.0F.WIG 5A /r VCVTPS2PD xmm1, xmm2/m64
T}
	A	V/V	AVX	T{
Convert two packed single\-precision floating\-point values in xmm2/m64 to two packed double\-precision floating\-point values in xmm1.
T}
T{
VEX.256.0F.WIG 5A /r VCVTPS2PD ymm1, xmm2/m128
T}
	A	V/V	AVX	T{
Convert four packed single\-precision floating\-point values in xmm2/m128 to four packed double\-precision floating\-point values in ymm1.
T}
T{
EVEX.128.0F.W0 5A /r VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst
T}
	B	V/V	AVX512VL AVX512F	T{
Convert two packed single\-precision floating\-point values in xmm2/m64/m32bcst to packed double\-precision floating\-point values in xmm1 with writemask k1.
T}
T{
EVEX.256.0F.W0 5A /r VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst
T}
	B	V/V	AVX512VL	T{
Convert four packed single\-precision floating\-point values in xmm2/m128/m32bcst to packed double\-precision floating\-point values in ymm1 with writemask k1.
T}
T{
EVEX.512.0F.W0 5A /r VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}
T}
	B	V/V	AVX512F	T{
Convert eight packed single\-precision floating\-point values in ymm2/m256/b32bcst to eight packed double\-precision floating\-point values in zmm1 with writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
B	Half	ModRM:reg (w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Converts two, four or eight packed single\-precision floating\-point
values in the source operand (second operand) to two, four or eight
packed double\-precision floating\-point values in the destination operand
(first operand).

.PP
EVEX encoded versions: The source operand is a YMM/XMM/XMM (low 64\-bits)
register, a 256/128/64\-bit memory location or a 256/128/64\-bit vector
broadcasted from a 32\-bit memory location. The destination operand is a
ZMM/YMM/XMM register conditionally updated with writemask k1.

.PP
VEX.256 encoded version: The source operand is an XMM register or 128\-
bit memory location. The destination operand is a YMM register. Bits
(MAXVL\-1:256) of the corresponding destination ZMM register are zeroed.

.PP
VEX.128 encoded version: The source operand is an XMM register or 64\-
bit memory location. The destination operand is a XMM register. The
upper Bits (MAXVL\-1:128) of the corresponding ZMM register destination
are zeroed.

.PP
128\-bit Legacy SSE version: The source operand is an XMM register or 64\-
bit memory location. The destination operand is an XMM register. The
upper Bits (MAXVL\-1:128) of the corresponding ZMM register destination
are unmodified.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.PP
X3X2X1X0SRCX1X0X3X2DEST

.PP
Figure 3\-14. CVTPS2PD (VEX.256 encoded version)

.SH OPERATION
.SS VCVTPS2PD (EVEX encoded versions) when src operand is a register
.PP
.RS

.nf
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL\-1
    i←j * 64
    k←j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i]←
            Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[k+31:k])
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE ; zeroing\-masking
                    DEST[i+63:i] ← 0
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VCVTPS2PD (EVEX encoded versions) when src operand is a memory source
.PP
.RS

.nf
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL\-1
    i←j * 64
    k←j * 32
    IF k1[j] OR *no writemask*
        THEN
            IF (EVEX.b = 1)
                THEN
                    DEST[i+63:i] ←
            Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[31:0])
                ELSE
                    DEST[i+63:i] ←
            Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[k+31:k])
            FI;
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE ; zeroing\-masking
                    DEST[i+63:i] ← 0
            FI
    FI;
ENDFOR
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VCVTPS2PD (VEX.256 encoded version)
.PP
.RS

.nf
DEST[63:0] ← Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[31:0])
DEST[127:64] ← Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[63:32])
DEST[191:128] ← Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[95:64])
DEST[255:192] ← Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[127:96)
DEST[MAXVL\-1:256] ← 0

.fi
.RE

.SS VCVTPS2PD (VEX.128 encoded version)
.PP
.RS

.nf
DEST[63:0] ← Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[31:0])
DEST[127:64] ← Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[63:32])
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS CVTPS2PD (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[63:0] ← Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[31:0])
DEST[127:64] ← Convert\_Single\_Precision\_To\_Double\_Precision\_Floating\_Point(SRC[63:32])
DEST[MAXVL\-1:128] (unmodified)

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VCVTPS2PD \_\_m512d \_mm512\_cvtps\_pd( \_\_m256 a);

VCVTPS2PD \_\_m512d \_mm512\_mask\_cvtps\_pd( \_\_m512d s, \_\_mmask8 k, \_\_m256 a);

VCVTPS2PD \_\_m512d \_mm512\_maskz\_cvtps\_pd( \_\_mmask8 k, \_\_m256 a);

VCVTPS2PD \_\_m512d \_mm512\_cvt\_roundps\_pd( \_\_m256 a, int sae);

VCVTPS2PD \_\_m512d \_mm512\_mask\_cvt\_roundps\_pd( \_\_m512d s, \_\_mmask8 k, \_\_m256 a, int sae);

VCVTPS2PD \_\_m512d \_mm512\_maskz\_cvt\_roundps\_pd( \_\_mmask8 k, \_\_m256 a, int sae);

VCVTPS2PD \_\_m256d \_mm256\_mask\_cvtps\_pd( \_\_m256d s, \_\_mmask8 k, \_\_m128 a);

VCVTPS2PD \_\_m256d \_mm256\_maskz\_cvtps\_pd( \_\_mmask8 k, \_\_m128a);

VCVTPS2PD \_\_m128d \_mm\_mask\_cvtps\_pd( \_\_m128d s, \_\_mmask8 k, \_\_m128 a);

VCVTPS2PD \_\_m128d \_mm\_maskz\_cvtps\_pd( \_\_mmask8 k, \_\_m128 a);

VCVTPS2PD \_\_m256d \_mm256\_cvtps\_pd (\_\_m128 a)

CVTPS2PD \_\_m128d \_mm\_cvtps\_pd (\_\_m128 a)

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
Invalid, Denormal

.SH OTHER EXCEPTIONS
.PP
VEX\-encoded instructions, see Exceptions Type 3;

.PP
EVEX\-encoded instructions, see Exceptions Type E3.

.TS
allbox;
l l 
l l .
#UD	T{
If VEX.vvvv != 1111B or EVEX.vvvv != 1111B.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
