.nh
.TH "X86-POR" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
POR - BITWISE LOGICAL OR
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F EB /mm, mm/m64	A	V/V	MMX	Bitwise OR of mm.
66 0F EB /xmm2/m128	A	V/V	SSE2	Bitwise OR of xmm1.
T{
VEX.128.66.0F.WIG EB /r VPOR xmm1, xmm2, xmm3/m128
T}
	B	V/V	AVX	Bitwise OR of xmm3.
T{
VEX.256.66.0F.WIG EB /r VPOR ymm1, ymm2, ymm3/m256
T}
	B	V/V	AVX2	Bitwise OR of ymm3.
T{
EVEX.128.66.0F.W0 EB /r VPORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
T}
	C	V/V	AVX512VL AVX512F	T{
Bitwise OR of packed doubleword integers in xmm2 and xmm3/m128/m32bcst using writemask k1.
T}
T{
EVEX.256.66.0F.W0 EB /r VPORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
T}
	C	V/V	AVX512VL AVX512F	T{
Bitwise OR of packed doubleword integers in ymm2 and ymm3/m256/m32bcst using writemask k1.
T}
T{
EVEX.512.66.0F.W0 EB /r VPORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
T}
	C	V/V	AVX512F	T{
Bitwise OR of packed doubleword integers in zmm2 and zmm3/m512/m32bcst using writemask k1.
T}
T{
EVEX.128.66.0F.W1 EB /r VPORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
T}
	C	V/V	AVX512VL AVX512F	T{
Bitwise OR of packed quadword integers in xmm2 and xmm3/m128/m64bcst using writemask k1.
T}
T{
EVEX.256.66.0F.W1 EB /r VPORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
T}
	C	V/V	AVX512VL AVX512F	T{
Bitwise OR of packed quadword integers in ymm2 and ymm3/m256/m64bcst using writemask k1.
T}
T{
EVEX.512.66.0F.W1 EB /r VPORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
T}
	C	V/V	AVX512F	T{
Bitwise OR of packed quadword integers in zmm2 and zmm3/m512/m64bcst using writemask k1.
T}
.TE

.PP
.RS

.PP
1\&. See note in Section 2.4, “AVX and SSE Instruction Exception
Specification” in the Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 3A.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
C	Full	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Performs a bitwise logical OR operation on the source operand (second
operand) and the destination operand (first operand) and stores the
result in the destination operand. Each bit of the result is set to 1 if
either or both of the corresponding bits of the first and second
operands are 1; otherwise, it is set to 0.

.PP
In 64\-bit mode and not encoded with VEX/EVEX, using a REX prefix in the
form of REX.R permits this instruction to access additional registers
(XMM8\-XMM15).

.PP
Legacy SSE version: The source operand can be an MMX technology register
or a 64\-bit memory location. The destination operand is an MMX
technology register.

.PP
128\-bit Legacy SSE version: The second source operand is an XMM register
or a 128\-bit memory location. The first source and destination operands
can be XMM registers. Bits (MAXVL\-1:128) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: The second source operand is an XMM register or
a 128\-bit memory location. The first source and destination operands can
be XMM registers. Bits (MAXVL\-1:128) of the destination YMM register are
zeroed.

.PP
VEX.256 encoded version: The second source operand is an YMM register or
a 256\-bit memory location. The first source and destination operands can
be YMM registers.

.PP
EVEX encoded version: The first source operand is a ZMM/YMM/XMM
register. The second source operand can be a ZMM/YMM/XMM register, a
512/256/128\-bit memory location or a 512/256/128\-bit vector broadcasted
from a 32/64\-bit memory location. The destination operand is a
ZMM/YMM/XMM register conditionally updated with writemask k1 at
32/64\-bit granularity.

.SH OPERATION
.SS POR (64\-bit operand)
.PP
.RS

.nf
DEST←DEST OR SRC

.fi
.RE

.SS POR (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST←DEST OR SRC
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS VPOR (VEX.128 encoded version)
.PP
.RS

.nf
DEST←SRC1 OR SRC2
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VPOR (VEX.256 encoded version)
.PP
.RS

.nf
DEST←SRC1 OR SRC2
DEST[MAXVL\-1:256] ← 0

.fi
.RE

.SS VPORD (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j←0 TO KL\-1
    i←j * 32
    IF k1[j] OR *no writemask* THEN
            IF (EVEX.b = 1) AND (SRC2 *is memory*)
                THEN DEST[i+31:i]←SRC1[i+31:i] BITWISE OR SRC2[31:0]
                ELSE DEST[i+31:i]←SRC1[i+31:i] BITWISE OR SRC2[i+31:i]
            FI;
        ELSE
            IF *merging\-masking* ; merging\-masking
                *DEST[i+31:i] remains unchanged*
                ELSE
                        ; zeroing\-masking
                    DEST[i+31:i] ← 0
            FI;
    FI;
ENDFOR;
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
VPORD \_\_m512i \_mm512\_or\_epi32(\_\_m512i a, \_\_m512i b);

VPORD \_\_m512i \_mm512\_mask\_or\_epi32(\_\_m512i s, \_\_mmask16 k, \_\_m512i a, \_\_m512i b);

VPORD \_\_m512i \_mm512\_maskz\_or\_epi32( \_\_mmask16 k, \_\_m512i a, \_\_m512i b);

VPORD \_\_m256i \_mm256\_or\_epi32(\_\_m256i a, \_\_m256i b);

VPORD \_\_m256i \_mm256\_mask\_or\_epi32(\_\_m256i s, \_\_mmask8 k, \_\_m256i a, \_\_m256i b,);

VPORD \_\_m256i \_mm256\_maskz\_or\_epi32( \_\_mmask8 k, \_\_m256i a, \_\_m256i b);

VPORD \_\_m128i \_mm\_or\_epi32(\_\_m128i a, \_\_m128i b);

VPORD \_\_m128i \_mm\_mask\_or\_epi32(\_\_m128i s, \_\_mmask8 k, \_\_m128i a, \_\_m128i b);

VPORD \_\_m128i \_mm\_maskz\_or\_epi32( \_\_mmask8 k, \_\_m128i a, \_\_m128i b);

VPORQ \_\_m512i \_mm512\_or\_epi64(\_\_m512i a, \_\_m512i b);

VPORQ \_\_m512i \_mm512\_mask\_or\_epi64(\_\_m512i s, \_\_mmask8 k, \_\_m512i a, \_\_m512i b);

VPORQ \_\_m512i \_mm512\_maskz\_or\_epi64(\_\_mmask8 k, \_\_m512i a, \_\_m512i b);

VPORQ \_\_m256i \_mm256\_or\_epi64(\_\_m256i a, int imm);

VPORQ \_\_m256i \_mm256\_mask\_or\_epi64(\_\_m256i s, \_\_mmask8 k, \_\_m256i a, \_\_m256i b);

VPORQ \_\_m256i \_mm256\_maskz\_or\_epi64( \_\_mmask8 k, \_\_m256i a, \_\_m256i b);

VPORQ \_\_m128i \_mm\_or\_epi64(\_\_m128i a, \_\_m128i b);

VPORQ \_\_m128i \_mm\_mask\_or\_epi64(\_\_m128i s, \_\_mmask8 k, \_\_m128i a, \_\_m128i b);

VPORQ \_\_m128i \_mm\_maskz\_or\_epi64( \_\_mmask8 k, \_\_m128i a, \_\_m128i b);

POR \_\_m64 \_mm\_or\_si64(\_\_m64 m1, \_\_m64 m2)

(V)POR: \_\_m128i \_mm\_or\_si128(\_\_m128i m1, \_\_m128i m2)

VPOR: \_\_m256i \_mm256\_or\_si256 ( \_\_m256i a, \_\_m256i b)

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None.

.SH OTHER EXCEPTIONS
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 4.

.PP
EVEX\-encoded instruction, see Exceptions Type E4.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
