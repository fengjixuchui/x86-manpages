.nh
.TH "X86-LDMXCSR" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
LDMXCSR - LOAD MXCSR REGISTER
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32\-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F AE /2 LDMXCSR m32	M	V/V	SSE	Load MXCSR register from m32.
T{
VEX.LZ.0F.WIG AE /2 VLDMXCSR m32
T}
	M	V/V	AVX	Load MXCSR register from m32.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
M	ModRM:r/m (r)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Loads the source operand into the MXCSR control/status register. The
source operand is a 32\-bit memory location. See “MXCSR Control and
Status Register” in Chapter 10, of the Intel® 64 and IA\-32 Architectures
Software Developer’s Manual, Volume 1, for a description of the MXCSR
register and its contents.

.PP
The LDMXCSR instruction is typically used in conjunction with the
(V)STMXCSR instruction, which stores the contents of the MXCSR register
in memory.

.PP
The default MXCSR value at reset is 1F80H.

.PP
If a (V)LDMXCSR instruction clears a SIMD floating\-point exception mask
bit and sets the corresponding exception flag bit, a SIMD floating\-point
exception will not be immediately generated. The exception will be
generated only upon the execution of the next instruction that meets
both conditions below:

.RS
.IP \(bu 2
the instruction must operate on an XMM or YMM register operand,
.IP \(bu 2
the instruction causes that particular SIMD floating\-point exception
to be reported.

.RE

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.PP
If VLDMXCSR is encoded with VEX.L= 1, an attempt to execute the
instruction encoded with VEX.L= 1 will cause an #UD exception.

.PP
Note: In VEX\-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.

.SH OPERATION
.PP
.RS

.nf
MXCSR ← m32;

.fi
.RE

.SH C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
\_mm\_setcsr(unsigned int i)

.fi
.RE

.SH NUMERIC EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 5; additionally

.TS
allbox;
l l 
l l .
#GP	T{
For an attempt to set reserved bits in MXCSR.
T}
#UD	If VEX.vvvv ≠ 1111B.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
