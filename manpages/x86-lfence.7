.nh
.TH "X86-LFENCE" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
LFENCE - LOAD FENCE
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
NP 0F AE E8	LFENCE	ZO	Valid	Valid	Serializes load operations.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Performs a serializing operation on all load\-from\-memory instructions
that were issued prior the LFENCE instruction. Specifically, LFENCE does
not execute until all prior instructions have completed locally, and no
later instruction begins execution until LFENCE completes. In
particular, an instruction that loads from memory and that precedes an
LFENCE receives data from memory prior to completion of the LFENCE. (An
LFENCE that follows an instruction that stores to memory might complete
before the data being stored have become globally visible.) Instructions
following an LFENCE may be fetched from memory before the LFENCE, but
they will not execute (even speculatively) until the LFENCE completes.

.PP
Weakly ordered memory types can be used to achieve higher processor
performance through such techniques as out\-of\-order issue and
speculative reads. The degree to which a consumer of data recognizes or
knows that the data is weakly ordered varies among applications and may
be unknown to the producer of this data. The LFENCE instruction provides
a performance\-efficient way of ensuring load ordering between routines
that produce weakly\-ordered results and routines that consume that data.

.PP
Processors are free to fetch and cache data speculatively from regions
of system memory that use the WB, WC, and WT memory types. This
speculative fetching can occur at any time and is not tied to
instruction execution. Thus, it is not ordered with respect to
executions of the LFENCE instruction; data can be brought into the
caches speculatively just before, during, or after the execution of an
LFENCE instruction.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.PP
Specification of the instruction's opcode above indicates a ModR/M byte
of E8. For this instruction, the processor ignores the r/m field of the
ModR/M byte. Thus, LFENCE is encoded by any opcode of the form 0F AE Ex,
where x is in the range 8\-F.

.SH OPERATION
.PP
.RS

.nf
Wait\_On\_Following\_Instructions\_Until(preceding\_instructions\_complete);

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
void \_mm\_lfence(void)

.fi
.RE

.SH EXCEPTIONS (ALL MODES OF OPERATION)
.PP
#UD If CPUID.01H:EDX.SSE2[bit 26] = 0.

.PP
If the LOCK prefix is used.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
