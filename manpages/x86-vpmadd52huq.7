.nh
.TH "X86-VPMADD52HUQ" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VPMADD52HUQ - PACKED MULTIPLY OF UNSIGNED 52-BIT UNSIGNED INTEGERS AND ADD HIGH 52-BIT PRODUCTS TO 64-BIT ACCUMULATORS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC32/64 bit Mode Support\fR	\fB\fCCPUID\fR	\fB\fCDescription\fR
T{
EVEX.128.66.0F38.W1 B5 /r VPMADD52HUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
T}
	A	V/V	AVX512\_IFMA AVX512VL	T{
Multiply unsigned 52\-bit integers in xmm2 and xmm3/m128 and add the high 52 bits of the 104\-bit product to the qword unsigned integers in xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F38.W1 B5 /r VPMADD52HUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
T}
	A	V/V	AVX512\_IFMA AVX512VL	T{
Multiply unsigned 52\-bit integers in ymm2 and ymm3/m128 and add the high 52 bits of the 104\-bit product to the qword unsigned integers in ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F38.W1 B5 /r VPMADD52HUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
T}
	A	V/V	AVX512\_IFMA	T{
Multiply unsigned 52\-bit integers in zmm2 and zmm3/m128 and add the high 52 bits of the 104\-bit product to the qword unsigned integers in zmm1 using writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	Full	ModRM:reg (r, w)	EVEX.vvvv (r)	ModRM:r/m(r)	NA
.TE

.SS Description
.PP
Multiplies packed unsigned 52\-bit integers in each qword element of the
first source operand (the second operand) with the packed unsigned
52\-bit integers in the corresponding elements of the second source
operand (the third operand) to form packed 104\-bit intermediate results.
The high 52\-bit, unsigned integer of each 104\-bit product is added to
the corresponding qword unsigned integer of the destination operand (the
first operand) under the writemask k1.

.PP
The first source operand is a ZMM/YMM/XMM register. The second source
operand can be a ZMM/YMM/XMM register, a 512/256/128\-bit memory location
or a 512/256/128\-bit vector broadcasted from a 64\-bit memory location.
The destination operand is a ZMM/YMM/XMM register conditionally updated
with writemask k1 at 64\-bit granularity.

.SS Operation
.SS VPMADD52HUQ (EVEX encoded)
.PP
.RS

.nf
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j ← 0 TO KL\-1
    i←j * 64;
    IF k1[j] OR *no writemask* THEN
        IF src2 is Memory AND EVEX.b=1 THEN
            tsrc2[63:0] ← ZeroExtend64(src2[51:0]);
        ELSE
            tsrc2[63:0] ← ZeroExtend64(src2[i+51:i];
        FI;
        Temp128[127:0] ← ZeroExtend64(src1[i+51:i]) * tsrc2[63:0];
        Temp2[63:0] ← DEST[i+63:i] + ZeroExtend64(temp128[103:52]) ;
        DEST[i+63:i] ← Temp2[63:0];
    ELSE
        IF *zeroing\-masking* THEN
            DEST[i+63:i] ← 0;
        ELSE *merge\-masking*
            DEST[i+63:i] is unchanged;
        FI;
    FI;
ENDFOR
DEST[MAX\_VL\-1:VL] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VPMADD52HUQ \_\_m512i \_mm512\_madd52hi\_epu64( \_\_m512i a, \_\_m512i b, \_\_m512i c);

VPMADD52HUQ \_\_m512i \_mm512\_mask\_madd52hi\_epu64(\_\_m512i s, \_\_mmask8 k, \_\_m512i a, \_\_m512i b, \_\_m512i c);

VPMADD52HUQ \_\_m512i \_mm512\_maskz\_madd52hi\_epu64( \_\_mmask8 k, \_\_m512i a, \_\_m512i b, \_\_m512i c);

VPMADD52HUQ \_\_m256i \_mm256\_madd52hi\_epu64( \_\_m256i a, \_\_m256i b, \_\_m256i c);

VPMADD52HUQ \_\_m256i \_mm256\_mask\_madd52hi\_epu64(\_\_m256i s, \_\_mmask8 k, \_\_m256i a, \_\_m256i b, \_\_m256i c);

VPMADD52HUQ \_\_m256i \_mm256\_maskz\_madd52hi\_epu64( \_\_mmask8 k, \_\_m256i a, \_\_m256i b, \_\_m256i c);

VPMADD52HUQ \_\_m128i \_mm\_madd52hi\_epu64( \_\_m128i a, \_\_m128i b, \_\_m128i c);

VPMADD52HUQ \_\_m128i \_mm\_mask\_madd52hi\_epu64(\_\_m128i s, \_\_mmask8 k, \_\_m128i a, \_\_m128i b, \_\_m128i c);

VPMADD52HUQ \_\_m128i \_mm\_maskz\_madd52hi\_epu64( \_\_mmask8 k, \_\_m128i a, \_\_m128i b, \_\_m128i c);

.fi
.RE

.SS Flags Affected
.PP
None.

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
See Exceptions Type E4.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
