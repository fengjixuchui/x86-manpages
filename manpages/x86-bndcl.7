.nh
.TH "X86-BNDCL" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
BNDCL - CHECK LOWER BOUND
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
F3 0F 1A /r BNDCL bnd, r/m32	RM	NE/V	MPX	Generate a 
#
T{
BR if the address in r/m32 is lower than the lower bound in bnd.LB.
T}
F3 0F 1A /r BNDCL bnd, r/m64	RM	V/NE	MPX	Generate a 
#
T{
BR if the address in r/m64 is lower than the lower bound in bnd.LB.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
Op/En	Operand 1	Operand 2	Operand 3
RM	ModRM:reg (w)	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Compare the address in the second operand with the lower bound in bnd.
The second operand can be either a register or memory operand. If the
address is lower than the lower bound in bnd.LB, it will set BNDSTATUS
to 01H and signal a #BR exception.

.PP
This instruction does not cause any memory access, and does not read or
write any flags.

.SH OPERATION
.SS BNDCL BND, reg
.PP
.RS

.nf
IF reg < BND.LB Then
    BNDSTATUS ← 01H;
    #BR;
FI;

.fi
.RE

.SS BNDCL BND, mem
.PP
.RS

.nf
TEMP ← LEA(mem);
IF TEMP < BND.LB Then
    BNDSTATUS ← 01H;
    #BR;
FI;

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
BNDCL void \_bnd\_chk\_ptr\_lbounds(const void *q)

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#BR	If lower bound check fails.
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4\-BND7 when Intel MPX is enabled.
T}
	T{
If 67H prefix is not used and CS.D=0.
T}
	T{
If 67H prefix is used and CS.D=1.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#BR	If lower bound check fails.
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4\-BND7 when Intel MPX is enabled.
T}
	If 16\-bit addressing is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#BR	If lower bound check fails.
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4\-BND7 when Intel MPX is enabled.
T}
	If 16\-bit addressing is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
If ModRM.r/m and REX encodes BND4\-BND15 when Intel MPX is enabled.
T}
.TE

.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
