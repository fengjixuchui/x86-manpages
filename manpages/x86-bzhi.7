.nh
.TH "X86-BZHI" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
BZHI - ZERO HIGH BITS STARTING WITH SPECIFIED BIT POSITION
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 \-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.LZ.0F38.W0 F5 /r BZHI r32a, r/m32, r32b
T}
	RMV	V/V	BMI2	T{
Zero bits in r/m32 starting with the position in r32b, write result to r32a.
T}
T{
VEX.LZ.0F38.W1 F5 /r BZHI r64a, r/m64, r64b
T}
	RMV	V/N.E.	BMI2	T{
Zero bits in r/m64 starting with the position in r64b, write result to r64a.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RMV	ModRM:reg (w)	ModRM:r/m (r)	VEX.vvvv (r)	NA
.TE

.SH DESCRIPTION
.PP
BZHI copies the bits of the first source operand (the second operand)
into the destination operand (the first operand) and clears the higher
bits in the destination according to the INDEX value specified by the
second source operand (the third operand). The INDEX is specified by
bits 7:0 of the second source operand. The INDEX value is saturated at
the value of OperandSize \-1. CF is set, if the number contained in the 8
low bits of the third operand is greater than OperandSize \-1.

.PP
This instruction is not supported in real mode and virtual\-8086 mode.
The operand size is always 32 bits if not in 64\-bit mode. In 64\-bit mode
operand size 64 requires VEX.W1. VEX.W1 is ignored in non\-64\-bit modes.
An attempt to execute this instruction with VEX.L not equal to 0 will
cause #UD.

.SH OPERATION
.PP
.RS

.nf
N ← SRC2[7:0]
DEST ← SRC1
IF (N < OperandSize)
    DEST[OperandSize\-1:N] ← 0
FI
IF (N > OperandSize \- 1)
    CF ← 1
ELSE
    CF ← 0
FI

.fi
.RE

.SH FLAGS AFFECTED
.PP
ZF, CF and SF flags are updated based on the result. OF flag is cleared.
AF and PF flags are undefined.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
BZHI: unsigned \_\_int32 \_bzhi\_u32(unsigned \_\_int32 src, unsigned \_\_int32 index);

BZHI: unsigned \_\_int64 \_bzhi\_u64(unsigned \_\_int64 src, unsigned \_\_int32 index);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 13.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
