.nh
.TH "X86-MFENCE" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
MFENCE - MEMORY FENCE
.TS
allbox;
l 
l .
T{
Opcode Instruction Op/ 64\-Bit Compat/ Description En Mode Leg Mode NP 0F AE F0 MFENCE ZO Valid Valid Serializes load and store operations.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l 
l .
T{
Op/En Operand 1 Operand 2 Operand 3 Operand 4 ZO NA NA NA NA
T}
.TE

.SH DESCRIPTION
.PP
Performs a serializing operation on all load\-from\-memory and
store\-to\-memory instructions that were issued prior the MFENCE
instruction. This serializing operation guarantees that every load and
store instruction that precedes the MFENCE instruction in program order
becomes globally visible before any load or store instruction that
follows the MFENCE instruction.1 The MFENCE instruction is ordered with
respect to all load and store instructions, other MFENCE instructions,
any LFENCE and SFENCE instructions, and any serializing instructions
(such as the CPUID instruction). MFENCE does not serialize the
instruction stream.

.PP
.RS

.PP
1\&. A load instruction is considered to become globally visible when
the value to be loaded into its destination register is determined.

.RE

.PP
Weakly ordered memory types can be used to achieve higher processor
performance through such techniques as out\-of\-order issue, speculative
reads, write\-combining, and write\-collapsing. The degree to which a
consumer of data recognizes or knows that the data is weakly ordered
varies among applications and may be unknown to the producer of this
data. The MFENCE instruction provides a performance\-efficient way of
ensuring load and store ordering between routines that produce
weakly\-ordered results and routines that consume that data.

.PP
Processors are free to fetch and cache data speculatively from regions
of system memory that use the WB, WC, and WT memory types. This
speculative fetching can occur at any time and is not tied to
instruction execution. Thus, it is not ordered with respect to
executions of the MFENCE instruction; data can be brought into the
caches speculatively just before, during, or after the execution of an
MFENCE instruction.

.PP
This instruction’s operation is the same in non\-64\-bit modes and 64\-bit
mode.

.PP
Specification of the instruction's opcode above indicates a ModR/M byte
of F0. For this instruction, the processor ignores the r/m field of the
ModR/M byte. Thus, MFENCE is encoded by any opcode of the form 0F AE Fx,
where x is in the range 0\-7.

.SH OPERATION
.PP
.RS

.nf
Wait\_On\_Following\_Loads\_And\_Stores\_Until(preceding\_loads\_and\_stores\_globally\_visible);

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
void \_mm\_mfence(void)

.fi
.RE

.SH EXCEPTIONS (ALL MODES OF OPERATION)
.PP
#UD If CPUID.01H:EDX.SSE2[bit 26] = 0.

.PP
If the LOCK prefix is used.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
