.nh
.TH "X86-PAVGB-PAVGW" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
PAVGB-PAVGW - AVERAGE PACKED INTEGERS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F E0 /mm1, mm2/m64	A	V/V	SSE	T{
Average packed unsigned byte integers from mm1 with rounding.
T}
66 0F E0, /xmm2/m128	A	V/V	SSE2	T{
Average packed unsigned byte integers from xmm1 with rounding.
T}
NP 0F E3 /mm1, mm2/m64	A	V/V	SSE	T{
Average packed unsigned word integers from mm2/m64 and mm1 with rounding.
T}
66 0F E3 /xmm2/m128	A	V/V	SSE2	T{
Average packed unsigned word integers from xmm1 with rounding.
T}
T{
VEX.128.66.0F.WIG E0 /r VPAVGB xmm1, xmm2, xmm3/m128
T}
	B	V/V	AVX	T{
Average packed unsigned byte integers from xmm2 with rounding.
T}
T{
VEX.128.66.0F.WIG E3 /r VPAVGW xmm1, xmm2, xmm3/m128
T}
	B	V/V	AVX	T{
Average packed unsigned word integers from xmm2 with rounding.
T}
T{
VEX.256.66.0F.WIG E0 /r VPAVGB ymm2, ymm3/m256
T}
	B	V/V	AVX2	T{
Average packed unsigned byte integers from ymm2, and ymm1.
T}
T{
VEX.256.66.0F.WIG E3 /r VPAVGW ymm2, ymm3/m256
T}
	B	V/V	AVX2	T{
Average packed unsigned word integers from ymm1.
T}
T{
EVEX.128.66.0F.WIG E0 /r VPAVGB xmm2, xmm3/m128
T}
	C	V/V	AVX512VL AVX512BW	T{
Average packed unsigned byte integers from xmm2, and xmm3/m128 with rounding and store to xmm1 under writemask k1.
T}
T{
EVEX.256.66.0F.WIG E0 /r VPAVGB ymm2, ymm3/m256
T}
	C	V/V	AVX512VL AVX512BW	T{
Average packed unsigned byte integers from ymm2, and ymm3/m256 with rounding and store to ymm1 under writemask k1.
T}
T{
EVEX.512.66.0F.WIG E0 /r VPAVGB zmm2, zmm3/m512
T}
	C	V/V	AVX512BW	T{
Average packed unsigned byte integers from zmm2, and zmm3/m512 with rounding and store to zmm1 under writemask k1.
T}
T{
EVEX.128.66.0F.WIG E3 /r VPAVGW xmm2, xmm3/m128
T}
	C	V/V	AVX512VL AVX512BW	T{
Average packed unsigned word integers from xmm2, xmm3/m128 with rounding to xmm1 under writemask k1.
T}
T{
EVEX.256.66.0F.WIG E3 /r VPAVGW ymm2, ymm3/m256
T}
	C	V/V	AVX512VL AVX512BW	T{
Average packed unsigned word integers from ymm2, ymm3/m256 with rounding to ymm1 under writemask k1.
T}
T{
EVEX.512.66.0F.WIG E3 /r VPAVGW zmm2, zmm3/m512
T}
	C	V/V	AVX512BW	T{
Average packed unsigned word integers from zmm2, zmm3/m512 with rounding to zmm1 under writemask k1.
T}
.TE

.PP
.RS

.PP
1\&. See note in Section 2.4, “AVX and SSE Instruction Exception
Specification” in the Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 3A.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
C	Full Mem	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Performs a SIMD average of the packed unsigned integers from the source
operand (second operand) and the destination operand (first operand),
and stores the results in the destination operand. For each
corresponding pair of data elements in the first and second operands,
the elements are added together, a 1 is added to the temporary sum, and
that result is shifted right one bit position.

.PP
The (V)PAVGB instruction operates on packed unsigned bytes and the
(V)PAVGW instruction operates on packed unsigned words.

.PP
In 64\-bit mode and not encoded with VEX/EVEX, using a REX prefix in the
form of REX.R permits this instruction to access additional registers
(XMM8\-XMM15).

.PP
Legacy SSE instructions: The source operand can be an MMX technology
register or a 64\-bit memory location. The destination operand can be an
MMX technology register.

.PP
128\-bit Legacy SSE version: The first source operand is an XMM register.
The second operand can be an XMM register or an 128\-bit memory location.
The destination is not distinct from the first source XMM register and
the upper bits (MAXVL\-1:128) of the corresponding register destination
are unmodified.

.PP
EVEX.512 encoded version: The first source operand is a ZMM register.
The second source operand is a ZMM register or a 512\-bit memory
location. The destination operand is a ZMM register.

.PP
VEX.256 and EVEX.256 encoded versions: The first source operand is a YMM
register. The second source operand is a YMM register or a 256\-bit
memory location. The destination operand is a YMM register.

.PP
VEX.128 and EVEX.128 encoded versions: The first source operand is an
XMM register. The second source operand is an XMM register or 128\-bit
memory location. The destination operand is an XMM register. The upper
bits (MAXVL\-1:128) of the corresponding register destination are zeroed.

.SH OPERATION
.SS PAVGB (with 64\-bit operands)
.PP
.RS

.nf
DEST[7:0] ← (SRC[7:0] + DEST[7:0] + 1) >> 1; (* Temp sum before shifting is 9 bits *)
(* Repeat operation performed for bytes 2 through 6 *)
DEST[63:56] ← (SRC[63:56] + DEST[63:56] + 1) >> 1;

.fi
.RE

.SS PAVGW (with 64\-bit operands)
.PP
.RS

.nf
DEST[15:0] ← (SRC[15:0] + DEST[15:0] + 1) >> 1; (* Temp sum before shifting is 17 bits *)
(* Repeat operation performed for words 2 and 3 *)
DEST[63:48] ← (SRC[63:48] + DEST[63:48] + 1) >> 1;

.fi
.RE

.SS PAVGB (with 128\-bit operands)
.PP
.RS

.nf
DEST[7:0] ← (SRC[7:0] + DEST[7:0] + 1) >> 1; (* Temp sum before shifting is 9 bits *)
(* Repeat operation performed for bytes 2 through 14 *)
DEST[127:120] ← (SRC[127:120] + DEST[127:120] + 1) >> 1;

.fi
.RE

.SS PAVGW (with 128\-bit operands)
.PP
.RS

.nf
DEST[15:0] ← (SRC[15:0] + DEST[15:0] + 1) >> 1; (* Temp sum before shifting is 17 bits *)
(* Repeat operation performed for words 2 through 6 *)
DEST[127:112] ← (SRC[127:112] + DEST[127:112] + 1) >> 1;

.fi
.RE

.SS VPAVGB (VEX.128 encoded version)
.PP
.RS

.nf
DEST[7:0]←(SRC1[7:0] + SRC2[7:0] + 1) >> 1;
(* Repeat operation performed for bytes 2 through 15 *)
DEST[127:120]←(SRC1[127:120] + SRC2[127:120] + 1) >> 1
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VPAVGW (VEX.128 encoded version)
.PP
.RS

.nf
DEST[15:0]←(SRC1[15:0] + SRC2[15:0] + 1) >> 1;
(* Repeat operation performed for 16\-bit words 2 through 7 *)
DEST[127:112]←(SRC1[127:112] + SRC2[127:112] + 1) >> 1
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VPAVGB (VEX.256 encoded instruction)
.PP
.RS

.nf
DEST[7:0] ← (SRC1[7:0] + SRC2[7:0] + 1) >> 1; (* Temp sum before shifting is 9 bits *)
(* Repeat operation performed for bytes 2 through 31)
DEST[255:248]←(SRC1[255:248] + SRC2[255:248] + 1) >> 1;

.fi
.RE

.SS VPAVGW (VEX.256 encoded instruction)
.PP
.RS

.nf
    DEST[15:0] ← (SRC1[15:0] + SRC2[15:0] + 1) >> 1; (* Temp sum before shifting is 17 bits *)
    (* Repeat operation performed for words 2 through 15)
    DEST[255:14])←(SRC1[255:240] + SRC2[255:240] + 1) >> 1;
VPAVGB (EVEX encoded versions)
(KL, VL) = (16, 128), (32, 256), (64, 512)
FOR j←0 TO KL\-1
    i←j * 8
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i] ← (SRC1[i+7:i] + SRC2[i+7:i] + 1) >> 1; (* Temp sum before shifting is 9 bits *)
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+7:i] remains unchanged*
                ELSE *zeroing\-masking*
                        ; zeroing\-masking
                    DEST[i+7:i] = 0
            FI
    FI;
ENDFOR;
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS VPAVGW (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO KL\-1
    i←j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+15:i]←(SRC1[i+15:i] + SRC2[i+15:i] + 1) >> 1
                        ; (* Temp sum before shifting is 17 bits *)
        ELSE
            IF *merging\-masking* ; merging\-masking
                THEN *DEST[i+15:i] remains unchanged*
                ELSE *zeroing\-masking*
                            ; zeroing\-masking
                    DEST[i+15:i] = 0
            FI
    FI;
ENDFOR;
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalents
.PP
.RS

.nf
VPAVGB \_\_m512i \_mm512\_avg\_epu8( \_\_m512i a, \_\_m512i b);

VPAVGW \_\_m512i \_mm512\_avg\_epu16( \_\_m512i a, \_\_m512i b);

VPAVGB \_\_m512i \_mm512\_mask\_avg\_epu8(\_\_m512i s, \_\_mmask64 m, \_\_m512i a, \_\_m512i b);

VPAVGW \_\_m512i \_mm512\_mask\_avg\_epu16(\_\_m512i s, \_\_mmask32 m, \_\_m512i a, \_\_m512i b);

VPAVGB \_\_m512i \_mm512\_maskz\_avg\_epu8( \_\_mmask64 m, \_\_m512i a, \_\_m512i b);

VPAVGW \_\_m512i \_mm512\_maskz\_avg\_epu16( \_\_mmask32 m, \_\_m512i a, \_\_m512i b);

VPAVGB \_\_m256i \_mm256\_mask\_avg\_epu8(\_\_m256i s, \_\_mmask32 m, \_\_m256i a, \_\_m256i b);

VPAVGW \_\_m256i \_mm256\_mask\_avg\_epu16(\_\_m256i s, \_\_mmask16 m, \_\_m256i a, \_\_m256i b);

VPAVGB \_\_m256i \_mm256\_maskz\_avg\_epu8( \_\_mmask32 m, \_\_m256i a, \_\_m256i b);

VPAVGW \_\_m256i \_mm256\_maskz\_avg\_epu16( \_\_mmask16 m, \_\_m256i a, \_\_m256i b);

VPAVGB \_\_m128i \_mm\_mask\_avg\_epu8(\_\_m128i s, \_\_mmask16 m, \_\_m128i a, \_\_m128i b);

VPAVGW \_\_m128i \_mm\_mask\_avg\_epu16(\_\_m128i s, \_\_mmask8 m, \_\_m128i a, \_\_m128i b);

VPAVGB \_\_m128i \_mm\_maskz\_avg\_epu8( \_\_mmask16 m, \_\_m128i a, \_\_m128i b);

VPAVGW \_\_m128i \_mm\_maskz\_avg\_epu16( \_\_mmask8 m, \_\_m128i a, \_\_m128i b);

PAVGB: \_\_m64 \_mm\_avg\_pu8 (\_\_m64 a, \_\_m64 b)

PAVGW: \_\_m64 \_mm\_avg\_pu16 (\_\_m64 a, \_\_m64 b)

(V)PAVGB: \_\_m128i \_mm\_avg\_epu8 ( \_\_m128i a, \_\_m128i b)

(V)PAVGW: \_\_m128i \_mm\_avg\_epu16 ( \_\_m128i a, \_\_m128i b)

VPAVGB: \_\_m256i \_mm256\_avg\_epu8 ( \_\_m256i a, \_\_m256i b)

VPAVGW: \_\_m256i \_mm256\_avg\_epu16 ( \_\_m256i a, \_\_m256i b)

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH NUMERIC EXCEPTIONS
.PP
None.

.SH OTHER EXCEPTIONS
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 4.

.PP
EVEX\-encoded instruction, see Exceptions Type E4.nb.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
