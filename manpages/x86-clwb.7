.nh
.TH "X86-CLWB" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
CLWB - CACHE LINE WRITE BACK
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
66 0F AE /6 CLWB m8	M	V/V	CLWB	T{
Writes back modified cache line containing m8, and may retain the line in cache hierarchy in non\-modified state.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING1
.PP
.RS

.PP
1\&. The Mod field of the ModR/M byte cannot have value 11B.

.RE

.TS
allbox;
l 
l .
T{
Op/En Operand 1 Operand 2 Operand 3 Operand 4
T}
M ModRM:r/m (w) NA NA NA
.TE

.SH DESCRIPTION
.PP
Writes back to memory the cache line (if modified) that contains the
linear address specified with the memory operand from any level of the
cache hierarchy in the cache coherence domain. The line may be retained
in the cache hierarchy in non\-modified state. Retaining the line in the
cache hierarchy is a performance optimization (treated as a hint by
hardware) to reduce the possibility of cache miss on a subsequent
access. Hardware may choose to retain the line at any of the levels in
the cache hierarchy, and in some cases, may invalidate the line from the
cache hierarchy. The source operand is a byte memory location.

.PP
The availability of CLWB instruction is indicated by the presence of the
CPUID feature flag CLWB (bit 24 of the EBX register, see “CPUID — CPU
Identification” in this chapter). The aligned cache line size affected
is also indicated with the CPUID instruction (bits 8 through 15 of the
EBX register when the initial value in the EAX register is 1).

.PP
The memory attribute of the page containing the affected line has no
effect on the behavior of this instruction. It should be noted that
processors are free to speculatively fetch and cache data from system
memory regions that are assigned a memory\-type allowing for speculative
reads (such as, the WB, WC, and WT memory types). PREFETCHh instructions
can be used to provide the processor with hints for this speculative
behavior. Because this speculative fetching can occur at any time and is
not tied to instruction execution, the CLWB instruction is not ordered
with respect to PREFETCHh instructions or any of the speculative
fetching mechanisms (that is, data can be speculatively loaded into a
cache line just before, during, or after the execution of a CLWB
instruction that references the cache line).

.PP
CLWB instruction is ordered only by store\-fencing operations. For
example, software can use an SFENCE, MFENCE, XCHG, or LOCK\-prefixed
instructions to ensure that previous stores are included in the
write\-back. CLWB instruction need not be ordered by another CLWB or
CLFLUSHOPT instruction. CLWB is implicitly ordered with older stores
executed by the logical processor to the same address.

.PP
For usages that require only writing back modified data from cache lines
to memory (do not require the line to be invalidated), and expect to
subsequently access the data, software is recommended to use CLWB (with
appropriate fencing) instead of CLFLUSH or CLFLUSHOPT for improved
performance.

.PP
The CLWB instruction can be used at all privilege levels and is subject
to all permission checking and faults associated with a byte load. Like
a load, the CLWB instruction sets the accessed flag but not the dirty
flag in the page tables.

.PP
In some implementations, the CLWB instruction may always cause
transactional abort with Transactional Synchronization Extensions (TSX).
CLWB instruction is not expected to be commonly used inside typical
transactional regions. However, programmers must not rely on CLWB
instruction to force a transactional abort, since whether they cause
transactional abort is implementation dependent.

.SH OPERATION
.PP
.RS

.nf
Cache\_Line\_Write\_Back(m8);

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
CLWB void \_mm\_clwb(void const *p);

.fi
.RE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.CLWB
T}
[
bit 24
]
 = 0.
#GP(0)	T{
For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.
T}
#SS(0)	T{
For an illegal address in the SS segment.
T}
#PF(fault\-code)	For a page fault.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.CLWB
T}
[
bit 24
]
 = 0.
#GP	T{
If any part of the operand lies outside the effective address space from 0 to FFFFH.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in real address mode.

.TS
allbox;
l l 
l l .
#PF(fault\-code)	For a page fault.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.CLWB
T}
[
bit 24
]
 = 0.
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#PF(fault\-code)	For a page fault.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
