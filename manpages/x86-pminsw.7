.nh
.TH "X86-PMINSB-PMINSW" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
PMINSB-PMINSW - MINIMUM OF PACKED SIGNED INTEGERS
.PP
Opcode/Instruction

.PP
Op/En

.PP
64/32 bit Mode Support

.PP
CPUID Feature Flag

.PP
Description

.PP
NP 0F EA /mm1, mm2/m64

.PP
A

.PP
V/V

.PP
SSE

.PP
Compare signed word integers in mm1 and return minimum values.

.PP
66 0F 38 38 /r PMINSB xmm1, xmm2/m128

.PP
A

.PP
V/V

.PP
SSE4\_1

.PP
Compare packed signed byte integers in xmm1 and xmm2/m128 and store
packed minimum values in xmm1.

.PP
66 0F EA /r PMINSW xmm1, xmm2/m128

.PP
A

.PP
V/V

.PP
SSE2

.PP
Compare packed signed word integers in xmm2/m128 and xmm1 and store
packed minimum values in xmm1.

.PP
VEX.128.66.0F38 38 /r VPMINSB xmm1, xmm2, xmm3/m128

.PP
B

.PP
V/V

.PP
AVX

.PP
Compare packed signed byte integers in xmm2 and xmm3/m128 and store
packed minimum values in xmm1.

.PP
VEX.128.66.0F EA /r VPMINSW xmm1, xmm2, xmm3/m128

.PP
B

.PP
V/V

.PP
AVX

.PP
Compare packed signed word integers in xmm3/m128 and xmm2 and return
packed minimum values in xmm1.

.PP
VEX.256.66.0F38 38 /r VPMINSB ymm1, ymm2, ymm3/m256

.PP
B

.PP
V/V

.PP
AVX2

.PP
Compare packed signed byte integers in ymm2 and ymm3/m256 and store
packed minimum values in ymm1.

.PP
VEX.256.66.0F EA /r VPMINSW ymm1, ymm2, ymm3/m256

.PP
B

.PP
V/V

.PP
AVX2

.PP
Compare packed signed word integers in ymm3/m256 and ymm2 and return
packed minimum values in ymm1.

.PP
EVEX.128.66.0F38.WIG 38 /r VPMINSB xmm1{k1}{z}, xmm2, xmm3/m128

.PP
C

.PP
V/V

.PP
AVX512VL AVX512BW

.PP
Compare packed signed byte integers in xmm2 and xmm3/m128 and store
packed minimum values in xmm1 under writemask k1.

.PP
EVEX.256.66.0F38.WIG 38 /r VPMINSB ymm1{k1}{z}, ymm2, ymm3/m256

.PP
C

.PP
V/V

.PP
AVX512VL AVX512BW

.PP
Compare packed signed byte integers in ymm2 and ymm3/m256 and store
packed minimum values in ymm1 under writemask k1.

.PP
EVEX.512.66.0F38.WIG 38 /r VPMINSB zmm1{k1}{z}, zmm2, zmm3/m512

.PP
C

.PP
V/V

.PP
AVX512BW

.PP
Compare packed signed byte integers in zmm2 and zmm3/m512 and store
packed minimum values in zmm1 under writemask k1.

.PP
EVEX.128.66.0F.WIG EA /r VPMINSW xmm1{k1}{z}, xmm2, xmm3/m128

.PP
C

.PP
V/V

.PP
AVX512VL AVX512BW

.PP
Compare packed signed word integers in xmm2 and xmm3/m128 and store
packed minimum values in xmm1 under writemask k1.

.PP
EVEX.256.66.0F.WIG EA /r VPMINSW ymm1{k1}{z}, ymm2, ymm3/m256

.PP
C

.PP
V/V

.PP
AVX512VL AVX512BW

.PP
Compare packed signed word integers in ymm2 and ymm3/m256 and store
packed minimum values in ymm1 under writemask k1.

.PP
EVEX.512.66.0F.WIG EA /r VPMINSW zmm1{k1}{z}, zmm2, zmm3/m512

.PP
C

.PP
V/V

.PP
AVX512BW

.PP
Compare packed signed word integers in zmm2 and zmm3/m512 and store
packed minimum values in zmm1 under writemask k1.

.PP
NOTES: 1. See note in Section 2.4, “AVX and SSE Instruction Exception
Specification” in the Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 3A.

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
B	NA	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
C	Full Mem	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
Performs a SIMD compare of the packed signed byte, word, or dword
integers in the second source operand and the first source operand and
returns the minimum value for each pair of integers to the destination
operand.

.PP
Legacy SSE version PMINSW: The source operand can be an MMX technology
register or a 64\-bit memory location. The destination operand can be an
MMX technology register.

.PP
128\-bit Legacy SSE version: The first source and destination operands
are XMM registers. The second source operand is an XMM register or a
128\-bit memory location. Bits (MAXVL\-1:128) of the corresponding
destination register remain unchanged.

.PP
VEX.128 encoded version: The first source and destination operands are
XMM registers. The second source operand is an XMM register or a 128\-bit
memory location. Bits (MAXVL\-1:128) of the corresponding destination
register are zeroed.

.PP
VEX.256 encoded version: The second source operand can be an YMM
register or a 256\-bit memory location. The first source and destination
operands are YMM registers.

.PP
EVEX encoded versions: The first source operand is a ZMM/YMM/XMM
register; The second source operand is a ZMM/YMM/XMM register or a
512/256/128\-bit memory location. The destination operand is
conditionally updated based on writemask k1.

.SS Operation
.SS PMINSW (64\-bit operands)
.PP
.RS

.nf
IF DEST[15:0] < SRC[15:0] THEN
    DEST[15:0] ← DEST[15:0];
ELSE
    DEST[15:0] ← SRC[15:0]; FI;
(* Repeat operation for 2nd and 3rd words in source and destination operands *)
IF DEST[63:48] < SRC[63:48] THEN
    DEST[63:48] ← DEST[63:48];
ELSE
    DEST[63:48] ← SRC[63:48]; FI;

.fi
.RE

.SS PMINSB (128\-bit Legacy SSE version)
.PP
.RS

.nf
    IF DEST[7:0] < SRC[7:0] THEN
        DEST[7:0] ← DEST[7:0];
    ELSE
        DEST[15:0]←SRC[7:0]; FI;
    (* Repeat operation for 2nd through 15th bytes in source and destination operands *)
    IF DEST[127:120] < SRC[127:120] THEN
        DEST[127:120] ← DEST[127:120];
    ELSE
        DEST[127:120]←SRC[127:120]; FI;
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS VPMINSB (VEX.128 encoded version)
.PP
.RS

.nf
    IF SRC1[7:0] < SRC2[7:0] THEN
        DEST[7:0] ← SRC1[7:0];
    ELSE
        DEST[7:0]←SRC2[7:0]; FI;
    (* Repeat operation for 2nd through 15th bytes in source and destination operands *)
    IF SRC1[127:120] < SRC2[127:120] THEN
        DEST[127:120] ← SRC1[127:120];
    ELSE
        DEST[127:120]←SRC2[127:120]; FI;
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VPMINSB (VEX.256 encoded version)
.PP
.RS

.nf
    IF SRC1[7:0] < SRC2[7:0] THEN
        DEST[7:0] ← SRC1[7:0];
    ELSE
        DEST[15:0]←SRC2[7:0]; FI;
    (* Repeat operation for 2nd through 31st bytes in source and destination operands *)
    IF SRC1[255:248] < SRC2[255:248] THEN
        DEST[255:248] ← SRC1[255:248];
    ELSE
        DEST[255:248]←SRC2[255:248]; FI;
DEST[MAXVL\-1:256] ← 0

.fi
.RE

.SS VPMINSB (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (16, 128), (32, 256), (64, 512)
FOR j←0 TO KL\-1
    i←j * 8
    IF k1[j] OR *no writemask* THEN
        IF SRC1[i+7:i] < SRC2[i+7:i]
            THEN DEST[i+7:i]←SRC1[i+7:i];
            ELSE DEST[i+7:i]←SRC2[i+7:i];
        FI;
        ELSE
            IF *merging\-masking*
                THEN *DEST[i+7:i] remains unchanged*
                ELSE ; zeroing\-masking
                    DEST[i+7:i] ← 0
            FI
    FI;
ENDFOR;
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS PMINSW (128\-bit Legacy SSE version)
.PP
.RS

.nf
    IF DEST[15:0] < SRC[15:0] THEN
        DEST[15:0] ← DEST[15:0];
    ELSE
        DEST[15:0]←SRC[15:0]; FI;
    (* Repeat operation for 2nd through 7th words in source and destination operands *)
    IF DEST[127:112] < SRC[127:112] THEN
        DEST[127:112] ← DEST[127:112];
    ELSE
        DEST[127:112]←SRC[127:112]; FI;
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS VPMINSW (VEX.128 encoded version)
.PP
.RS

.nf
    IF SRC1[15:0] < SRC2[15:0] THEN
        DEST[15:0] ← SRC1[15:0];
    ELSE
        DEST[15:0]←SRC2[15:0]; FI;
    (* Repeat operation for 2nd through 7th words in source and destination operands *)
    IF SRC1[127:112] < SRC2[127:112] THEN
        DEST[127:112] ← SRC1[127:112];
    ELSE
        DEST[127:112]←SRC2[127:112]; FI;
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VPMINSW (VEX.256 encoded version)
.PP
.RS

.nf
    IF SRC1[15:0] < SRC2[15:0] THEN
        DEST[15:0] ← SRC1[15:0];
    ELSE
        DEST[15:0]←SRC2[15:0]; FI;
    (* Repeat operation for 2nd through 15th words in source and destination operands *)
    IF SRC1[255:240] < SRC2[255:240] THEN
        DEST[255:240] ← SRC1[255:240];
    ELSE
        DEST[255:240]←SRC2[255:240]; FI;
DEST[MAXVL\-1:256] ← 0

.fi
.RE

.SS VPMINSW (EVEX encoded versions)
.PP
.RS

.nf
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO KL\-1
    i←j * 16
    IF k1[j] OR *no writemask* THEN
        IF SRC1[i+15:i] < SRC2[i+15:i]
            THEN DEST[i+15:i]←SRC1[i+15:i];
            ELSE DEST[i+15:i]←SRC2[i+15:i];
        FI;
        ELSE
            IF *merging\-masking*
                THEN *DEST[i+15:i] remains unchanged*
                ELSE ; zeroing\-masking
                    DEST[i+15:i] ← 0
            FI
    FI;
ENDFOR;
DEST[MAXVL\-1:VL] ← 0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VPMINSB \_\_m512i \_mm512\_min\_epi8( \_\_m512i a, \_\_m512i b);

VPMINSB \_\_m512i \_mm512\_mask\_min\_epi8(\_\_m512i s, \_\_mmask64 k, \_\_m512i a, \_\_m512i b);

VPMINSB \_\_m512i \_mm512\_maskz\_min\_epi8( \_\_mmask64 k, \_\_m512i a, \_\_m512i b);

VPMINSW \_\_m512i \_mm512\_min\_epi16( \_\_m512i a, \_\_m512i b);

VPMINSW \_\_m512i \_mm512\_mask\_min\_epi16(\_\_m512i s, \_\_mmask32 k, \_\_m512i a, \_\_m512i b);

VPMINSW \_\_m512i \_mm512\_maskz\_min\_epi16( \_\_mmask32 k, \_\_m512i a, \_\_m512i b);

VPMINSB \_\_m256i \_mm256\_mask\_min\_epi8(\_\_m256i s, \_\_mmask32 k, \_\_m256i a, \_\_m256i b);

VPMINSB \_\_m256i \_mm256\_maskz\_min\_epi8( \_\_mmask32 k, \_\_m256i a, \_\_m256i b);

VPMINSW \_\_m256i \_mm256\_mask\_min\_epi16(\_\_m256i s, \_\_mmask16 k, \_\_m256i a, \_\_m256i b);

VPMINSW \_\_m256i \_mm256\_maskz\_min\_epi16( \_\_mmask16 k, \_\_m256i a, \_\_m256i b);

VPMINSB \_\_m128i \_mm\_mask\_min\_epi8(\_\_m128i s, \_\_mmask16 k, \_\_m128i a, \_\_m128i b);

VPMINSB \_\_m128i \_mm\_maskz\_min\_epi8( \_\_mmask16 k, \_\_m128i a, \_\_m128i b);

VPMINSW \_\_m128i \_mm\_mask\_min\_epi16(\_\_m128i s, \_\_mmask8 k, \_\_m128i a, \_\_m128i b);

VPMINSW \_\_m128i \_mm\_maskz\_min\_epi16( \_\_mmask8 k, \_\_m128i a, \_\_m128i b);

(V)PMINSB \_\_m128i \_mm\_min\_epi8 ( \_\_m128i a, \_\_m128i b);

(V)PMINSW \_\_m128i \_mm\_min\_epi16 ( \_\_m128i a, \_\_m128i b)

VPMINSB \_\_m256i \_mm256\_min\_epi8 ( \_\_m256i a, \_\_m256i b);

VPMINSW \_\_m256i \_mm256\_min\_epi16 ( \_\_m256i a, \_\_m256i b)

PMINSW:\_\_m64 \_mm\_min\_pi16 (\_\_m64 a, \_\_m64 b)

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
None

.SS Other Exceptions
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 4.

.PP
EVEX\-encoded instruction, see Exceptions Type E4.nb.

.TS
allbox;
l l 
l l .
#MF	T{
(64\-bit operations only) If there is a pending x87 FPU exception.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
