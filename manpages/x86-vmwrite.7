.nh
.TH "X86-VMWRITE" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VMWRITE - WRITE FIELD TO VIRTUAL-MACHINE CONTROL STRUCTURE
.TS
allbox;
l l l 
l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fCDescription\fR
NP 0F 79 VMWRITE r64, r/m64	RM	T{
Writes a specified VMCS field (in 64\-bit mode).
T}
NP 0F 79 VMWRITE r32, r/m32	RM	T{
Writes a specified VMCS field (outside 64\-bit mode).
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (r)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Writes the contents of a primary source operand (register or memory) to
a specified field in a VMCS. In VMX root operation, the instruction
writes to the current VMCS. If executed in VMX non\-root operation, the
instruction writes to the VMCS referenced by the VMCS link pointer field
in the current VMCS.

.PP
The VMCS field is specified by the VMCS\-field encoding contained in the
register secondary source operand. Outside IA\-32e mode, the secondary
source operand is always 32 bits, regardless of the value of CS.D. In
64\-bit mode, the secondary source operand has 64 bits.

.PP
The effective size of the primary source operand, which may be a
register or in memory, is always 32 bits outside IA\-32e mode (the
setting of CS.D is ignored with respect to operand size) and 64 bits in
64\-bit mode. If the VMCS field specified by the secondary source operand
is shorter than this effective operand size, the high bits of the
primary source operand are ignored. If the VMCS field is longer, then
the high bits of the field are cleared to 0.

.PP
Note that any faults resulting from accessing a memory source operand
occur after determining, in the operation section below, that the
relevant VMCS pointer is valid but before determining if the destination
VMCS field is supported.

.SH OPERATION
.PP
.RS

.nf
IF (not in VMX operation) or (CR0.PE = 0) or (RFLAGS.VM = 1) or (IA32\_EFER.LMA = 1 and CS.L = 0)
    THEN #UD;
ELSIF in VMX non\-root operation AND (“VMCS shadowing” is 0 OR secondary source operand sets bits in range 63:15 OR
VMWRITE bit corresponding to bits 14:0 of secondary source operand is 1)5
    THEN VMexit;
ELSIF CPL > 0
    THEN #GP(0);
ELSIF (in VMX root operation AND current\-VMCS pointer is not valid) OR
(in VMX non\-root operation AND VMCS\-link pointer is not valid)
    THEN VMfailInvalid;
ELSIF secondary source operand does not correspond to any VMCS field
    THEN VMfailValid(VMREAD/VMWRITE from/to unsupported VMCS component);
ELSIF VMCS field indexed by secondary source operand is a VM\-exit information field AND
processor does not support writing to such fields6
    THEN VMfailValid(VMWRITE to read\-only VMCS component);
    ELSE

.fi
.RE

.PP
.RS

.PP
5\&. The VMWRITE bit for a secondary source operand is defined as
follows. Let addr | (x » 3).

.PP
6\&. Software can discover whether these fields can be written by
reading the VMX capability MSR IA32\_VMX\_MISC (see Appendix A.6).

.RE

.PP
.RS

.nf
        IF in VMX root operation
            THEN field indexed by secondary source operand in current VMCS ← primary source operand;
            ELSE field indexed by secondary source operand in VMCS referenced by VMCS link pointer ← primary source operand;
    FI;
    VMsucceed;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
See the operation section and Section 30.2.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the current privilege level is not 0.
T}
	T{
If a memory source operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains an unusable segment.
T}
	T{
If the source operand is located in an execute\-only code segment.
T}
#PF(fault\-code)	T{
If a page fault occurs in accessing a memory source operand.
T}
#SS(0)	T{
If a memory source operand effective address is outside the SS segment limit.
T}
	T{
If the SS register contains an unusable segment.
T}
#UD	If not in VMX operation.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The VMWRITE instruction is not recognized in real\-address mode.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The VMWRITE instruction is not recognized in virtual\-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	T{
The VMWRITE instruction is not recognized in compatibility mode.
T}
.TE

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If the current privilege level is not 0.
T}
	T{
If the memory source operand is in the CS, DS, ES, FS, or GS segments and the memory address is in a non\-canonical form.
T}
#PF(fault\-code)	T{
If a page fault occurs in accessing a memory source operand.
T}
#SS(0)	T{
If the memory source operand is in the SS segment and the memory address is in a non\-canonical form.
T}
#UD	If not in VMX operation.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
