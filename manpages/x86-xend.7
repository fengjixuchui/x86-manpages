.nh
.TH "X86-XEND" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
XEND - TRANSACTIONAL END
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F 01 D5 XEND	A	V/V	RTM	T{
Specifies the end of an RTM code region.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand2	Operand3	Operand4
A	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
The instruction marks the end of an RTM code region. If this corresponds
to the outermost scope (that is, including this XEND instruction, the
number of XBEGIN instructions is the same as number of XEND
instructions), the logical processor will attempt to commit the logical
processor state atomically. If the commit fails, the logical processor
will rollback all architectural register and memory updates performed
during the RTM execution. The logical processor will resume execution at
the fallback address computed from the outermost XBEGIN instruction. The
EAX register is updated to reflect RTM abort information.

.PP
XEND executed outside a transactional region will cause a #GP (General
Protection Fault).

.SH OPERATION
.SS XEND
.PP
.RS

.nf
IF (RTM\_ACTIVE = 0) THEN
    SIGNAL #GP
ELSE
    RTM\_NEST\_COUNT\-\-
    IF (RTM\_NEST\_COUNT = 0) THEN
        Try to commit transaction
        IF fail to commit transactional execution
            THEN
                GOTO RTM\_ABORT\_PROCESSING;
            ELSE (* commit success *)
                RTM\_ACTIVE ← 0
        FI;
    FI;
FI;
(* For any RTM abort condition encountered during RTM execution *)
RTM\_ABORT\_PROCESSING:
    Restore architectural register state
    Discard memory updates performed in transaction
    Update EAX with status
    RTM\_NEST\_COUNT ← 0
    RTM\_ACTIVE ← 0
    IF 64\-bit Mode
        THEN
            RIP ← fallbackRIP
        ELSE
            EIP ← fallbackEIP
    FI;
END

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
XEND: void \_xend( void );

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	CPUID.(EAX=7, ECX=0):EBX.RTM
[
bit 11
]
 = 0.
	If LOCK prefix is used.
#GP(0)	If RTM
\_
ACTIVE = 0.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
