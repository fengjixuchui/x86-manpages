.nh
.TH "X86-ADOX" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ADOX - UNSIGNED INTEGER ADDITION OF TWO OPERANDS WITH OVERFLOW FLAG
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
F3 0F 38 F6 /r ADOX r32, r/m32	RM	V/V	ADX	T{
Unsigned addition of r32 with OF, r/m32 to r32, writes OF.
T}
T{
F3 REX.w 0F 38 F6 /r ADOX r64, r/m64
T}
	RM	V/NE	ADX	T{
Unsigned addition of r64 with OF, r/m64 to r64, writes OF.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
.TE

.SH DESCRIPTION
.PP
Performs an unsigned addition of the destination operand (first
operand), the source operand (second operand) and the overflow\-flag (OF)
and stores the result in the destination operand. The destination
operand is a general\-purpose register, whereas the source operand can be
a general\-purpose register or memory location. The state of OF
represents a carry from a previous addition. The instruction sets the OF
flag with the carry generated by the unsigned addition of the operands.

.PP
The ADOX instruction is executed in the context of multi\-precision
addition, where we add a series of operands with a carry\-chain. At the
beginning of a chain of additions, we execute an instruction to zero the
OF (e.g. XOR).

.PP
This instruction is supported in real mode and virtual\-8086 mode. The
operand size is always 32 bits if not in 64\-bit mode.

.PP
In 64\-bit mode, the default operation size is 32 bits. Using a REX
Prefix in the form of REX.R permits access to additional registers
(R8\-15). Using REX Prefix in the form of REX.W promotes operation to
64\-bits.

.PP
ADOX executes normally either inside or outside a transaction region.

.PP
Note: ADOX defines the CF and OF flags differently than the ADD/ADC
instructions as defined in Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 2A.

.SH OPERATION
.PP
.RS

.nf
IF OperandSize is 64\-bit
    THEN OF:DEST[63:0] ← DEST[63:0] + SRC[63:0] + OF;
    ELSE OF:DEST[31:0] ← DEST[31:0] + SRC[31:0] + OF;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
OF is updated based on result. CF, SF, ZF, AF and PF flags are
unmodified.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
unsigned char \_addcarryx\_u32 (unsigned char c\_in, unsigned int src1, unsigned int src2, unsigned int *sum\_out);

unsigned char \_addcarryx\_u64 (unsigned char c\_in, unsigned \_\_int64 src1, unsigned \_\_int64 src2, unsigned \_\_int64 *sum\_out);

.fi
.RE

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.ADX
T}
[
bit 19
]
 = 0.
#SS(0)	T{
For an illegal address in the SS segment.
T}
#GP(0)	T{
For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a null segment selector.
T}
#PF(fault\-code)	For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.ADX
T}
[
bit 19
]
 = 0.
#SS(0)	T{
For an illegal address in the SS segment.
T}
#GP(0)	T{
If any part of the operand lies outside the effective address space from 0 to FFFFH.
T}
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.ADX
T}
[
bit 19
]
 = 0.
#SS(0)	T{
For an illegal address in the SS segment.
T}
#GP(0)	T{
If any part of the operand lies outside the effective address space from 0 to FFFFH.
T}
#PF(fault\-code)	For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.ADX
T}
[
bit 19
]
 = 0.
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#PF(fault\-code)	For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
