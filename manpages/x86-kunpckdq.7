.nh
.TH "X86-KUNPCKBW-KUNPCKWD-KUNPCKDQ" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
KUNPCKBW-KUNPCKWD-KUNPCKDQ - UNPACK FOR MASK REGISTERS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.L1.66.0F.W0 4B /r KUNPCKBW k1, k2, k3
T}
	RVR	V/V	AVX512F	T{
Unpack 8\-bit masks in k2 and k3 and write word result in k1.
T}
T{
VEX.L1.0F.W0 4B /r KUNPCKWD k1, k2, k3
T}
	RVR	V/V	AVX512BW	T{
Unpack 16\-bit masks in k2 and k3 and write doubleword result in k1.
T}
T{
VEX.L1.0F.W1 4B /r KUNPCKDQ k1, k2, k3
T}
	RVR	V/V	AVX512BW	T{
Unpack 32\-bit masks in k2 and k3 and write quadword result in k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
Op/En	Operand 1	Operand 2	Operand 3
RVR	ModRM:reg (w)	VEX.1vvv (r)	ModRM:r/m (r, ModRM:
[
7:6
]
 must be 11b)
.TE

.SH DESCRIPTION
.PP
Unpacks the lower 8/16/32 bits of the second and third operands (source
operands) into the low part of the first operand (destination operand),
starting from the low bytes. The result is zero\-extended in the
destination.

.SH OPERATION
.SS KUNPCKBW
.PP
.RS

.nf
DEST[7:0] ← SRC2[7:0]
DEST[15:8] ← SRC1[7:0]
DEST[MAX\_KL\-1:16] ← 0

.fi
.RE

.SS KUNPCKWD
.PP
.RS

.nf
DEST[15:0] ← SRC2[15:0]
DEST[31:16] ← SRC1[15:0]
DEST[MAX\_KL\-1:32] ← 0

.fi
.RE

.SS KUNPCKDQ
.PP
.RS

.nf
DEST[31:0] ← SRC2[31:0]
DEST[63:32] ← SRC1[31:0]
DEST[MAX\_KL\-1:64] ← 0

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
KUNPCKBW \_\_mmask16 \_mm512\_kunpackb(\_\_mmask16 a, \_\_mmask16 b);

KUNPCKDQ \_\_mmask64 \_mm512\_kunpackd(\_\_mmask64 a, \_\_mmask64 b);

KUNPCKWD \_\_mmask32 \_mm512\_kunpackw(\_\_mmask32 a, \_\_mmask32 b);

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
None

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type K20.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
