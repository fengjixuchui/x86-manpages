.nh
.TH "X86-IDIV" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
IDIV - SIGNED DIVIDE
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
F6 /7	IDIV r/m8	M	Valid	Valid	T{
Signed divide AX by r/m8, with result stored in: AL ← Quotient, AH ← Remainder.
T}
REX + F6 /7	IDIV r/m8*	M	Valid	N.E.	T{
Signed divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder.
T}
F7 /7	IDIV r/m16	M	Valid	Valid	T{
Signed divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder.
T}
F7 /7	IDIV r/m32	M	Valid	Valid	T{
Signed divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder.
T}
REX.W + F7 /7	IDIV r/m64	M	Valid	N.E.	T{
Signed divide RDX:RAX by r/m64, with result stored in RAX ← Quotient, RDX ← Remainder.
T}
.TE

.PP
.RS

.PP
*
In64\-bitmode,r/m8cannotbeencodedtoaccessthefollowingbyteregistersifaREXprefixisused:AH,BH,CH,DH.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
M	ModRM:r/m (r)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Divides the (signed) value in the AX, DX:AX, or EDX:EAX (dividend) by
the source operand (divisor) and stores the result in the AX (AH:AL),
DX:AX, or EDX:EAX registers. The source operand can be a general\-purpose
register or a memory location. The action of this instruction depends on
the operand size (dividend/divisor).

.PP
Non\-integral results are truncated (chopped) towards 0. The remainder is
always less than the divisor in magnitude. Overflow is indicated with
the #DE (divide error) exception rather than with the CF flag.

.PP
In 64\-bit mode, the instruction’s default operation size is 32 bits. Use
of the REX.R prefix permits access to additional registers (R8\-R15). Use
of the REX.W prefix promotes operation to 64 bits. In 64\-bit mode when
REX.W is applied, the instruction divides the signed value in RDX:RAX by
the source operand. RAX contains a 64\-bit quotient; RDX contains a
64\-bit remainder.

.PP
See the summary chart at the beginning of this section for encoding data
and limits. See Table 3\-51.

.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOperand Size\fR	\fB\fCDividend\fR	\fB\fCDivisor\fR	\fB\fCQuotient\fR	\fB\fCRemainder\fR	\fB\fCQuotient Range\fR
T{
Word/byte Doubleword/word Quadword/doubleword Doublequadword/ quadword
T}
	AX DX:AX EDX:EAX RDX:RAX	r/m8 r/m16 r/m32 r/m64	AL AX EAX RAX	AH DX EDX RDX	T{
−128 to +127 −32,768 to +32,767 −263 − 1
T}
.TE

.PP
Table 3\-51. IDIV Results

.SH OPERATION
.PP
.RS

.nf
IF SRC = 0
    THEN #DE; (* Divide error *)
FI;
IF OperandSize = 8 (* Word/byte operation *)
    THEN
        temp ← AX / SRC; (* Signed division *)
        IF (temp > 7FH) or (temp < 80H)
        (* If a positive result is greater than 7FH or a negative result is less than 80H *)
            THEN #DE; (* Divide error *)
            ELSE
                AL ← temp;
                AH ← AX SignedModulus SRC;
        FI;
    ELSE IF OperandSize = 16 (* Doubleword/word operation *)
        THEN
            temp ← DX:AX / SRC; (* Signed division *)
            IF (temp > 7FFFH) or (temp < 8000H)
            (* If a positive result is greater than 7FFFH
            or a negative result is less than 8000H *)
                THEN
                    #DE; (* Divide error *)
                ELSE
                    AX ← temp;
                    DX ← DX:AX SignedModulus SRC;
            FI;
        FI;
    ELSE IF OperandSize = 32 (* Quadword/doubleword operation *)
            temp ← EDX:EAX / SRC; (* Signed division *)
            IF (temp > 7FFFFFFFH) or (temp < 80000000H)
            (* If a positive result is greater than 7FFFFFFFH
            or a negative result is less than 80000000H *)
                THEN
                    #DE; (* Divide error *)
                ELSE
                    EAX ← temp;
                    EDX ← EDXE:AX SignedModulus SRC;
            FI;
        FI;
    ELSE IF OperandSize = 64 (* Doublequadword/quadword operation *)
            temp ← RDX:RAX / SRC; (* Signed division *)
            IF (temp > 7FFFFFFFFFFFFFFFH) or (temp < 8000000000000000H)
            (* If a positive result is greater than 7FFFFFFFFFFFFFFFH
            or a negative result is less than 8000000000000000H *)
                THEN
                    #DE; (* Divide error *)
                ELSE
                    RAX ← temp;
                    RDX ← RDE:RAX SignedModulus SRC;
            FI;
        FI;
FI;

.fi
.RE

.SH FLAGS AFFECTED
.PP
The CF, OF, SF, ZF, AF, and PF flags are undefined.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#DE	T{
If the source operand (divisor) is 0.
T}
	T{
The signed result (quotient) is too large for the destination.
T}
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#DE	T{
If the source operand (divisor) is 0.
T}
	T{
The signed result (quotient) is too large for the destination.
T}
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#DE	T{
If the source operand (divisor) is 0.
T}
	T{
The signed result (quotient) is too large for the destination.
T}
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
#DE	T{
If the source operand (divisor) is 0
T}
	T{
If the quotient is too large for the designated register.
T}
#PF(fault\-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
