.nh
.TH "X86-ADDSUBPD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ADDSUBPD - PACKED DOUBLE-FP ADD-SUBTRACT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32\-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
66 0F D0 /r ADDSUBPD xmm2/m128	RM	V/V	SSE3	T{
Add/subtract double\-precision floating\-point values from xmm1.
T}
T{
VEX.128.66.0F.WIG D0 /r VADDSUBPD xmm1, xmm2, xmm3/m128
T}
	RVM	V/V	AVX	T{
Add/subtract packed double\-precision floating\-point values from xmm3/mem to xmm2 and stores result in xmm1.
T}
T{
VEX.256.66.0F.WIG D0 /r VADDSUBPD ymm1, ymm2, ymm3/m256
T}
	RVM	V/V	AVX	T{
Add / subtract packed double\-precision floating\-point values from ymm3/mem to ymm2 and stores result in ymm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
RVM	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Adds odd\-numbered double\-precision floating\-point values of the first
source operand (second operand) with the corresponding double\-precision
floating\-point values from the second source operand (third operand);
stores the result in the odd\-numbered values of the destination operand
(first operand). Subtracts the even\-numbered double\-precision
floating\-point values from the second source operand from the
corresponding double\-precision floating values in the first source
operand; stores the result into the even\-numbered values of the
destination operand.

.PP
In 64\-bit mode, using a REX prefix in the form of REX.R permits this
instruction to access additional registers (XMM8\-XMM15).

.PP
128\-bit Legacy SSE version: The second source can be an XMM register or
an 128\-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL\-1:128) of the
corresponding YMM register destination are unmodified. See Figure 3\-3.

.PP
VEX.128 encoded version: the first source operand is an XMM register or
128\-bit memory location. The destination operand is an XMM register. The
upper bits (MAXVL\-1:128) of the corresponding YMM register destination
are zeroed.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256\-bit memory
location. The destination operand is a YMM register.

.PP
ADDSUBPD xmm1, xmm2/m128xmm2/m128[127:64][63:0]RESULT:xmm1[127:64]
+ xmm2/m128[127:64]xmm1[63:0] \-
xmm2/m128[63:0]xmm1[127:64][63:0]

.PP
Figure 3\-3. ADDSUBPD—Packed Double\-FP Add/Subtract

.SH OPERATION
.SS ADDSUBPD (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[63:0]←DEST[63:0] \- SRC[63:0]
DEST[127:64]←DEST[127:64] + SRC[127:64]
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS VADDSUBPD (VEX.128 encoded version)
.PP
.RS

.nf
DEST[63:0]←SRC1[63:0] \- SRC2[63:0]
DEST[127:64]←SRC1[127:64] + SRC2[127:64]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VADDSUBPD (VEX.256 encoded version)
.PP
.RS

.nf
DEST[63:0]←SRC1[63:0] \- SRC2[63:0]
DEST[127:64]←SRC1[127:64] + SRC2[127:64]
DEST[191:128]←SRC1[191:128] \- SRC2[191:128]
DEST[255:192]←SRC1[255:192] + SRC2[255:192]

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
ADDSUBPD: \_\_m128d \_mm\_addsub\_pd(\_\_m128d a, \_\_m128d b)

VADDSUBPD: \_\_m256d \_mm256\_addsub\_pd (\_\_m256d a, \_\_m256d b)

.fi
.RE

.SH EXCEPTIONS
.PP
When the source operand is a memory operand, it must be aligned on a
16\-byte boundary or a general\-protection exception (#GP) will be
generated.

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
Overflow, Underflow, Invalid, Precision, Denormal.

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 2.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
