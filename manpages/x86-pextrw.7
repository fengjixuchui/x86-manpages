.nh
.TH "X86-PEXTRW" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
PEXTRW - EXTRACT WORD
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/ En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F C5 /imm8	A	V/V	SSE	T{
Extract the word specified by reg, bits 15\-0. The upper bits of r32 or r64 is zeroed.
T}
66 0F C5 /imm8	A	V/V	SSE2	T{
Extract the word specified by reg, bits 15\-0. The upper bits of r32 or r64 is zeroed.
T}
T{
66 0F 3A 15 /r ib PEXTRW reg/m16, xmm, imm8
T}
	B	V/V	SSE4\_1	T{
Extract the word specified by reg or m16. Zero\-extend the result in the destination, r32 or r64.
T}
T{
VEX.128.66.0F.W0 C5 /r ib VPEXTRW reg, xmm1, imm8
T}
	A	V2/V	AVX	T{
Extract the word specified by xmm1 and move it to reg, bits 15:0. Zero\-extend the result. The upper bits of r64/r32 is filled with zeros.
T}
T{
VEX.128.66.0F3A.W0 15 /r ib VPEXTRW reg/m16, xmm2, imm8
T}
	B	V/V	AVX	T{
Extract a word integer value from m16. The upper bits of r64/r32 is filled with zeros.
T}
T{
EVEX.128.66.0F.WIG C5 /r ib VPEXTRW reg, xmm1, imm8
T}
	A	V/V	AVX512B W	T{
Extract the word specified by imm8 from xmm1 and move it to reg, bits 15:0. Zero\-extend the result. The upper bits of r64/r32 is filled with zeros.
T}
T{
EVEX.128.66.0F3A.WIG 15 /r ib VPEXTRW reg/m16, xmm2, imm8
T}
	C	V/V	AVX512B W	T{
Extract a word integer value from xmm2 at the source word offset specified by imm8 into reg or m16. The upper bits of r64/r32 is filled with zeros.
T}
.TE

.PP
.RS

.PP
1\&. See note in Section 2.4, “AVX and SSE Instruction Exception
Specification” in the Intel® 64 and IA\-32 Architectures Software
Developer’s Manual, Volume 3A.

.PP
2\&. In 64\-bit mode, VEX.W1 is ignored for VPEXTRW (similar to legacy
REX.W=1 prefix in PEXTRW).

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (w)	ModRM:r/m (r)	imm8	NA
B	NA	ModRM:r/m (w)	ModRM:reg (r)	imm8	NA
C	Tuple1 Scalar	ModRM:r/m (w)	ModRM:reg (r)	imm8	NA
.TE

.SH DESCRIPTION
.PP
Copies the word in the source operand (second operand) specified by the
count operand (third operand) to the destination operand (first
operand). The source operand can be an MMX technology register or an XMM
register. The destination operand can be the low word of a
general\-purpose register or a 16\-bit memory address. The count operand
is an 8\-bit immediate. When specifying a word location in an MMX
technology register, the 2 least\-significant bits of the count operand
specify the location; for an XMM register, the 3 least\-significant bits
specify the location. The content of the destination register above bit
16 is cleared (set to all 0s).

.PP
In 64\-bit mode, using a REX prefix in the form of REX.R permits this
instruction to access additional registers (XMM8\-XMM15, R8\-15). If the
destination operand is a general\-purpose register, the default operand
size is 64\-bits in 64\-bit mode.

.PP
Note: In VEX.128 encoded versions, VEX.vvvv is reserved and must be
1111b, VEX.L must be 0, otherwise the instruction will #UD. In EVEX.128
encoded versions, EVEX.vvvv is reserved and must be 1111b, EVEX.L must
be 0, otherwise the instruction will #UD. If the destination operand is
a register, the default operand size in 64\-bit mode for VPEXTRW is 64
bits, the bits above the least significant byte/word/dword data are
filled with zeros.

.SH OPERATION
.PP
.RS

.nf
IF (DEST = Mem16)
THEN
    SEL ← COUNT[2:0];
    TEMP←(Src >> SEL*16) AND FFFFH;
    Mem16 ← TEMP[15:0];
ELSE IF (64\-Bit Mode and destination is a general\-purpose register)
    THEN
        FOR (PEXTRW instruction with 64\-bit source operand)
                { SEL←COUNT[1:0];
                    TEMP ← (SRC >> (SEL ∗ 16)) AND FFFFH;
                    r64[15:0] ← TEMP[15:0];
                    r64[63:16] ← ZERO\_FILL; };
        FOR (PEXTRW instruction with 128\-bit source operand)
                { SEL←COUNT[2:0];
                    TEMP ← (SRC >> (SEL ∗ 16)) AND FFFFH;
                    r64[15:0] ← TEMP[15:0];
                    r64[63:16] ← ZERO\_FILL; }
    ELSE
        FOR (PEXTRW instruction with 64\-bit source operand)
            { SEL ← COUNT[1:0];
                    TEMP ← (SRC >> (SEL ∗ 16)) AND FFFFH;
                    r32[15:0] ← TEMP[15:0];
                    r32[31:16] ← ZERO\_FILL; };
        FOR (PEXTRW instruction with 128\-bit source operand)
            { SEL ← COUNT[2:0];
                    TEMP ← (SRC >> (SEL ∗ 16)) AND FFFFH;
                    r32[15:0] ← TEMP[15:0];
                    r32[31:16] ← ZERO\_FILL; };
    FI;
FI;

.fi
.RE

.SS VPEXTRW ( dest=m16)
.PP
.RS

.nf
SRC\_Offset ← Imm8[2:0]
Mem16←(Src >> Src\_Offset*16)

.fi
.RE

.SS VPEXTRW ( dest=reg)
.PP
.RS

.nf
IF (64\-Bit Mode )
THEN
    SRC\_Offset ← Imm8[2:0]
    DEST[15:0]←((Src >> Src\_Offset*16) AND 0FFFFh)
    DEST[63:16] ← ZERO\_FILL;
ELSE
    SRC\_Offset ← Imm8[2:0]
    DEST[15:0]←((Src >> Src\_Offset*16) AND 0FFFFh)
    DEST[31:16] ← ZERO\_FILL;
FI

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
PEXTRW: int \_mm\_extract\_pi16 (\_\_m64 a, int n)

PEXTRW: int \_mm\_extract\_epi16 ( \_\_m128i a, int imm)

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH NUMERIC EXCEPTIONS
.PP
None.

.SH OTHER EXCEPTIONS
.PP
Non\-EVEX\-encoded instruction, see Exceptions Type 5;

.PP
EVEX\-encoded instruction, see Exceptions Type E9NF.

.TS
allbox;
l l 
l l .
#UD	If VEX.L = 1 or EVEX.L’L 
\&gt;
 0.
	T{
If VEX.vvvv != 1111B or EVEX.vvvv != 1111B.
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
