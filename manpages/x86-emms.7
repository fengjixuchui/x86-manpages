.nh
.TH "X86-EMMS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
EMMS - EMPTY MMX TECHNOLOGY STATE
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fCOpcode\fR	\fB\fCInstruction\fR	\fB\fCOp/En\fR	\fB\fC64\-Bit Mode\fR	\fB\fCCompat/Leg Mode\fR	\fB\fCDescription\fR
NP 0F 77	EMMS	ZO	Valid	Valid	T{
Set the x87 FPU tag word to empty.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
ZO	NA	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Sets the values of all the tags in the x87 FPU tag word to empty (all
1s). This operation marks the x87 FPU data registers (which are aliased
to the MMX technology registers) as available for use by x87 FPU
floating\-point instructions. (See Figure
8\-7 in the Intel® 64 and IA\-32 Architectures Software Developer’s
Manual, Volume 1, for the format of the x87 FPU tag word.) All other MMX
instructions (other than the EMMS instruction) set all the tags in x87
FPU tag word to valid (all 0s).

.PP
The EMMS instruction must be used to clear the MMX technology state at
the end of all MMX technology procedures or subroutines and before
calling other procedures or subroutines that may execute x87
floating\-point instructions. If a floating\-point instruction loads one
of the registers in the x87 FPU data register stack before the x87 FPU
tag word has been reset by the EMMS instruction, an x87 floating\-point
register stack overflow can occur that will result in an x87
floating\-point exception or incorrect result.

.PP
EMMS operation is the same in non\-64\-bit modes and 64\-bit mode.

.SH OPERATION
.PP
.RS

.nf
x87FPUTagWord ← FFFFH;

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
void \_mm\_empty()

.fi
.RE

.SH FLAGS AFFECTED
.PP
None

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#UD	If CR0.EM
[
bit 2
]
 = 1.
#NM	If CR0.TS
[
bit 3
]
 = 1.
#MF	T{
If there is a pending FPU exception.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
