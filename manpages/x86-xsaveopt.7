.nh
.TH "X86-XSAVEOPT" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
XSAVEOPT - SAVE PROCESSOR EXTENDED STATES OPTIMIZED
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
NP 0F AE /6 XSAVEOPT mem	M	V/V	XSAVEOPT	T{
Save state components specified by EDX:EAX to mem, optimizing if possible.
T}
T{
NP REX.W + 0F AE /6 XSAVEOPT64 mem
T}
	M	V/V	XSAVEOPT	T{
Save state components specified by EDX:EAX to mem, optimizing if possible.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
M	ModRM:r/m (w)	NA	NA	NA
.TE

.SH DESCRIPTION
.PP
Performs a full or partial save of processor state components to the
XSAVE area located at the memory address specified by the destination
operand. The implicit EDX:EAX register pair specifies a 64\-bit
instruction mask. The specific state components saved correspond to the
bits set in the requested\-feature bitmap (RFBM), which is the
logical\-AND of EDX:EAX and XCR0.

.PP
The format of the XSAVE area is detailed in Section 13.4, “XSAVE Area,”
of Intel® 64 and IA\-32 Architectures Software Developer’s Manual, Volume
1.

.PP
Section 13.9, “Operation of XSAVEOPT,” of Intel® 64 and IA\-32
Architectures Software Developer’s Manual, Volume 1 provides a detailed
description of the operation of the XSAVEOPT instruction. The following
items provide a high\-level outline:

.RS
.IP \(bu 2
Execution of XSAVEOPT is similar to that of XSAVE. XSAVEOPT differs
from XSAVE in that it may use the init and modified optimizations.
The performance of XSAVEOPT will be equal to or better than that of
XSAVE.
.IP \(bu 2
XSAVEOPT saves state component i has not been modified since the
last execution of XRSTOR or XRSTORS; and (2) this execution of
XSAVES corresponds to that last execution of XRSTOR or XRSTORS as
determined by the internal value XRSTOR\_INFO (see the Operation
section below).
.IP \(bu 2
XSAVEOPT does not modify bytes 511:464 of the legacy region of the
XSAVE area (see Section 13.4.1, “Legacy Region of an XSAVE Area” of
Intel® 64 and IA\-32 Architectures Software Developer’s Manual,
Volume 1).
.IP \(bu 2
XSAVEOPT reads the XSTATE\_BV field of the XSAVE header (see Section
13.4.2, “XSAVE Header” of i] with the value that it read from
memory (it does not modify the bit). XSAVEOPT does not write to any
part of the XSAVE header other than the XSTATE\_BV field.
.IP \(bu 2
XSAVEOPT always uses the standard format of the extended region of
the XSAVE area (see Section 13.4.3, “Extended Region of an XSAVE
Area” of Volume 1).

.RE

.PP
.RS

.PP
1\&. There is an exception made for MXCSR and MXCSR\_MASK, which belong
to state component 1 — SSE. XSAVEOPT always saves these to memory if
RFBM[1] = 1 or RFBM[2] = 1, regardless of the value of XINUSE.

.RE

.PP
Use of a destination operand not aligned to 64\-byte boundary (in either
64\-bit or 32\-bit modes) will result in a general\-protection (#GP)
exception. In 64\-bit mode, the upper 32 bits of RDX and RAX are ignored.

.PP
See Section 13.6, “Processor Tracking of XSAVE\-Managed State,” of Intel®
64 and IA\-32 Architectures Software Developer’s Manual, Volume 1 for
discussion of the bitmap XMODIFIED and of the quantity XRSTOR\_INFO.

.SH OPERATION
.PP
.RS

.nf
RFBM ← XCR0 AND EDX:EAX; /* bitwise logical AND */
OLD\_BV ← XSTATE\_BV field from XSAVE header;
TO\_BE\_SAVED ← RFBM AND XINUSE;
IF in VMX non\-root operation
    THEN VMXNR ← 1;
    ELSE VMXNR ← 0;
FI;
LAXA ← linear address of XSAVE area;
IF XRSTOR\_INFO = CPL,VMXNR,LAXA,00000000\_00000000H
    THEN TO\_BE\_SAVED ← TO\_BE\_SAVED AND XMODIFIED;
FI;
IF TO\_BE\_SAVED[0] = 1
    THEN store x87 state into legacy region of XSAVE area;
FI;
IF TO\_BE\_SAVED[1]
    THEN store XMM registers into legacy region of XSAVE area; // this step does not save MXCSR or MXCSR\_MASK
FI;
IF RFBM[1] = 1 or RFBM[2] = 1
    THEN store MXCSR and MXCSR\_MASK into legacy region of XSAVE area;
FI;
FOR i ← 2 TO 62
    IF TO\_BE\_SAVED[i] = 1
        THEN save XSAVE state component i at offset n from base of XSAVE area (n enumerated by CPUID(EAX=0DH,ECX=i):EBX);
    FI;
ENDFOR;
XSTATE\_BV field in XSAVE header ← (OLD\_BV AND NOT RFBM) OR (XINUSE AND RFBM);

.fi
.RE

.SH FLAGS AFFECTED
.PP
None.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
XSAVEOPT: void \_xsaveopt( void * , unsigned \_\_int64);

XSAVEOPT: void \_xsaveopt64( void * , unsigned \_\_int64);

.fi
.RE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If a memory operand is not aligned on a 64\-byte boundary, regardless of segment.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault\-code)	If a page fault occurs.
#NM	If CR0.TS
[
bit 3
]
 = 1.
#UD	If CPUID.01H:ECX.XSAVE
[
bit 26
]
T{
 = 0 or CPUID.(EAX=0DH,ECX=1):EAX.XSAVEOPT
T}
[
bit 0
]
 = 0.
	If CR4.OSXSAVE
[
bit 18
]
 = 0.
	If the LOCK prefix is used.
#AC	T{
If this exception is disabled a general protection exception (
T}
#
T{
GP) is signaled if the memory operand is not aligned on a 64\-byte boundary, as described above. If the alignment check exception (
T}
#
T{
AC) is enabled (and the CPL is 3), signaling of 
T}
#
T{
AC is not guaranteed and may vary with implementation, as follows. In all implementations where 
T}
#
T{
AC is not signaled, a general protection exception is signaled in its place. In addition, the width of the alignment check may also vary with implementation. For instance, for a given implementation, an alignment check exception might be signaled for a 2\-byte misalignment, whereas a general protection exception might be signaled for all other misalignments (4\-, 8\-, or 16\-byte misalignments).
T}
.TE

.SH REAL\-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#GP	T{
If a memory operand is not aligned on a 64\-byte boundary, regardless of segment.
T}
	T{
If any part of the operand lies outside the effective address space from 0 to FFFFH.
T}
#NM	If CR0.TS
[
bit 3
]
 = 1.
#UD	If CPUID.01H:ECX.XSAVE
[
bit 26
]
T{
 = 0 or CPUID.(EAX=0DH,ECX=1):EAX.XSAVEOPT
T}
[
bit 0
]
 = 0.
	If CR4.OSXSAVE
[
bit 18
]
 = 0.
	If the LOCK prefix is used.
.TE

.SH VIRTUAL\-8086 MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
.PP
Same exceptions as in protected mode.

.SH 64\-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
#SS(0)	T{
If a memory address referencing the SS segment is in a non\-canonical form.
T}
#GP(0)	T{
If the memory address is in a non\-canonical form.
T}
	T{
If a memory operand is not aligned on a 64\-byte boundary, regardless of segment.
T}
#PF(fault\-code)	If a page fault occurs.
#NM	If CR0.TS
[
bit 3
]
 = 1.
#UD	If CPUID.01H:ECX.XSAVE
[
bit 26
]
T{
 = 0 or CPUID.(EAX=0DH,ECX=1):EAX.XSAVEOPT
T}
[
bit 0
]
 = 0.
	If CR4.OSXSAVE
[
bit 18
]
 = 0.
	If the LOCK prefix is used.
#AC	T{
If operand is not aligned on a 64\-byte boundary, as described above. If the alignment check exception (
T}
#
T{
AC) is enabled (and the CPL is 3), signaling of 
T}
#
T{
AC is not guaranteed and may vary with implementation, as follows. In all implementations where 
T}
#
T{
AC is not signaled, a general protection exception is signaled in its place. In addition, the width of the alignment check may also vary with implementation. For instance, for a given implementation, an alignment check exception might be signaled for a 2\-byte misalignment, whereas a general protection exception might be signaled for all other misalignments (4\-, 8\-, or 16\-byte misalignments).
T}
.TE

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
