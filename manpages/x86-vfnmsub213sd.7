.nh
.TH "X86-VFNMSUB132SD-VFNMSUB213SD-VFNMSUB231SD" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
VFNMSUB132SD-VFNMSUB213SD-VFNMSUB231SD - FUSED NEGATIVE MULTIPLY-SUBTRACT OF SCALAR DOUBLE-PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32 bit Mode Support\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
T{
VEX.LIG.66.0F38.W1 9F /r VFNMSUB132SD xmm1, xmm2, xmm3/m64
T}
	A	V/V	FMA	T{
Multiply scalar double\-precision floating\-point value from xmm1 and xmm3/mem, negate the multiplication result and subtract xmm2 and put result in xmm1.
T}
T{
VEX.LIG.66.0F38.W1 AF /r VFNMSUB213SD xmm1, xmm2, xmm3/m64
T}
	A	V/V	FMA	T{
Multiply scalar double\-precision floating\-point value from xmm1 and xmm2, negate the multiplication result and subtract xmm3/mem and put result in xmm1.
T}
T{
VEX.LIG.66.0F38.W1 BF /r VFNMSUB231SD xmm1, xmm2, xmm3/m64
T}
	A	V/V	FMA	T{
Multiply scalar double\-precision floating\-point value from xmm2 and xmm3/mem, negate the multiplication result and subtract xmm1 and put result in xmm1.
T}
T{
EVEX.LIG.66.0F38.W1 9F /r VFNMSUB132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}
T}
	B	V/V	AVX512F	T{
Multiply scalar double\-precision floating\-point value from xmm1 and xmm3/m64, negate the multiplication result and subtract xmm2 and put result in xmm1.
T}
T{
EVEX.LIG.66.0F38.W1 AF /r VFNMSUB213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}
T}
	B	V/V	AVX512F	T{
Multiply scalar double\-precision floating\-point value from xmm1 and xmm2, negate the multiplication result and subtract xmm3/m64 and put result in xmm1.
T}
T{
EVEX.LIG.66.0F38.W1 BF /r VFNMSUB231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}
T}
	B	V/V	AVX512F	T{
Multiply scalar double\-precision floating\-point value from xmm2 and xmm3/m64, negate the multiplication result and subtract xmm1 and put result in xmm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
Op/En	Tuple Type	Operand 1	Operand 2	Operand 3	Operand 4
A	NA	ModRM:reg (r, w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
B	Tuple1 Scalar	ModRM:reg (r, w)	EVEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SS Description
.PP
VFNMSUB132SD: Multiplies the low packed double\-precision floating\-point
value from the first source operand to the low packed double\-precision
floating\-point value in the third source operand. From negated infinite
precision intermediate result, subtracts the low double\-precision
floating\-point value in the second source operand, performs rounding and
stores the resulting packed double\-precision floating\-point value to the
destination operand (first source operand).

.PP
VFNMSUB213SD: Multiplies the low packed double\-precision floating\-point
value from the second source operand to the low packed double\-precision
floating\-point value in the first source operand. From negated infinite
precision intermediate result, subtracts the low double\-precision
floating\-point value in the third source operand, performs rounding and
stores the resulting packed double\-precision floating\-point value to the
destination operand (first source operand).

.PP
VFNMSUB231SD: Multiplies the low packed double\-precision floating\-point
value from the second source to the low packed double\-precision
floating\-point value in the third source operand. From negated infinite
precision intermediate result, subtracts the low double\-precision
floating\-point value in the first source operand, performs rounding and
stores the resulting packed double\-precision floating\-point value to the
destination operand (first source operand).

.PP
VEX.128 and EVEX encoded version: The destination operand (also first
source operand) is encoded in reg\_field. The second source operand is
encoded in VEX.vvvv/EVEX.vvvv. The third source operand is encoded in
rm\_field. Bits 127:64 of the destination are unchanged. Bits
MAXVL\-1:128 of the destination register are zeroed.

.PP
EVEX encoded version: The low quadword element of the destination is
updated according to the writemask.

.PP
Compiler tools may optionally support a complementary mnemonic for each
instruction mnemonic listed in the opcode/instruction column of the
summary table. The behavior of the complementary mnemonic in situations
involving NANs are governed by the definition of the instruction
mnemonic defined in the opcode/instruction column.

.SS Operation
.PP
.RS

.nf
In the operations below, “*” and “\-” symbols represent multiplication and subtraction with infinite precision inputs and outputs (no
rounding).

.fi
.RE

.SS VFNMSUB132SD DEST, SRC2, SRC3 (EVEX encoded version)
.PP
.RS

.nf
IF (EVEX.b = 1) and SRC3 *is a register*
    THEN
        SET\_RM(EVEX.RC);
    ELSE
        SET\_RM(MXCSR.RM);
FI;
IF k1[0] or *no writemask*
    THEN DEST[63:0]←RoundFPControl(\-(DEST[63:0]*SRC3[63:0]) \- SRC2[63:0])
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[63:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[63:0]←0
        FI;
FI;
DEST[127:64] ← DEST[127:64]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VFNMSUB213SD DEST, SRC2, SRC3 (EVEX encoded version)
.PP
.RS

.nf
IF (EVEX.b = 1) and SRC3 *is a register*
    THEN
        SET\_RM(EVEX.RC);
    ELSE
        SET\_RM(MXCSR.RM);
FI;
IF k1[0] or *no writemask*
    THEN DEST[63:0]←RoundFPControl(\-(SRC2[63:0]*DEST[63:0]) \- SRC3[63:0])
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[63:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[63:0]←0
        FI;
FI;
DEST[127:64] ← DEST[127:64]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VFNMSUB231SD DEST, SRC2, SRC3 (EVEX encoded version)
.PP
.RS

.nf
IF (EVEX.b = 1) and SRC3 *is a register*
    THEN
        SET\_RM(EVEX.RC);
    ELSE
        SET\_RM(MXCSR.RM);
FI;
IF k1[0] or *no writemask*
    THEN DEST[63:0]←RoundFPControl(\-(SRC2[63:0]*SRC3[63:0]) \- DEST[63:0])
    ELSE
        IF *merging\-masking* ; merging\-masking
            THEN *DEST[63:0] remains unchanged*
            ELSE ; zeroing\-masking
                THEN DEST[63:0]←0
        FI;
FI;
DEST[127:64] ← DEST[127:64]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VFNMSUB132SD DEST, SRC2, SRC3 (VEX encoded version)
.PP
.RS

.nf
DEST[63:0]←RoundFPControl\_MXCSR(\- (DEST[63:0]*SRC3[63:0]) \- SRC2[63:0])
DEST[127:64] ←DEST[127:64]
DEST[MAXVL\-1:128] ←0

.fi
.RE

.SS VFNMSUB213SD DEST, SRC2, SRC3 (VEX encoded version)
.PP
.RS

.nf
DEST[63:0]←RoundFPControl\_MXCSR(\- (SRC2[63:0]*DEST[63:0]) \- SRC3[63:0])
DEST[127:64] ←DEST[127:64]
DEST[MAXVL\-1:128] ←0

.fi
.RE

.SS VFNMSUB231SD DEST, SRC2, SRC3 (VEX encoded version)
.PP
.RS

.nf
DEST[63:0]←RoundFPControl\_MXCSR(\- (SRC2[63:0]*SRC3[63:0]) \- DEST[63:0])
DEST[127:64] ←DEST[127:64]
DEST[MAXVL\-1:128] ←0

.fi
.RE

.SS Intel C/C++ Compiler Intrinsic Equivalent
.PP
.RS

.nf
VFNMSUBxxxSD \_\_m128d \_mm\_fnmsub\_round\_sd(\_\_m128d a, \_\_m128d b, \_\_m128d c, int r);

VFNMSUBxxxSD \_\_m128d \_mm\_mask\_fnmsub\_sd(\_\_m128d a, \_\_mmask8 k, \_\_m128d b, \_\_m128d c);

VFNMSUBxxxSD \_\_m128d \_mm\_maskz\_fnmsub\_sd(\_\_mmask8 k, \_\_m128d a, \_\_m128d b, \_\_m128d c);

VFNMSUBxxxSD \_\_m128d \_mm\_mask3\_fnmsub\_sd(\_\_m128d a, \_\_m128d b, \_\_m128d c, \_\_mmask8 k);

VFNMSUBxxxSD \_\_m128d \_mm\_mask\_fnmsub\_round\_sd(\_\_m128d a, \_\_mmask8 k, \_\_m128d b, \_\_m128d c, int r);

VFNMSUBxxxSD \_\_m128d \_mm\_maskz\_fnmsub\_round\_sd(\_\_mmask8 k, \_\_m128d a, \_\_m128d b, \_\_m128d c, int r);

VFNMSUBxxxSD \_\_m128d \_mm\_mask3\_fnmsub\_round\_sd(\_\_m128d a, \_\_m128d b, \_\_m128d c, \_\_mmask8 k, int r);

VFNMSUBxxxSD \_\_m128d \_mm\_fnmsub\_sd (\_\_m128d a, \_\_m128d b, \_\_m128d c);

.fi
.RE

.SS SIMD Floating\-Point Exceptions
.PP
Overflow, Underflow, Invalid, Precision, Denormal

.SS Other Exceptions
.PP
VEX\-encoded instructions, see Exceptions Type 3.

.PP
EVEX\-encoded instructions, see Exceptions Type E3.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
MIT licensed by TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
