.nh
.TH "X86-ADDSUBPS" "7" "May 2019" "TTMO" "Intel x86-64 ISA Manual"
.SH NAME
ADDSUBPS - PACKED SINGLE-FP ADD-SUBTRACT
.TS
allbox;
l l l l l 
l l l l l .
\fB\fCOpcode/Instruction\fR	\fB\fCOp/En\fR	\fB\fC64/32\-bit Mode\fR	\fB\fCCPUID Feature Flag\fR	\fB\fCDescription\fR
F2 0F D0 /r ADDSUBPS xmm2/m128	RM	V/V	SSE3	T{
Add/subtract single\-precision floating\-point values from xmm1.
T}
T{
VEX.128.F2.0F.WIG D0 /r VADDSUBPS xmm1, xmm2, xmm3/m128
T}
	RVM	V/V	AVX	T{
Add/subtract single\-precision floating\-point values from xmm3/mem to xmm2 and stores result in xmm1.
T}
T{
VEX.256.F2.0F.WIG D0 /r VADDSUBPS ymm1, ymm2, ymm3/m256
T}
	RVM	V/V	AVX	T{
Add / subtract single\-precision floating\-point values from ymm3/mem to ymm2 and stores result in ymm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
Op/En	Operand 1	Operand 2	Operand 3	Operand 4
RM	ModRM:reg (r, w)	ModRM:r/m (r)	NA	NA
RVM	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	NA
.TE

.SH DESCRIPTION
.PP
Adds odd\-numbered single\-precision floating\-point values of the first
source operand (second operand) with the corresponding single\-precision
floating\-point values from the second source operand (third operand);
stores the result in the odd\-numbered values of the destination operand
(first operand). Subtracts the even\-numbered single\-precision
floating\-point values from the second source operand from the
corresponding single\-precision floating values in the first source
operand; stores the result into the even\-numbered values of the
destination operand.

.PP
In 64\-bit mode, using a REX prefix in the form of REX.R permits this
instruction to access additional registers (XMM8\-XMM15).

.PP
128\-bit Legacy SSE version: The second source can be an XMM register or
an 128\-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL\-1:128) of the
corresponding YMM register destination are unmodified. See Figure 3\-4.

.PP
VEX.128 encoded version: the first source operand is an XMM register or
128\-bit memory location. The destination operand is an XMM register. The
upper bits (MAXVL\-1:128) of the corresponding YMM register destination
are zeroed.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256\-bit memory
location. The destination operand is a YMM register.

.PP
ADDSUBPS xmm1,
xmm2/m128xmm2/[127:96][95:64][63:32][31:0]m128RESULT:xmm1[127:96]
+xmm1[95:64] \- xmm2/xmm1[63:32] +xmm1[31:0]
\-xmm1xmm2/m128[127:96]m128[95:64]xmm2/m128[63:32]xmm2/m128[31:0][127:96][95:64][63:32][31:0]

.PP
Figure 3\-4. ADDSUBPS—Packed Single\-FP Add/Subtract

.SH OPERATION
.SS ADDSUBPS (128\-bit Legacy SSE version)
.PP
.RS

.nf
DEST[31:0]←DEST[31:0] \- SRC[31:0]
DEST[63:32]←DEST[63:32] + SRC[63:32]
DEST[95:64]←DEST[95:64] \- SRC[95:64]
DEST[127:96]←DEST[127:96] + SRC[127:96]
DEST[MAXVL\-1:128] (Unmodified)

.fi
.RE

.SS VADDSUBPS (VEX.128 encoded version)
.PP
.RS

.nf
DEST[31:0]←SRC1[31:0] \- SRC2[31:0]
DEST[63:32]←SRC1[63:32] + SRC2[63:32]
DEST[95:64]←SRC1[95:64] \- SRC2[95:64]
DEST[127:96]←SRC1[127:96] + SRC2[127:96]
DEST[MAXVL\-1:128] ← 0

.fi
.RE

.SS VADDSUBPS (VEX.256 encoded version)
.PP
.RS

.nf
DEST[31:0]←SRC1[31:0] \- SRC2[31:0]
DEST[63:32]←SRC1[63:32] + SRC2[63:32]
DEST[95:64]←SRC1[95:64] \- SRC2[95:64]
DEST[127:96]←SRC1[127:96] + SRC2[127:96]
DEST[159:128]←SRC1[159:128] \- SRC2[159:128]
DEST[191:160]←SRC1[191:160] + SRC2[191:160]
DEST[223:192]←SRC1[223:192] \- SRC2[223:192]
DEST[255:224]←SRC1[255:224] + SRC2[255:224].

.fi
.RE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT
.PP
.RS

.nf
ADDSUBPS: \_\_m128 \_mm\_addsub\_ps(\_\_m128 a, \_\_m128 b)

VADDSUBPS: \_\_m256 \_mm256\_addsub\_ps (\_\_m256 a, \_\_m256 b)

.fi
.RE

.SH EXCEPTIONS
.PP
When the source operand is a memory operand, the operand must be aligned
on a 16\-byte boundary or a general\-protection exception (#GP) will be
generated.

.SH SIMD FLOATING\-POINT EXCEPTIONS
.PP
Overflow, Underflow, Invalid, Precision, Denormal.

.SH OTHER EXCEPTIONS
.PP
See Exceptions Type 2.

.SH SEE ALSO
.PP
x86\-manpages(7) for a list of other x86\-64 man pages.

.SH COLOPHON
.PP
This UNOFFICIAL, mechanically\-separated, non\-verified reference is
provided for convenience, but it may be incomplete or broken in
various obvious or non\-obvious ways. Refer to Intel® 64 and IA\-32
Architectures Software Developer’s Manual for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/ttmo-O/x86-manpages.

.br
Copyleft TTMO 2020 (Turkish Unofficial Chamber of Reverse Engineers - https://ttmo.re).
